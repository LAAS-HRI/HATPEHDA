RUN N=372 With=True
INITIAL STATES
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
|| robot_init.at_robot = front 	ObsType.OBS 	loc=front
|| robot_init.at_human = front 	ObsType.OBS 	loc=front
|| robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
|| robot_init.washer = full 	ObsType.OBS 	loc=front
|| robot_init.oil = low 	ObsType.INF 	loc=front
|| robot_init.hood = open 	ObsType.OBS 	loc=front
|| robot_init.rear_light = new 	ObsType.INF 	loc=rear
|| robot_init.left_light = ok 	ObsType.INF 	loc=front
|| robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
|| human_init.at_robot = front
|| human_init.at_human = front
|| human_init.at_oil_bottle = front
|| human_init.washer = low
|| human_init.oil = full
|| human_init.hood = open
|| human_init.rear_light = old
|| human_init.left_light = ok
|| human_init.right_light = ok
|________________________________________________________________________
Start first exploration
SA: human assessed washer <- full
first node = 0.0 Flag.E Type.I#1, (human BEGIN []) -1> (human BEGIN []) prev=None next=[]

<@> picked node = 0.0 Flag.E Type.I#1, (human BEGIN []) -1> (human BEGIN []) prev=None next=[]
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 0-RA-Car_maintenance()
decomp i= 0 : origin
	0-RA-Car_maintenance() => [3-RP-go_front_car()-0.0 - 4-RP-refill_washer()-0.0 - 5-RP-refill_oil()-0.0 - 6-RP-store_oil()-0.0] : dec_car_maintenance_R
	3-RP-go_front_car()-0.0 => [3-RP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[4-RP-refill_washer()-0.0, 5-RP-refill_oil()-0.0, 6-RP-store_oil()-0.0]
	4-RP-refill_washer()-0.0 => [4-RP-refill_washer()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[5-RP-refill_oil()-0.0, 6-RP-store_oil()-0.0]
	end 0
refinement = 
[
	origin: [5-RP-refill_oil()-0.0 - 6-RP-store_oil()-0.0]
]
Decomp OK
[93malready done[0m
[93m5-RP-refill_oil()-0.0 not applicable[0m
Operator isn't applicable with only one of the beliefs

# UPDATE belief divergences
	oil:None: H=full R=low
	rear_light:None: H=old R=new

Testing with 1 relevant divergence
divergence tested = oil:None: H=full R=low
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : 
	1-HA-Car_maintenance() => [7-HA-Handling_lights() - 8-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 7-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	7-HA-Handling_lights() => [9-HA-Replacing_rear_light() - 10-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [11-HA-Checking_front_lights(), 12-HA-Replacing_rear_light(), 8-HA-Closing_hood()]
	9-HA-Replacing_rear_light() => [13-HP-go_behind_car()-0.0 - 14-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	11-HA-Checking_front_lights() => [15-HP-go_front_car()-0.0 - 16-HP-check_left_light()-0.0 - 17-HP-check_right_light()-0.0] : dec_checking_front_ligths
	15-HP-go_front_car()-0.0 => [15-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[16-HP-check_left_light()-0.0, 17-HP-check_right_light()-0.0, 12-HA-Replacing_rear_light(), 8-HA-Closing_hood()]
	16-HP-check_left_light()-0.0 => [16-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[17-HP-check_right_light()-0.0, 12-HA-Replacing_rear_light(), 8-HA-Closing_hood()]
	17-HP-check_right_light()-0.0 => [17-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[12-HA-Replacing_rear_light(), 8-HA-Closing_hood()]
	12-HA-Replacing_rear_light() => [18-HP-go_behind_car()-0.0 - 19-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 1
	divergence is relevant!
Relevant divergences to correct : 	oil:None: H=full R=low

COM: com action added eff = 20-RP-COM_ALIGN['oil-low']-3.0
robot- Refine agenda
Task to refine: 0-RA-Car_maintenance()
decomp i= 0 : origin
	0-RA-Car_maintenance() => [21-RP-go_front_car()-0.0 - 22-RP-refill_washer()-0.0 - 23-RP-refill_oil()-0.0 - 24-RP-store_oil()-0.0] : dec_car_maintenance_R
	21-RP-go_front_car()-0.0 => [21-RP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[22-RP-refill_washer()-0.0, 23-RP-refill_oil()-0.0, 24-RP-store_oil()-0.0]
	22-RP-refill_washer()-0.0 => [22-RP-refill_washer()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[23-RP-refill_oil()-0.0, 24-RP-store_oil()-0.0]
	end 0
refinement = 
[
	origin: [23-RP-refill_oil()-0.0 - 24-RP-store_oil()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
Trying to create delaying branch
rel_divs= 	oil:None: H=full R=low

	initial div ..
applied refinement = 
next actions:
	- 25-RP-refill_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-24-RP-store_oil()-0.0
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [26-HA-Handling_lights() - 27-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 26-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	26-HA-Handling_lights() => [28-HA-Replacing_rear_light() - 29-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [30-HA-Checking_front_lights(), 31-HA-Replacing_rear_light(), 27-HA-Closing_hood()]
	28-HA-Replacing_rear_light() => [32-HP-go_behind_car()-0.0 - 33-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	30-HA-Checking_front_lights() => [34-HP-go_front_car()-0.0 - 35-HP-check_left_light()-0.0 - 36-HP-check_right_light()-0.0] : dec_checking_front_ligths
	34-HP-go_front_car()-0.0 => [34-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[35-HP-check_left_light()-0.0, 36-HP-check_right_light()-0.0, 31-HA-Replacing_rear_light(), 27-HA-Closing_hood()]
	35-HP-check_left_light()-0.0 => [35-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[36-HP-check_right_light()-0.0, 31-HA-Replacing_rear_light(), 27-HA-Closing_hood()]
	36-HP-check_right_light()-0.0 => [36-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[31-HA-Replacing_rear_light(), 27-HA-Closing_hood()]
	31-HA-Replacing_rear_light() => [37-HP-go_behind_car()-0.0 - 38-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 1
human- Refine agenda with r_beliefs
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [39-HA-Handling_lights() - 40-HA-Closing_hood()] : dec_car_maintenance_H
	39-HA-Handling_lights() => [41-HA-Checking_front_lights()] : dec_handling_lights_start_replace
	41-HA-Checking_front_lights() => [42-HP-go_front_car()-0.0 - 43-HP-check_left_light()-0.0 - 44-HP-check_right_light()-0.0] : dec_checking_front_ligths
	42-HP-go_front_car()-0.0 => [42-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[43-HP-check_left_light()-0.0, 44-HP-check_right_light()-0.0, 40-HA-Closing_hood()]
	43-HP-check_left_light()-0.0 => [43-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[44-HP-check_right_light()-0.0, 40-HA-Closing_hood()]
	44-HP-check_right_light()-0.0 => [44-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[40-HA-Closing_hood()]
	40-HA-Closing_hood() => [45-HP-go_front_car()-0.0 - 46-HP-close_hood()-0.0] : dec_closing_hood
	45-HP-go_front_car()-0.0 => [45-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[46-HP-close_hood()-0.0]
	end 0
Different number of decomposition
NEED of belief alignment!

# UPDATE belief divergences
	rear_light:None: H=old R=new

Testing with 1 relevant divergence
divergence tested = rear_light:None: H=old R=new
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : 
	1-HA-Car_maintenance() => [47-HA-Handling_lights() - 48-HA-Closing_hood()] : dec_car_maintenance_H
	47-HA-Handling_lights() => [49-HA-Checking_front_lights()] : dec_handling_lights_start_replace
	49-HA-Checking_front_lights() => [50-HP-go_front_car()-0.0 - 51-HP-check_left_light()-0.0 - 52-HP-check_right_light()-0.0] : dec_checking_front_ligths
	50-HP-go_front_car()-0.0 => [50-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[51-HP-check_left_light()-0.0, 52-HP-check_right_light()-0.0, 48-HA-Closing_hood()]
	51-HP-check_left_light()-0.0 => [51-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[52-HP-check_right_light()-0.0, 48-HA-Closing_hood()]
	52-HP-check_right_light()-0.0 => [52-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[48-HA-Closing_hood()]
	48-HA-Closing_hood() => [53-HP-go_front_car()-0.0 - 54-HP-close_hood()-0.0] : dec_closing_hood
	53-HP-go_front_car()-0.0 => [53-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[54-HP-close_hood()-0.0]
	end 0
	divergence is relevant!
Relevant divergences to correct : 	rear_light:None: H=old R=new

COM: com action added = 55-RP-COM_ALIGN['rear_light-new']-3.0
human- Refine agenda
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [56-HA-Handling_lights() - 57-HA-Closing_hood()] : dec_car_maintenance_H
	56-HA-Handling_lights() => [58-HA-Checking_front_lights()] : dec_handling_lights_start_replace
	58-HA-Checking_front_lights() => [59-HP-go_front_car()-0.0 - 60-HP-check_left_light()-0.0 - 61-HP-check_right_light()-0.0] : dec_checking_front_ligths
	59-HP-go_front_car()-0.0 => [59-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[60-HP-check_left_light()-0.0, 61-HP-check_right_light()-0.0, 57-HA-Closing_hood()]
	60-HP-check_left_light()-0.0 => [60-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[61-HP-check_right_light()-0.0, 57-HA-Closing_hood()]
	61-HP-check_right_light()-0.0 => [61-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[57-HA-Closing_hood()]
	57-HA-Closing_hood() => [62-HP-go_front_car()-0.0 - 63-HP-close_hood()-0.0] : dec_closing_hood
	62-HP-go_front_car()-0.0 => [62-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[63-HP-close_hood()-0.0]
	end 0
human- Refine agenda with r_beliefs
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [64-HA-Handling_lights() - 65-HA-Closing_hood()] : dec_car_maintenance_H
	64-HA-Handling_lights() => [66-HA-Checking_front_lights()] : dec_handling_lights_start_replace
	66-HA-Checking_front_lights() => [67-HP-go_front_car()-0.0 - 68-HP-check_left_light()-0.0 - 69-HP-check_right_light()-0.0] : dec_checking_front_ligths
	67-HP-go_front_car()-0.0 => [67-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[68-HP-check_left_light()-0.0, 69-HP-check_right_light()-0.0, 65-HA-Closing_hood()]
	68-HP-check_left_light()-0.0 => [68-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[69-HP-check_right_light()-0.0, 65-HA-Closing_hood()]
	69-HP-check_right_light()-0.0 => [69-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[65-HA-Closing_hood()]
	65-HA-Closing_hood() => [70-HP-go_front_car()-0.0 - 71-HP-close_hood()-0.0] : dec_closing_hood
	70-HP-go_front_car()-0.0 => [70-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[71-HP-close_hood()-0.0]
	end 0
No relevant belief divergence for refinement
refinement = 
[
	origin: [63-HP-close_hood()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
Trying to create delaying branch
rel_divs= 	rear_light:None: H=old R=new

	initial div ..
applied refinement = 
next actions:
	- 72-HP-close_hood()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-24-RP-store_oil()-0.0
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 24-RP-store_oil()-0.0
decomp i= 0 : origin
	end 0
refinement = 
[
	origin: [24-RP-store_oil()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 73-RP-store_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
human- Refine agenda with r_beliefs
No relevant belief divergence for refinement
refinement = 
[
	origin: [DecompType.BOTH_AGENDAS_EMPTY]
]
BOTH_AGENDAS_EMPTY
applied refinement = 
next actions:

=> end explo
node explored = 3.0 Flag.E Type.F#1, (human BEGIN []) -4> (robot store_oil ()) prev=None next=[]
new_e_flagged_nodes : 
	3.0 Flag.E Type.F#1, (human BEGIN []) -4> (robot store_oil ()) prev=None next=[]
e_flagged_nodes :
	3.0 Flag.E Type.F#1, (human BEGIN []) -4> (robot store_oil ()) prev=None next=[]
Ns before check = None
Nf = 3.0 Flag.E Type.F#1, (human BEGIN []) -4> (robot store_oil ()) prev=None next=[]
new Ns!
Ns after check = 3.0 Flag.S Type.F#1, (human BEGIN []) -4> (robot store_oil ()) prev=None next=[]
e_flagged_nodes after check solution:
	=> time spent first exploration = 41ms
Start refining u nodes
	=> time spent refining = 0ms
Total duration = 41ms
Non relevant div:
False
Plans:
20-RP-COM_ALIGN['oil-low']-3.0 25-RP-refill_oil()-1.0 55-RP-COM_ALIGN['rear_light-new']-3.0 72-HP-close_hood()-1.0 73-RP-store_oil()-1.0
best_traces:
[73-RP-store_oil()-1.0]
best_metrics:
(2, 0, 3, 0)
