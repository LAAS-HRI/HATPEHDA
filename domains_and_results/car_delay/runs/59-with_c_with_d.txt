RUN N=59 With=True
INITIAL STATES
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
|| robot_init.at_robot = front 	ObsType.OBS 	loc=front
|| robot_init.at_human = front 	ObsType.OBS 	loc=front
|| robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
|| robot_init.washer = low 	ObsType.OBS 	loc=front
|| robot_init.oil = low 	ObsType.INF 	loc=front
|| robot_init.hood = open 	ObsType.OBS 	loc=front
|| robot_init.rear_light = old 	ObsType.INF 	loc=rear
|| robot_init.left_light = ok 	ObsType.INF 	loc=front
|| robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
|| human_init.at_robot = front
|| human_init.at_human = front
|| human_init.at_oil_bottle = front
|| human_init.washer = full
|| human_init.oil = low
|| human_init.hood = open
|| human_init.rear_light = new
|| human_init.left_light = ok
|| human_init.right_light = ok
|________________________________________________________________________
Start first exploration
SA: human assessed washer <- low
first node = 0.0 Flag.E Type.I#1, (robot BEGIN []) -1> (robot BEGIN []) prev=None next=[]

<@> picked node = 0.0 Flag.E Type.I#1, (robot BEGIN []) -1> (robot BEGIN []) prev=None next=[]
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = low 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [3-HA-Handling_lights() - 4-HA-Closing_hood()] : dec_car_maintenance_H
	3-HA-Handling_lights() => [5-HA-Checking_front_lights()] : dec_handling_lights_start_replace
	5-HA-Checking_front_lights() => [6-HP-go_front_car()-0.0 - 7-HP-check_left_light()-0.0 - 8-HP-check_right_light()-0.0] : dec_checking_front_ligths
	6-HP-go_front_car()-0.0 => [6-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[7-HP-check_left_light()-0.0, 8-HP-check_right_light()-0.0, 4-HA-Closing_hood()]
	7-HP-check_left_light()-0.0 => [7-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[8-HP-check_right_light()-0.0, 4-HA-Closing_hood()]
	8-HP-check_right_light()-0.0 => [8-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[4-HA-Closing_hood()]
	4-HA-Closing_hood() => [9-HP-go_front_car()-0.0 - 10-HP-close_hood()-0.0] : dec_closing_hood
	9-HP-go_front_car()-0.0 => [9-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[10-HP-close_hood()-0.0]
	end 0
human- Refine agenda with r_beliefs
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [11-HA-Handling_lights() - 12-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 11-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	11-HA-Handling_lights() => [13-HA-Replacing_rear_light() - 14-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [15-HA-Checking_front_lights(), 16-HA-Replacing_rear_light(), 12-HA-Closing_hood()]
	13-HA-Replacing_rear_light() => [17-HP-go_behind_car()-0.0 - 18-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	15-HA-Checking_front_lights() => [19-HP-go_front_car()-0.0 - 20-HP-check_left_light()-0.0 - 21-HP-check_right_light()-0.0] : dec_checking_front_ligths
	19-HP-go_front_car()-0.0 => [19-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[20-HP-check_left_light()-0.0, 21-HP-check_right_light()-0.0, 16-HA-Replacing_rear_light(), 12-HA-Closing_hood()]
	20-HP-check_left_light()-0.0 => [20-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[21-HP-check_right_light()-0.0, 16-HA-Replacing_rear_light(), 12-HA-Closing_hood()]
	21-HP-check_right_light()-0.0 => [21-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[16-HA-Replacing_rear_light(), 12-HA-Closing_hood()]
	16-HA-Replacing_rear_light() => [22-HP-go_behind_car()-0.0 - 23-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 1
Different number of decomposition
NEED of belief alignment!

# UPDATE belief divergences
	rear_light:None: H=new R=old

Testing with 1 relevant divergence
divergence tested = rear_light:None: H=new R=old
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : 
	1-HA-Car_maintenance() => [24-HA-Handling_lights() - 25-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 24-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	24-HA-Handling_lights() => [26-HA-Replacing_rear_light() - 27-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [28-HA-Checking_front_lights(), 29-HA-Replacing_rear_light(), 25-HA-Closing_hood()]
	26-HA-Replacing_rear_light() => [30-HP-go_behind_car()-0.0 - 31-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	28-HA-Checking_front_lights() => [32-HP-go_front_car()-0.0 - 33-HP-check_left_light()-0.0 - 34-HP-check_right_light()-0.0] : dec_checking_front_ligths
	32-HP-go_front_car()-0.0 => [32-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[33-HP-check_left_light()-0.0, 34-HP-check_right_light()-0.0, 29-HA-Replacing_rear_light(), 25-HA-Closing_hood()]
	33-HP-check_left_light()-0.0 => [33-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[34-HP-check_right_light()-0.0, 29-HA-Replacing_rear_light(), 25-HA-Closing_hood()]
	34-HP-check_right_light()-0.0 => [34-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[29-HA-Replacing_rear_light(), 25-HA-Closing_hood()]
	29-HA-Replacing_rear_light() => [35-HP-go_behind_car()-0.0 - 36-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 1
	divergence is relevant!
Relevant divergences to correct : 	rear_light:None: H=new R=old

COM: com action added = 37-RP-COM_ALIGN['rear_light-old']-3.0
human- Refine agenda
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [38-HA-Handling_lights() - 39-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 38-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	38-HA-Handling_lights() => [40-HA-Replacing_rear_light() - 41-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [42-HA-Checking_front_lights(), 43-HA-Replacing_rear_light(), 39-HA-Closing_hood()]
	40-HA-Replacing_rear_light() => [44-HP-go_behind_car()-0.0 - 45-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	42-HA-Checking_front_lights() => [46-HP-go_front_car()-0.0 - 47-HP-check_left_light()-0.0 - 48-HP-check_right_light()-0.0] : dec_checking_front_ligths
	46-HP-go_front_car()-0.0 => [46-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[47-HP-check_left_light()-0.0, 48-HP-check_right_light()-0.0, 43-HA-Replacing_rear_light(), 39-HA-Closing_hood()]
	47-HP-check_left_light()-0.0 => [47-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[48-HP-check_right_light()-0.0, 43-HA-Replacing_rear_light(), 39-HA-Closing_hood()]
	48-HP-check_right_light()-0.0 => [48-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[43-HA-Replacing_rear_light(), 39-HA-Closing_hood()]
	43-HA-Replacing_rear_light() => [49-HP-go_behind_car()-0.0 - 50-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 1
human- Refine agenda with r_beliefs
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [51-HA-Handling_lights() - 52-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 51-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	51-HA-Handling_lights() => [53-HA-Replacing_rear_light() - 54-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [55-HA-Checking_front_lights(), 56-HA-Replacing_rear_light(), 52-HA-Closing_hood()]
	53-HA-Replacing_rear_light() => [57-HP-go_behind_car()-0.0 - 58-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	55-HA-Checking_front_lights() => [59-HP-go_front_car()-0.0 - 60-HP-check_left_light()-0.0 - 61-HP-check_right_light()-0.0] : dec_checking_front_ligths
	59-HP-go_front_car()-0.0 => [59-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[60-HP-check_left_light()-0.0, 61-HP-check_right_light()-0.0, 56-HA-Replacing_rear_light(), 52-HA-Closing_hood()]
	60-HP-check_left_light()-0.0 => [60-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[61-HP-check_right_light()-0.0, 56-HA-Replacing_rear_light(), 52-HA-Closing_hood()]
	61-HP-check_right_light()-0.0 => [61-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[56-HA-Replacing_rear_light(), 52-HA-Closing_hood()]
	56-HA-Replacing_rear_light() => [62-HP-go_behind_car()-0.0 - 63-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 1
No relevant belief divergence for refinement
refinement = 
[
	dec_handling_lights_start_replace: [44-HP-go_behind_car()-0.0 - 45-HP-replace_rear_light()-0.0 - 41-HA-Checking_front_lights() - 39-HA-Closing_hood()]
	dec_handling_lights_start_checking: [49-HP-go_behind_car()-0.0 - 50-HP-replace_rear_light()-0.0 - 39-HA-Closing_hood()]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
Trying to create delaying branch
rel_divs= 	rear_light:None: H=new R=old

	initial div ..
applied refinement = 
next actions:
	- 64-HP-go_behind_car()-1.0
	- 65-HP-go_behind_car()-1.0

=> end explo
node explored = 0.0 Flag.F Type.H#1, (robot BEGIN []) -1> (robot COM_ALIGN ['rear_light-old']) prev=None next=[#2 #3]
new_e_flagged_nodes : 
	1.0 Flag.E Type.I#2, (human go_behind_car ()) -1> (human go_behind_car ()) prev=#1 next=[]
	1.0 Flag.E Type.I#3, (human go_behind_car ()) -1> (human go_behind_car ()) prev=#1 next=[]
e_flagged_nodes :
	1.0 Flag.E Type.I#2, (human go_behind_car ()) -1> (human go_behind_car ()) prev=#1 next=[]
	1.0 Flag.E Type.I#3, (human go_behind_car ()) -1> (human go_behind_car ()) prev=#1 next=[]
Ns before check = None
Nf = None
Ns after check = None
e_flagged_nodes after check solution:
	1.0 Flag.E Type.I#2, (human go_behind_car ()) -1> (human go_behind_car ()) prev=#1 next=[]
	1.0 Flag.E Type.I#3, (human go_behind_car ()) -1> (human go_behind_car ()) prev=#1 next=[]

<@> picked node = 1.0 Flag.E Type.I#2, (human go_behind_car ()) -1> (human go_behind_car ()) prev=#1 next=[]
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-45-HP-replace_rear_light()-0.0
||	-41-HA-Checking_front_lights()
||	-39-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = low 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 0-RA-Car_maintenance()
decomp i= 0 : dec_handling_lights_start_replace
	0-RA-Car_maintenance() => [66-RP-go_front_car()-0.0 - 67-RP-refill_washer()-0.0 - 68-RP-refill_oil()-0.0 - 69-RP-store_oil()-0.0] : dec_car_maintenance_R
	66-RP-go_front_car()-0.0 => [66-RP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[67-RP-refill_washer()-0.0, 68-RP-refill_oil()-0.0, 69-RP-store_oil()-0.0]
	end 0
refinement = 
[
	dec_handling_lights_start_replace: [67-RP-refill_washer()-0.0 - 68-RP-refill_oil()-0.0 - 69-RP-store_oil()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 70-RP-refill_washer()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-68-RP-refill_oil()-0.0
||	-69-RP-store_oil()-0.0
| AGENDA human =
||	-45-HP-replace_rear_light()-0.0
||	-41-HA-Checking_front_lights()
||	-39-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 45-HP-replace_rear_light()-0.0
decomp i= 0 : dec_handling_lights_start_replace
	end 0
human- Refine agenda with r_beliefs
Task to refine: 45-HP-replace_rear_light()-0.0
decomp i= 0 : dec_handling_lights_start_replace
	end 0
No relevant belief divergence for refinement
refinement = 
[
	dec_handling_lights_start_replace: [45-HP-replace_rear_light()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 71-HP-replace_rear_light()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-68-RP-refill_oil()-0.0
||	-69-RP-store_oil()-0.0
| AGENDA human =
||	-41-HA-Checking_front_lights()
||	-39-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 68-RP-refill_oil()-0.0
decomp i= 0 : dec_handling_lights_start_replace
	end 0
refinement = 
[
	dec_handling_lights_start_replace: [68-RP-refill_oil()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 72-RP-refill_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-69-RP-store_oil()-0.0
| AGENDA human =
||	-41-HA-Checking_front_lights()
||	-39-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 41-HA-Checking_front_lights()
decomp i= 0 : dec_handling_lights_start_replace
	41-HA-Checking_front_lights() => [73-HP-go_front_car()-0.0 - 74-HP-check_left_light()-0.0 - 75-HP-check_right_light()-0.0] : dec_checking_front_ligths
	end 0
human- Refine agenda with r_beliefs
Task to refine: 41-HA-Checking_front_lights()
decomp i= 0 : dec_handling_lights_start_replace
	41-HA-Checking_front_lights() => [76-HP-go_front_car()-0.0 - 77-HP-check_left_light()-0.0 - 78-HP-check_right_light()-0.0] : dec_checking_front_ligths
	end 0
No relevant belief divergence for refinement
refinement = 
[
	dec_handling_lights_start_replace: [73-HP-go_front_car()-0.0 - 74-HP-check_left_light()-0.0 - 75-HP-check_right_light()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
SA: human assessed washer <- full
applied refinement = 
next actions:
	- 79-HP-go_front_car()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-69-RP-store_oil()-0.0
| AGENDA human =
||	-74-HP-check_left_light()-0.0
||	-75-HP-check_right_light()-0.0
||	-39-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 69-RP-store_oil()-0.0
decomp i= 0 : dec_handling_lights_start_replace
	end 0
refinement = 
[
	dec_handling_lights_start_replace: [69-RP-store_oil()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 80-RP-store_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-74-HP-check_left_light()-0.0
||	-75-HP-check_right_light()-0.0
||	-39-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 74-HP-check_left_light()-0.0
decomp i= 0 : dec_handling_lights_start_replace
	74-HP-check_left_light()-0.0 => [74-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 75-HP-check_right_light()-0.0
	75-HP-check_right_light()-0.0 => [75-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 39-HA-Closing_hood()
	39-HA-Closing_hood() => [81-HP-go_front_car()-0.0 - 82-HP-close_hood()-0.0] : dec_closing_hood
	81-HP-go_front_car()-0.0 => [81-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[82-HP-close_hood()-0.0]
	end 0
human- Refine agenda with r_beliefs
Task to refine: 74-HP-check_left_light()-0.0
decomp i= 0 : dec_handling_lights_start_replace
	74-HP-check_left_light()-0.0 => [74-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 75-HP-check_right_light()-0.0
	75-HP-check_right_light()-0.0 => [75-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 39-HA-Closing_hood()
	39-HA-Closing_hood() => [83-HP-go_front_car()-0.0 - 84-HP-close_hood()-0.0] : dec_closing_hood
	83-HP-go_front_car()-0.0 => [83-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[84-HP-close_hood()-0.0]
	end 0
[93m82-HP-close_hood()-0.0 not applicable[0m
Operator isn't applicable with only one of the beliefs
NEED of belief alignment!

# UPDATE belief divergences
	oil:None: H=low R=full

Testing with 1 relevant divergence
divergence tested = oil:None: H=low R=full
Task to refine: 74-HP-check_left_light()-0.0
decomp i= 0 : 
	74-HP-check_left_light()-0.0 => [74-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 75-HP-check_right_light()-0.0
	75-HP-check_right_light()-0.0 => [75-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 39-HA-Closing_hood()
	39-HA-Closing_hood() => [85-HP-go_front_car()-0.0 - 86-HP-close_hood()-0.0] : dec_closing_hood
	85-HP-go_front_car()-0.0 => [85-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[86-HP-close_hood()-0.0]
	end 0
	divergence is relevant!
Relevant divergences to correct : 	oil:None: H=low R=full

COM: com action added = 87-RP-COM_ALIGN['oil-full']-3.0
human- Refine agenda
Task to refine: 74-HP-check_left_light()-0.0
decomp i= 0 : dec_handling_lights_start_replace
	74-HP-check_left_light()-0.0 => [74-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 75-HP-check_right_light()-0.0
	75-HP-check_right_light()-0.0 => [75-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 39-HA-Closing_hood()
	39-HA-Closing_hood() => [88-HP-go_front_car()-0.0 - 89-HP-close_hood()-0.0] : dec_closing_hood
	88-HP-go_front_car()-0.0 => [88-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[89-HP-close_hood()-0.0]
	end 0
human- Refine agenda with r_beliefs
Task to refine: 74-HP-check_left_light()-0.0
decomp i= 0 : dec_handling_lights_start_replace
	74-HP-check_left_light()-0.0 => [74-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 75-HP-check_right_light()-0.0
	75-HP-check_right_light()-0.0 => [75-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 39-HA-Closing_hood()
	39-HA-Closing_hood() => [90-HP-go_front_car()-0.0 - 91-HP-close_hood()-0.0] : dec_closing_hood
	90-HP-go_front_car()-0.0 => [90-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[91-HP-close_hood()-0.0]
	end 0
No relevant belief divergence for refinement
refinement = 
[
	dec_handling_lights_start_replace: [89-HP-close_hood()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
Trying to create delaying branch
rel_divs= 	oil:None: H=low R=full

	div not initial!
		testing n= 6.0 Flag.E Type.I#2, (human go_behind_car ()) -6> (robot COM_ALIGN ['oil-full']) prev=#1 next=[]
	div node identified :  6.0 Flag.E Type.I#2, (human go_behind_car ()) -6> (robot COM_ALIGN ['oil-full']) prev=#1 next=[]
	testing action= 64-HP-go_behind_car()-1.0
		R-Agenda in [0-RA-Car_maintenance()]
		H-Agenda in [45-HP-replace_rear_light()-0.0, 41-HA-Checking_front_lights(), 39-HA-Closing_hood()]
before acting
after acting
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = low 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
after other
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = low 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
action.next= [70-RP-refill_washer()-1.0]
	testing action= 70-RP-refill_washer()-1.0
		R-Agenda in [68-RP-refill_oil()-0.0, 69-RP-store_oil()-0.0]
		H-Agenda in [45-HP-replace_rear_light()-0.0, 41-HA-Checking_front_lights(), 39-HA-Closing_hood()]
before acting
after acting
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
after other
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
action.next= [71-HP-replace_rear_light()-1.0]
	testing action= 71-HP-replace_rear_light()-1.0
		R-Agenda in [68-RP-refill_oil()-0.0, 69-RP-store_oil()-0.0]
		H-Agenda in [41-HA-Checking_front_lights(), 39-HA-Closing_hood()]
before acting
after acting
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
after other
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
action.next= [72-RP-refill_oil()-1.0]
	testing action= 72-RP-refill_oil()-1.0
		R-Agenda in [69-RP-store_oil()-0.0]
		H-Agenda in [41-HA-Checking_front_lights(), 39-HA-Closing_hood()]
before acting
after acting
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
after other
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
agendas:
div_action.agent_agendas[CM.g_human_name]= [41-HA-Checking_front_lights(), 39-HA-Closing_hood()]
div_action.agent_agendas[CM.g_robot_name]= [69-RP-store_oil()-0.0]
	div action identified :  72-RP-refill_oil()-1.0
__________________________________________________________________________
| AGENDA robot =
||	-72-RP-refill_oil()-1.0
||	-69-RP-store_oil()-0.0
| AGENDA human =
||	-41-HA-Checking_front_lights()
||	-39-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
	Branching:
BRANCHING current_cost= 6.0
	div_node_bottom created =>  6.0 Flag.E Type.I#4, (robot refill_oil ()) -3> (robot COM_ALIGN ['oil-full']) prev=#2 next=[]
	delay_node created =>  3.0 Flag.E Type.D#5, (robot DELAY []) -1> (robot DELAY []) prev=#2 next=[]
	div_node edited =>  3.0 Flag.F Type.R#2, (human go_behind_car ()) -3> (human replace_rear_light ()) prev=#1 next=[#4 #5]
applied refinement = 
next actions:
	- 92-HP-close_hood()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
refinement = 
[
	dec_handling_lights_start_replace: [DecompType.BOTH_AGENDAS_EMPTY]
]
BOTH_AGENDAS_EMPTY
applied refinement = 
next actions:

=> end explo
node explored = 3.0 Flag.F Type.R#2, (human go_behind_car ()) -3> (human replace_rear_light ()) prev=#1 next=[#4 #5]
new_e_flagged_nodes : 
	3.0 Flag.E Type.D#5, (robot DELAY []) -1> (robot DELAY []) prev=#2 next=[]
	7.0 Flag.E Type.F#4, (robot refill_oil ()) -4> (human close_hood ()) prev=#2 next=[]
e_flagged_nodes :
	1.0 Flag.E Type.I#3, (human go_behind_car ()) -1> (human go_behind_car ()) prev=#1 next=[]
	3.0 Flag.E Type.D#5, (robot DELAY []) -1> (robot DELAY []) prev=#2 next=[]
	7.0 Flag.E Type.F#4, (robot refill_oil ()) -4> (human close_hood ()) prev=#2 next=[]
Ns before check = None
Nf = 7.0 Flag.E Type.F#4, (robot refill_oil ()) -4> (human close_hood ()) prev=#2 next=[]
new Ns!
Ns after check = 7.0 Flag.S Type.F#4, (robot refill_oil ()) -4> (human close_hood ()) prev=#2 next=[]
e_flagged_nodes after check solution:
	1.0 Flag.E Type.I#3, (human go_behind_car ()) -1> (human go_behind_car ()) prev=#1 next=[]
	3.0 Flag.E Type.D#5, (robot DELAY []) -1> (robot DELAY []) prev=#2 next=[]

<@> picked node = 1.0 Flag.E Type.I#3, (human go_behind_car ()) -1> (human go_behind_car ()) prev=#1 next=[]
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-50-HP-replace_rear_light()-0.0
||	-39-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = low 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 0-RA-Car_maintenance()
decomp i= 0 : dec_handling_lights_start_checking
	0-RA-Car_maintenance() => [94-RP-go_front_car()-0.0 - 95-RP-refill_washer()-0.0 - 96-RP-refill_oil()-0.0 - 97-RP-store_oil()-0.0] : dec_car_maintenance_R
	94-RP-go_front_car()-0.0 => [94-RP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[95-RP-refill_washer()-0.0, 96-RP-refill_oil()-0.0, 97-RP-store_oil()-0.0]
	end 0
refinement = 
[
	dec_handling_lights_start_checking: [95-RP-refill_washer()-0.0 - 96-RP-refill_oil()-0.0 - 97-RP-store_oil()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 98-RP-refill_washer()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-96-RP-refill_oil()-0.0
||	-97-RP-store_oil()-0.0
| AGENDA human =
||	-50-HP-replace_rear_light()-0.0
||	-39-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 50-HP-replace_rear_light()-0.0
decomp i= 0 : dec_handling_lights_start_checking
	end 0
human- Refine agenda with r_beliefs
Task to refine: 50-HP-replace_rear_light()-0.0
decomp i= 0 : dec_handling_lights_start_checking
	end 0
No relevant belief divergence for refinement
refinement = 
[
	dec_handling_lights_start_checking: [50-HP-replace_rear_light()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 99-HP-replace_rear_light()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-96-RP-refill_oil()-0.0
||	-97-RP-store_oil()-0.0
| AGENDA human =
||	-39-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 96-RP-refill_oil()-0.0
decomp i= 0 : dec_handling_lights_start_checking
	end 0
refinement = 
[
	dec_handling_lights_start_checking: [96-RP-refill_oil()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 100-RP-refill_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-97-RP-store_oil()-0.0
| AGENDA human =
||	-39-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 39-HA-Closing_hood()
decomp i= 0 : dec_handling_lights_start_checking
	39-HA-Closing_hood() => [101-HP-go_front_car()-0.0 - 102-HP-close_hood()-0.0] : dec_closing_hood
	end 0
human- Refine agenda with r_beliefs
Task to refine: 39-HA-Closing_hood()
decomp i= 0 : dec_handling_lights_start_checking
	39-HA-Closing_hood() => [103-HP-go_front_car()-0.0 - 104-HP-close_hood()-0.0] : dec_closing_hood
	end 0
No relevant belief divergence for refinement
refinement = 
[
	dec_handling_lights_start_checking: [101-HP-go_front_car()-0.0 - 102-HP-close_hood()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
SA: human assessed washer <- full
applied refinement = 
next actions:
	- 105-HP-go_front_car()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-97-RP-store_oil()-0.0
| AGENDA human =
||	-102-HP-close_hood()-0.0
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 97-RP-store_oil()-0.0
decomp i= 0 : dec_handling_lights_start_checking
	end 0
refinement = 
[
	dec_handling_lights_start_checking: [97-RP-store_oil()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 106-RP-store_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-102-HP-close_hood()-0.0
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 102-HP-close_hood()-0.0
decomp i= 0 : dec_handling_lights_start_checking
	end 0
human- Refine agenda with r_beliefs
Task to refine: 102-HP-close_hood()-0.0
decomp i= 0 : dec_handling_lights_start_checking
	end 0
[93m102-HP-close_hood()-0.0 not applicable[0m
Operator isn't applicable with only one of the beliefs
NEED of belief alignment!

# UPDATE belief divergences
	oil:None: H=low R=full

Testing with 1 relevant divergence
divergence tested = oil:None: H=low R=full
Task to refine: 102-HP-close_hood()-0.0
decomp i= 0 : 
	end 0
	divergence is relevant!
Relevant divergences to correct : 	oil:None: H=low R=full

COM: com action added = 107-RP-COM_ALIGN['oil-full']-3.0
human- Refine agenda
Task to refine: 102-HP-close_hood()-0.0
decomp i= 0 : dec_handling_lights_start_checking
	end 0
human- Refine agenda with r_beliefs
Task to refine: 102-HP-close_hood()-0.0
decomp i= 0 : dec_handling_lights_start_checking
	end 0
No relevant belief divergence for refinement
refinement = 
[
	dec_handling_lights_start_checking: [102-HP-close_hood()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
Trying to create delaying branch
rel_divs= 	oil:None: H=low R=full

	div not initial!
		testing n= 6.0 Flag.E Type.I#3, (human go_behind_car ()) -6> (robot COM_ALIGN ['oil-full']) prev=#1 next=[]
	div node identified :  6.0 Flag.E Type.I#3, (human go_behind_car ()) -6> (robot COM_ALIGN ['oil-full']) prev=#1 next=[]
	testing action= 65-HP-go_behind_car()-1.0
		R-Agenda in [0-RA-Car_maintenance()]
		H-Agenda in [50-HP-replace_rear_light()-0.0, 39-HA-Closing_hood()]
before acting
after acting
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = low 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
after other
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = low 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
action.next= [98-RP-refill_washer()-1.0]
	testing action= 98-RP-refill_washer()-1.0
		R-Agenda in [96-RP-refill_oil()-0.0, 97-RP-store_oil()-0.0]
		H-Agenda in [50-HP-replace_rear_light()-0.0, 39-HA-Closing_hood()]
before acting
after acting
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
after other
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
action.next= [99-HP-replace_rear_light()-1.0]
	testing action= 99-HP-replace_rear_light()-1.0
		R-Agenda in [96-RP-refill_oil()-0.0, 97-RP-store_oil()-0.0]
		H-Agenda in [39-HA-Closing_hood()]
before acting
after acting
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
after other
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
action.next= [100-RP-refill_oil()-1.0]
	testing action= 100-RP-refill_oil()-1.0
		R-Agenda in [97-RP-store_oil()-0.0]
		H-Agenda in [39-HA-Closing_hood()]
before acting
after acting
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
after other
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
agendas:
div_action.agent_agendas[CM.g_human_name]= [39-HA-Closing_hood()]
div_action.agent_agendas[CM.g_robot_name]= [97-RP-store_oil()-0.0]
	div action identified :  100-RP-refill_oil()-1.0
__________________________________________________________________________
| AGENDA robot =
||	-100-RP-refill_oil()-1.0
||	-97-RP-store_oil()-0.0
| AGENDA human =
||	-39-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
	Branching:
BRANCHING current_cost= 6.0
	div_node_bottom created =>  6.0 Flag.E Type.I#6, (robot refill_oil ()) -3> (robot COM_ALIGN ['oil-full']) prev=#3 next=[]
	delay_node created =>  3.0 Flag.E Type.D#7, (robot DELAY []) -1> (robot DELAY []) prev=#3 next=[]
	div_node edited =>  3.0 Flag.F Type.R#3, (human go_behind_car ()) -3> (human replace_rear_light ()) prev=#1 next=[#6 #7]
applied refinement = 
next actions:
	- 108-HP-close_hood()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
refinement = 
[
	dec_handling_lights_start_checking: [DecompType.BOTH_AGENDAS_EMPTY]
]
BOTH_AGENDAS_EMPTY
applied refinement = 
next actions:

=> end explo
node explored = 3.0 Flag.F Type.R#3, (human go_behind_car ()) -3> (human replace_rear_light ()) prev=#1 next=[#6 #7]
new_e_flagged_nodes : 
	3.0 Flag.E Type.D#7, (robot DELAY []) -1> (robot DELAY []) prev=#3 next=[]
	7.0 Flag.E Type.F#6, (robot refill_oil ()) -4> (human close_hood ()) prev=#3 next=[]
e_flagged_nodes :
	3.0 Flag.E Type.D#5, (robot DELAY []) -1> (robot DELAY []) prev=#2 next=[]
	3.0 Flag.E Type.D#7, (robot DELAY []) -1> (robot DELAY []) prev=#3 next=[]
	7.0 Flag.E Type.F#6, (robot refill_oil ()) -4> (human close_hood ()) prev=#3 next=[]
Ns before check = 7.0 Flag.S Type.F#4, (robot refill_oil ()) -4> (human close_hood ()) prev=#2 next=[]
Nf = 7.0 Flag.E Type.F#6, (robot refill_oil ()) -4> (human close_hood ()) prev=#3 next=[]
Ns after check = 7.0 Flag.S Type.F#4, (robot refill_oil ()) -4> (human close_hood ()) prev=#2 next=[]
e_flagged_nodes after check solution:
	3.0 Flag.E Type.D#5, (robot DELAY []) -1> (robot DELAY []) prev=#2 next=[]
	3.0 Flag.E Type.D#7, (robot DELAY []) -1> (robot DELAY []) prev=#3 next=[]

<@> picked node = 3.0 Flag.E Type.D#5, (robot DELAY []) -1> (robot DELAY []) prev=#2 next=[]
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-72-RP-refill_oil()-1.0
||	-69-RP-store_oil()-0.0
| AGENDA human =
||	-41-HA-Checking_front_lights()
||	-39-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 41-HA-Checking_front_lights()
decomp i= 0 : delaying
	41-HA-Checking_front_lights() => [110-HP-go_front_car()-0.0 - 111-HP-check_left_light()-0.0 - 112-HP-check_right_light()-0.0] : dec_checking_front_ligths
	end 0
human- Refine agenda with r_beliefs
Task to refine: 41-HA-Checking_front_lights()
decomp i= 0 : delaying
	41-HA-Checking_front_lights() => [113-HP-go_front_car()-0.0 - 114-HP-check_left_light()-0.0 - 115-HP-check_right_light()-0.0] : dec_checking_front_ligths
	end 0
No relevant belief divergence for refinement
refinement = 
[
	delaying: [110-HP-go_front_car()-0.0 - 111-HP-check_left_light()-0.0 - 112-HP-check_right_light()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
SA: human assessed washer <- full
applied refinement = 
next actions:
	- 116-HP-go_front_car()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-72-RP-refill_oil()-1.0
||	-69-RP-store_oil()-0.0
| AGENDA human =
||	-111-HP-check_left_light()-0.0
||	-112-HP-check_right_light()-0.0
||	-39-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 72-RP-refill_oil()-1.0
decomp i= 0 : delaying
	end 0
refinement = 
[
	delaying: [72-RP-refill_oil()-1.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 117-RP-refill_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-69-RP-store_oil()-0.0
| AGENDA human =
||	-111-HP-check_left_light()-0.0
||	-112-HP-check_right_light()-0.0
||	-39-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 111-HP-check_left_light()-0.0
decomp i= 0 : delaying
	111-HP-check_left_light()-0.0 => [111-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 112-HP-check_right_light()-0.0
	112-HP-check_right_light()-0.0 => [112-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 39-HA-Closing_hood()
	39-HA-Closing_hood() => [118-HP-go_front_car()-0.0 - 119-HP-close_hood()-0.0] : dec_closing_hood
	118-HP-go_front_car()-0.0 => [118-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[119-HP-close_hood()-0.0]
	end 0
human- Refine agenda with r_beliefs
Task to refine: 111-HP-check_left_light()-0.0
decomp i= 0 : delaying
	111-HP-check_left_light()-0.0 => [111-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 112-HP-check_right_light()-0.0
	112-HP-check_right_light()-0.0 => [112-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 39-HA-Closing_hood()
	39-HA-Closing_hood() => [120-HP-go_front_car()-0.0 - 121-HP-close_hood()-0.0] : dec_closing_hood
	120-HP-go_front_car()-0.0 => [120-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[121-HP-close_hood()-0.0]
	end 0
No relevant belief divergence for refinement
refinement = 
[
	delaying: [119-HP-close_hood()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 122-HP-close_hood()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-69-RP-store_oil()-0.0
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 69-RP-store_oil()-0.0
decomp i= 0 : delaying
	end 0
refinement = 
[
	delaying: [69-RP-store_oil()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 123-RP-store_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
human- Refine agenda with r_beliefs
No relevant belief divergence for refinement
refinement = 
[
	delaying: [DecompType.BOTH_AGENDAS_EMPTY]
]
BOTH_AGENDAS_EMPTY
applied refinement = 
next actions:

=> end explo
node explored = 7.0 Flag.E Type.F#5, (robot DELAY []) -5> (robot store_oil ()) prev=#2 next=[]
new_e_flagged_nodes : 
	7.0 Flag.E Type.F#5, (robot DELAY []) -5> (robot store_oil ()) prev=#2 next=[]
e_flagged_nodes :
	3.0 Flag.E Type.D#7, (robot DELAY []) -1> (robot DELAY []) prev=#3 next=[]
	7.0 Flag.E Type.F#5, (robot DELAY []) -5> (robot store_oil ()) prev=#2 next=[]
Ns before check = 7.0 Flag.S Type.F#4, (robot refill_oil ()) -4> (human close_hood ()) prev=#2 next=[]
Nf = 7.0 Flag.E Type.F#5, (robot DELAY []) -5> (robot store_oil ()) prev=#2 next=[]
Ns after check = 7.0 Flag.S Type.F#4, (robot refill_oil ()) -4> (human close_hood ()) prev=#2 next=[]
e_flagged_nodes after check solution:
	3.0 Flag.E Type.D#7, (robot DELAY []) -1> (robot DELAY []) prev=#3 next=[]

<@> picked node = 3.0 Flag.E Type.D#7, (robot DELAY []) -1> (robot DELAY []) prev=#3 next=[]
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-100-RP-refill_oil()-1.0
||	-97-RP-store_oil()-0.0
| AGENDA human =
||	-39-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 39-HA-Closing_hood()
decomp i= 0 : delaying
	39-HA-Closing_hood() => [124-HP-go_front_car()-0.0 - 125-HP-close_hood()-0.0] : dec_closing_hood
	end 0
human- Refine agenda with r_beliefs
Task to refine: 39-HA-Closing_hood()
decomp i= 0 : delaying
	39-HA-Closing_hood() => [126-HP-go_front_car()-0.0 - 127-HP-close_hood()-0.0] : dec_closing_hood
	end 0
No relevant belief divergence for refinement
refinement = 
[
	delaying: [124-HP-go_front_car()-0.0 - 125-HP-close_hood()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
SA: human assessed washer <- full
applied refinement = 
next actions:
	- 128-HP-go_front_car()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-100-RP-refill_oil()-1.0
||	-97-RP-store_oil()-0.0
| AGENDA human =
||	-125-HP-close_hood()-0.0
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 100-RP-refill_oil()-1.0
decomp i= 0 : delaying
	end 0
refinement = 
[
	delaying: [100-RP-refill_oil()-1.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 129-RP-refill_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-97-RP-store_oil()-0.0
| AGENDA human =
||	-125-HP-close_hood()-0.0
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 125-HP-close_hood()-0.0
decomp i= 0 : delaying
	end 0
human- Refine agenda with r_beliefs
Task to refine: 125-HP-close_hood()-0.0
decomp i= 0 : delaying
	end 0
No relevant belief divergence for refinement
refinement = 
[
	delaying: [125-HP-close_hood()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 130-HP-close_hood()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-97-RP-store_oil()-0.0
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 97-RP-store_oil()-0.0
decomp i= 0 : delaying
	end 0
refinement = 
[
	delaying: [97-RP-store_oil()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 131-RP-store_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
human- Refine agenda with r_beliefs
No relevant belief divergence for refinement
refinement = 
[
	delaying: [DecompType.BOTH_AGENDAS_EMPTY]
]
BOTH_AGENDAS_EMPTY
applied refinement = 
next actions:

=> end explo
node explored = 7.0 Flag.E Type.F#7, (robot DELAY []) -5> (robot store_oil ()) prev=#3 next=[]
new_e_flagged_nodes : 
	7.0 Flag.E Type.F#7, (robot DELAY []) -5> (robot store_oil ()) prev=#3 next=[]
e_flagged_nodes :
	7.0 Flag.E Type.F#7, (robot DELAY []) -5> (robot store_oil ()) prev=#3 next=[]
Ns before check = 7.0 Flag.S Type.F#4, (robot refill_oil ()) -4> (human close_hood ()) prev=#2 next=[]
Nf = 7.0 Flag.E Type.F#7, (robot DELAY []) -5> (robot store_oil ()) prev=#3 next=[]
Ns after check = 7.0 Flag.S Type.F#4, (robot refill_oil ()) -4> (human close_hood ()) prev=#2 next=[]
e_flagged_nodes after check solution:
	=> time spent first exploration = 176ms
Start refining u nodes
	=> time spent refining = 0ms
Total duration = 176ms
Non relevant div:
False
Plans:
37-RP-COM_ALIGN['rear_light-old']-3.0 64-HP-go_behind_car()-1.0 70-RP-refill_washer()-1.0 71-HP-replace_rear_light()-1.0 72-RP-refill_oil()-1.0 79-HP-go_front_car()-1.0 80-RP-store_oil()-1.0 87-RP-COM_ALIGN['oil-full']-3.0 92-HP-close_hood()-1.0/37-RP-COM_ALIGN['rear_light-old']-3.0 64-HP-go_behind_car()-1.0 70-RP-refill_washer()-1.0 71-HP-replace_rear_light()-1.0 93-RP-DELAY[]-0.0 116-HP-go_front_car()-1.0 117-RP-refill_oil()-1.0 122-HP-close_hood()-1.0 123-RP-store_oil()-1.0/37-RP-COM_ALIGN['rear_light-old']-3.0 65-HP-go_behind_car()-1.0 98-RP-refill_washer()-1.0 99-HP-replace_rear_light()-1.0 100-RP-refill_oil()-1.0 105-HP-go_front_car()-1.0 106-RP-store_oil()-1.0 107-RP-COM_ALIGN['oil-full']-3.0 108-HP-close_hood()-1.0/37-RP-COM_ALIGN['rear_light-old']-3.0 65-HP-go_behind_car()-1.0 98-RP-refill_washer()-1.0 99-HP-replace_rear_light()-1.0 109-RP-DELAY[]-0.0 128-HP-go_front_car()-1.0 129-RP-refill_oil()-1.0 130-HP-close_hood()-1.0 131-RP-store_oil()-1.0
best_traces:
[123-RP-store_oil()-1.0, 131-RP-store_oil()-1.0]
best_metrics:
(1.0, 0.0, 8.0, 1.0)
