RUN N=55 With=True
INITIAL STATES
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
|| robot_init.at_robot = front 	ObsType.OBS 	loc=front
|| robot_init.at_human = front 	ObsType.OBS 	loc=front
|| robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
|| robot_init.washer = low 	ObsType.OBS 	loc=front
|| robot_init.oil = low 	ObsType.INF 	loc=front
|| robot_init.hood = open 	ObsType.OBS 	loc=front
|| robot_init.rear_light = old 	ObsType.INF 	loc=rear
|| robot_init.left_light = ok 	ObsType.INF 	loc=front
|| robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
|| human_init.at_robot = front
|| human_init.at_human = front
|| human_init.at_oil_bottle = front
|| human_init.washer = low
|| human_init.oil = full
|| human_init.hood = open
|| human_init.rear_light = new
|| human_init.left_light = ok
|| human_init.right_light = ok
|________________________________________________________________________
Start first exploration
first node = 0.0 Flag.E Type.I#1, (robot BEGIN []) -1> (robot BEGIN []) prev=None next=[]

<@> picked node = 0.0 Flag.E Type.I#1, (robot BEGIN []) -1> (robot BEGIN []) prev=None next=[]
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = low 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [3-HA-Handling_lights() - 4-HA-Closing_hood()] : dec_car_maintenance_H
	3-HA-Handling_lights() => [5-HA-Checking_front_lights()] : dec_handling_lights_start_replace
	5-HA-Checking_front_lights() => [6-HP-go_front_car()-0.0 - 7-HP-check_left_light()-0.0 - 8-HP-check_right_light()-0.0] : dec_checking_front_ligths
	6-HP-go_front_car()-0.0 => [6-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[7-HP-check_left_light()-0.0, 8-HP-check_right_light()-0.0, 4-HA-Closing_hood()]
	7-HP-check_left_light()-0.0 => [7-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[8-HP-check_right_light()-0.0, 4-HA-Closing_hood()]
	8-HP-check_right_light()-0.0 => [8-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[4-HA-Closing_hood()]
	4-HA-Closing_hood() => [9-HP-go_front_car()-0.0 - 10-HP-close_hood()-0.0] : dec_closing_hood
	9-HP-go_front_car()-0.0 => [9-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[10-HP-close_hood()-0.0]
	end 0
human- Refine agenda with r_beliefs
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [11-HA-Handling_lights() - 12-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 11-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	11-HA-Handling_lights() => [13-HA-Replacing_rear_light() - 14-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [15-HA-Checking_front_lights(), 16-HA-Replacing_rear_light(), 12-HA-Closing_hood()]
	13-HA-Replacing_rear_light() => [17-HP-go_behind_car()-0.0 - 18-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	15-HA-Checking_front_lights() => [19-HP-go_front_car()-0.0 - 20-HP-check_left_light()-0.0 - 21-HP-check_right_light()-0.0] : dec_checking_front_ligths
	19-HP-go_front_car()-0.0 => [19-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[20-HP-check_left_light()-0.0, 21-HP-check_right_light()-0.0, 16-HA-Replacing_rear_light(), 12-HA-Closing_hood()]
	20-HP-check_left_light()-0.0 => [20-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[21-HP-check_right_light()-0.0, 16-HA-Replacing_rear_light(), 12-HA-Closing_hood()]
	21-HP-check_right_light()-0.0 => [21-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[16-HA-Replacing_rear_light(), 12-HA-Closing_hood()]
	16-HA-Replacing_rear_light() => [22-HP-go_behind_car()-0.0 - 23-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 1
Different number of decomposition
NEED of belief alignment!

# UPDATE belief divergences
	oil:None: H=full R=low
	rear_light:None: H=new R=old

Testing with 1 relevant divergence
divergence tested = oil:None: H=full R=low
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : 
	1-HA-Car_maintenance() => [24-HA-Handling_lights() - 25-HA-Closing_hood()] : dec_car_maintenance_H
	24-HA-Handling_lights() => [26-HA-Checking_front_lights()] : dec_handling_lights_start_replace
	26-HA-Checking_front_lights() => [27-HP-go_front_car()-0.0 - 28-HP-check_left_light()-0.0 - 29-HP-check_right_light()-0.0] : dec_checking_front_ligths
	27-HP-go_front_car()-0.0 => [27-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[28-HP-check_left_light()-0.0, 29-HP-check_right_light()-0.0, 25-HA-Closing_hood()]
	28-HP-check_left_light()-0.0 => [28-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[29-HP-check_right_light()-0.0, 25-HA-Closing_hood()]
	29-HP-check_right_light()-0.0 => [29-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[25-HA-Closing_hood()]
	25-HA-Closing_hood() => [30-HP-go_front_car()-0.0 - 31-HP-close_hood()-0.0] : dec_closing_hood
	30-HP-go_front_car()-0.0 => [30-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[31-HP-close_hood()-0.0]
	end 0
Different number of decomposition
	divergence isn't relevant
divergence tested = rear_light:None: H=new R=old
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : 
	1-HA-Car_maintenance() => [32-HA-Handling_lights() - 33-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 32-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	32-HA-Handling_lights() => [34-HA-Replacing_rear_light() - 35-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [36-HA-Checking_front_lights(), 37-HA-Replacing_rear_light(), 33-HA-Closing_hood()]
	34-HA-Replacing_rear_light() => [38-HP-go_behind_car()-0.0 - 39-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	36-HA-Checking_front_lights() => [40-HP-go_front_car()-0.0 - 41-HP-check_left_light()-0.0 - 42-HP-check_right_light()-0.0] : dec_checking_front_ligths
	40-HP-go_front_car()-0.0 => [40-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[41-HP-check_left_light()-0.0, 42-HP-check_right_light()-0.0, 37-HA-Replacing_rear_light(), 33-HA-Closing_hood()]
	41-HP-check_left_light()-0.0 => [41-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[42-HP-check_right_light()-0.0, 37-HA-Replacing_rear_light(), 33-HA-Closing_hood()]
	42-HP-check_right_light()-0.0 => [42-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[37-HA-Replacing_rear_light(), 33-HA-Closing_hood()]
	37-HA-Replacing_rear_light() => [43-HP-go_behind_car()-0.0 - 44-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 1
	divergence is relevant!
Relevant divergences to correct : 	rear_light:None: H=new R=old

COM: com action added = 45-RP-COM_ALIGN['rear_light-old']-3.0
human- Refine agenda
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [46-HA-Handling_lights() - 47-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 46-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	46-HA-Handling_lights() => [48-HA-Replacing_rear_light() - 49-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [50-HA-Checking_front_lights(), 51-HA-Replacing_rear_light(), 47-HA-Closing_hood()]
	48-HA-Replacing_rear_light() => [52-HP-go_behind_car()-0.0 - 53-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	50-HA-Checking_front_lights() => [54-HP-go_front_car()-0.0 - 55-HP-check_left_light()-0.0 - 56-HP-check_right_light()-0.0] : dec_checking_front_ligths
	54-HP-go_front_car()-0.0 => [54-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[55-HP-check_left_light()-0.0, 56-HP-check_right_light()-0.0, 51-HA-Replacing_rear_light(), 47-HA-Closing_hood()]
	55-HP-check_left_light()-0.0 => [55-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[56-HP-check_right_light()-0.0, 51-HA-Replacing_rear_light(), 47-HA-Closing_hood()]
	56-HP-check_right_light()-0.0 => [56-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[51-HA-Replacing_rear_light(), 47-HA-Closing_hood()]
	51-HA-Replacing_rear_light() => [57-HP-go_behind_car()-0.0 - 58-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 1
human- Refine agenda with r_beliefs
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [59-HA-Handling_lights() - 60-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 59-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	59-HA-Handling_lights() => [61-HA-Replacing_rear_light() - 62-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [63-HA-Checking_front_lights(), 64-HA-Replacing_rear_light(), 60-HA-Closing_hood()]
	61-HA-Replacing_rear_light() => [65-HP-go_behind_car()-0.0 - 66-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	63-HA-Checking_front_lights() => [67-HP-go_front_car()-0.0 - 68-HP-check_left_light()-0.0 - 69-HP-check_right_light()-0.0] : dec_checking_front_ligths
	67-HP-go_front_car()-0.0 => [67-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[68-HP-check_left_light()-0.0, 69-HP-check_right_light()-0.0, 64-HA-Replacing_rear_light(), 60-HA-Closing_hood()]
	68-HP-check_left_light()-0.0 => [68-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[69-HP-check_right_light()-0.0, 64-HA-Replacing_rear_light(), 60-HA-Closing_hood()]
	69-HP-check_right_light()-0.0 => [69-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[64-HA-Replacing_rear_light(), 60-HA-Closing_hood()]
	64-HA-Replacing_rear_light() => [70-HP-go_behind_car()-0.0 - 71-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 1
No relevant belief divergence for refinement
refinement = 
[
	dec_handling_lights_start_replace: [52-HP-go_behind_car()-0.0 - 53-HP-replace_rear_light()-0.0 - 49-HA-Checking_front_lights() - 47-HA-Closing_hood()]
	dec_handling_lights_start_checking: [57-HP-go_behind_car()-0.0 - 58-HP-replace_rear_light()-0.0 - 47-HA-Closing_hood()]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
Trying to create delaying branch
rel_divs= 	rear_light:None: H=new R=old

	initial div ..
applied refinement = 
next actions:
	- 72-HP-go_behind_car()-1.0
	- 73-HP-go_behind_car()-1.0

=> end explo
node explored = 0.0 Flag.F Type.H#1, (robot BEGIN []) -1> (robot COM_ALIGN ['rear_light-old']) prev=None next=[#2 #3]
new_e_flagged_nodes : 
	1.0 Flag.E Type.I#2, (human go_behind_car ()) -1> (human go_behind_car ()) prev=#1 next=[]
	1.0 Flag.E Type.I#3, (human go_behind_car ()) -1> (human go_behind_car ()) prev=#1 next=[]
e_flagged_nodes :
	1.0 Flag.E Type.I#2, (human go_behind_car ()) -1> (human go_behind_car ()) prev=#1 next=[]
	1.0 Flag.E Type.I#3, (human go_behind_car ()) -1> (human go_behind_car ()) prev=#1 next=[]
Ns before check = None
Nf = None
Ns after check = None
e_flagged_nodes after check solution:
	1.0 Flag.E Type.I#2, (human go_behind_car ()) -1> (human go_behind_car ()) prev=#1 next=[]
	1.0 Flag.E Type.I#3, (human go_behind_car ()) -1> (human go_behind_car ()) prev=#1 next=[]

<@> picked node = 1.0 Flag.E Type.I#2, (human go_behind_car ()) -1> (human go_behind_car ()) prev=#1 next=[]
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-53-HP-replace_rear_light()-0.0
||	-49-HA-Checking_front_lights()
||	-47-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = low 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 0-RA-Car_maintenance()
decomp i= 0 : dec_handling_lights_start_replace
	0-RA-Car_maintenance() => [74-RP-go_front_car()-0.0 - 75-RP-refill_washer()-0.0 - 76-RP-refill_oil()-0.0 - 77-RP-store_oil()-0.0] : dec_car_maintenance_R
	74-RP-go_front_car()-0.0 => [74-RP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[75-RP-refill_washer()-0.0, 76-RP-refill_oil()-0.0, 77-RP-store_oil()-0.0]
	end 0
refinement = 
[
	dec_handling_lights_start_replace: [75-RP-refill_washer()-0.0 - 76-RP-refill_oil()-0.0 - 77-RP-store_oil()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 78-RP-refill_washer()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-76-RP-refill_oil()-0.0
||	-77-RP-store_oil()-0.0
| AGENDA human =
||	-53-HP-replace_rear_light()-0.0
||	-49-HA-Checking_front_lights()
||	-47-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 53-HP-replace_rear_light()-0.0
decomp i= 0 : dec_handling_lights_start_replace
	end 0
human- Refine agenda with r_beliefs
Task to refine: 53-HP-replace_rear_light()-0.0
decomp i= 0 : dec_handling_lights_start_replace
	end 0
No relevant belief divergence for refinement
refinement = 
[
	dec_handling_lights_start_replace: [53-HP-replace_rear_light()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 79-HP-replace_rear_light()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-76-RP-refill_oil()-0.0
||	-77-RP-store_oil()-0.0
| AGENDA human =
||	-49-HA-Checking_front_lights()
||	-47-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 76-RP-refill_oil()-0.0
decomp i= 0 : dec_handling_lights_start_replace
	end 0
refinement = 
[
	dec_handling_lights_start_replace: [76-RP-refill_oil()-0.0]
]
Decomp OK
[93malready done[0m
[93m76-RP-refill_oil()-0.0 not applicable[0m
Operator isn't applicable with only one of the beliefs

# UPDATE belief divergences
	washer:None: H=low R=full
	oil:None: H=full R=low

Testing with 1 relevant divergence
divergence tested = washer:None: H=low R=full
Task to refine: 49-HA-Checking_front_lights()
decomp i= 0 : 
	49-HA-Checking_front_lights() => [80-HP-go_front_car()-0.0 - 81-HP-check_left_light()-0.0 - 82-HP-check_right_light()-0.0] : dec_checking_front_ligths
	end 0
[93malready done[0m
[93m76-RP-refill_oil()-0.0 not applicable[0m
Operator isn't applicable with only one of the beliefs
	divergence isn't relevant
divergence tested = oil:None: H=full R=low
Task to refine: 49-HA-Checking_front_lights()
decomp i= 0 : 
	49-HA-Checking_front_lights() => [83-HP-go_front_car()-0.0 - 84-HP-check_left_light()-0.0 - 85-HP-check_right_light()-0.0] : dec_checking_front_ligths
	end 0
	divergence is relevant!
Relevant divergences to correct : 	oil:None: H=full R=low

COM: com action added eff = 86-RP-COM_ALIGN['oil-low']-3.0
robot- Refine agenda
Task to refine: 76-RP-refill_oil()-0.0
decomp i= 0 : dec_handling_lights_start_replace
	end 0
refinement = 
[
	dec_handling_lights_start_replace: [76-RP-refill_oil()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
Trying to create delaying branch
rel_divs= 	oil:None: H=full R=low

	initial div ..
applied refinement = 
next actions:
	- 87-RP-refill_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-77-RP-store_oil()-0.0
| AGENDA human =
||	-49-HA-Checking_front_lights()
||	-47-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 49-HA-Checking_front_lights()
decomp i= 0 : dec_handling_lights_start_replace
	49-HA-Checking_front_lights() => [88-HP-go_front_car()-0.0 - 89-HP-check_left_light()-0.0 - 90-HP-check_right_light()-0.0] : dec_checking_front_ligths
	end 0
human- Refine agenda with r_beliefs
Task to refine: 49-HA-Checking_front_lights()
decomp i= 0 : dec_handling_lights_start_replace
	49-HA-Checking_front_lights() => [91-HP-go_front_car()-0.0 - 92-HP-check_left_light()-0.0 - 93-HP-check_right_light()-0.0] : dec_checking_front_ligths
	end 0
No relevant belief divergence for refinement
refinement = 
[
	dec_handling_lights_start_replace: [88-HP-go_front_car()-0.0 - 89-HP-check_left_light()-0.0 - 90-HP-check_right_light()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
SA: human assessed washer <- full
applied refinement = 
next actions:
	- 94-HP-go_front_car()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-77-RP-store_oil()-0.0
| AGENDA human =
||	-89-HP-check_left_light()-0.0
||	-90-HP-check_right_light()-0.0
||	-47-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 77-RP-store_oil()-0.0
decomp i= 0 : dec_handling_lights_start_replace
	end 0
refinement = 
[
	dec_handling_lights_start_replace: [77-RP-store_oil()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 95-RP-store_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-89-HP-check_left_light()-0.0
||	-90-HP-check_right_light()-0.0
||	-47-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 89-HP-check_left_light()-0.0
decomp i= 0 : dec_handling_lights_start_replace
	89-HP-check_left_light()-0.0 => [89-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 90-HP-check_right_light()-0.0
	90-HP-check_right_light()-0.0 => [90-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 47-HA-Closing_hood()
	47-HA-Closing_hood() => [96-HP-go_front_car()-0.0 - 97-HP-close_hood()-0.0] : dec_closing_hood
	96-HP-go_front_car()-0.0 => [96-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[97-HP-close_hood()-0.0]
	end 0
human- Refine agenda with r_beliefs
Task to refine: 89-HP-check_left_light()-0.0
decomp i= 0 : dec_handling_lights_start_replace
	89-HP-check_left_light()-0.0 => [89-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 90-HP-check_right_light()-0.0
	90-HP-check_right_light()-0.0 => [90-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 47-HA-Closing_hood()
	47-HA-Closing_hood() => [98-HP-go_front_car()-0.0 - 99-HP-close_hood()-0.0] : dec_closing_hood
	98-HP-go_front_car()-0.0 => [98-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[99-HP-close_hood()-0.0]
	end 0
[93m97-HP-close_hood()-0.0 not applicable[0m
Operator isn't applicable with only one of the beliefs
NEED of belief alignment!

# UPDATE belief divergences
	oil:None: H=low R=full

Testing with 1 relevant divergence
divergence tested = oil:None: H=low R=full
Task to refine: 89-HP-check_left_light()-0.0
decomp i= 0 : 
	89-HP-check_left_light()-0.0 => [89-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 90-HP-check_right_light()-0.0
	90-HP-check_right_light()-0.0 => [90-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 47-HA-Closing_hood()
	47-HA-Closing_hood() => [100-HP-go_front_car()-0.0 - 101-HP-close_hood()-0.0] : dec_closing_hood
	100-HP-go_front_car()-0.0 => [100-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[101-HP-close_hood()-0.0]
	end 0
	divergence is relevant!
Relevant divergences to correct : 	oil:None: H=low R=full

COM: com action added = 102-RP-COM_ALIGN['oil-full']-3.0
human- Refine agenda
Task to refine: 89-HP-check_left_light()-0.0
decomp i= 0 : dec_handling_lights_start_replace
	89-HP-check_left_light()-0.0 => [89-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 90-HP-check_right_light()-0.0
	90-HP-check_right_light()-0.0 => [90-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 47-HA-Closing_hood()
	47-HA-Closing_hood() => [103-HP-go_front_car()-0.0 - 104-HP-close_hood()-0.0] : dec_closing_hood
	103-HP-go_front_car()-0.0 => [103-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[104-HP-close_hood()-0.0]
	end 0
human- Refine agenda with r_beliefs
Task to refine: 89-HP-check_left_light()-0.0
decomp i= 0 : dec_handling_lights_start_replace
	89-HP-check_left_light()-0.0 => [89-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 90-HP-check_right_light()-0.0
	90-HP-check_right_light()-0.0 => [90-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 47-HA-Closing_hood()
	47-HA-Closing_hood() => [105-HP-go_front_car()-0.0 - 106-HP-close_hood()-0.0] : dec_closing_hood
	105-HP-go_front_car()-0.0 => [105-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[106-HP-close_hood()-0.0]
	end 0
No relevant belief divergence for refinement
refinement = 
[
	dec_handling_lights_start_replace: [104-HP-close_hood()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
Trying to create delaying branch
rel_divs= 	oil:None: H=low R=full

	div not initial!
		testing n= 6.0 Flag.E Type.I#2, (human go_behind_car ()) -6> (robot COM_ALIGN ['oil-full']) prev=#1 next=[]
	div node identified :  6.0 Flag.E Type.I#2, (human go_behind_car ()) -6> (robot COM_ALIGN ['oil-full']) prev=#1 next=[]
	testing action= 72-HP-go_behind_car()-1.0
		R-Agenda in [0-RA-Car_maintenance()]
		H-Agenda in [53-HP-replace_rear_light()-0.0, 49-HA-Checking_front_lights(), 47-HA-Closing_hood()]
before acting
after acting
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = low 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
after other
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = low 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
action.next= [78-RP-refill_washer()-1.0]
	testing action= 78-RP-refill_washer()-1.0
		R-Agenda in [76-RP-refill_oil()-0.0, 77-RP-store_oil()-0.0]
		H-Agenda in [53-HP-replace_rear_light()-0.0, 49-HA-Checking_front_lights(), 47-HA-Closing_hood()]
before acting
after acting
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
after other
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
action.next= [79-HP-replace_rear_light()-1.0]
	testing action= 79-HP-replace_rear_light()-1.0
		R-Agenda in [76-RP-refill_oil()-0.0, 77-RP-store_oil()-0.0]
		H-Agenda in [49-HA-Checking_front_lights(), 47-HA-Closing_hood()]
before acting
after acting
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
after other
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
action.next= [86-RP-COM_ALIGN['oil-low']-3.0]
	testing action= 86-RP-COM_ALIGN['oil-low']-3.0
		R-Agenda in []
		H-Agenda in []
	testing action= 87-RP-refill_oil()-1.0
		R-Agenda in [77-RP-store_oil()-0.0]
		H-Agenda in [49-HA-Checking_front_lights(), 47-HA-Closing_hood()]
before acting
after acting
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
after other
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
agendas:
div_action.agent_agendas[CM.g_human_name]= [49-HA-Checking_front_lights(), 47-HA-Closing_hood()]
div_action.agent_agendas[CM.g_robot_name]= [77-RP-store_oil()-0.0]
	div action identified :  87-RP-refill_oil()-1.0
__________________________________________________________________________
| AGENDA robot =
||	-87-RP-refill_oil()-1.0
||	-77-RP-store_oil()-0.0
| AGENDA human =
||	-49-HA-Checking_front_lights()
||	-47-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
	Branching:
BRANCHING current_cost= 6.0
	div_node_bottom created =>  6.0 Flag.E Type.I#4, (robot refill_oil ()) -3> (robot COM_ALIGN ['oil-full']) prev=#2 next=[]
	delay_node created =>  6.0 Flag.E Type.D#5, (robot DELAY []) -1> (robot DELAY []) prev=#2 next=[]
	div_node edited =>  6.0 Flag.F Type.R#2, (human go_behind_car ()) -3> (robot COM_ALIGN ['oil-low']) prev=#1 next=[#4 #5]
applied refinement = 
next actions:
	- 107-HP-close_hood()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
refinement = 
[
	dec_handling_lights_start_replace: [DecompType.BOTH_AGENDAS_EMPTY]
]
BOTH_AGENDAS_EMPTY
applied refinement = 
next actions:

=> end explo
node explored = 6.0 Flag.F Type.R#2, (human go_behind_car ()) -3> (robot COM_ALIGN ['oil-low']) prev=#1 next=[#4 #5]
new_e_flagged_nodes : 
	6.0 Flag.E Type.D#5, (robot DELAY []) -1> (robot DELAY []) prev=#2 next=[]
	7.0 Flag.E Type.F#4, (robot refill_oil ()) -4> (human close_hood ()) prev=#2 next=[]
e_flagged_nodes :
	1.0 Flag.E Type.I#3, (human go_behind_car ()) -1> (human go_behind_car ()) prev=#1 next=[]
	6.0 Flag.E Type.D#5, (robot DELAY []) -1> (robot DELAY []) prev=#2 next=[]
	7.0 Flag.E Type.F#4, (robot refill_oil ()) -4> (human close_hood ()) prev=#2 next=[]
Ns before check = None
Nf = 7.0 Flag.E Type.F#4, (robot refill_oil ()) -4> (human close_hood ()) prev=#2 next=[]
new Ns!
Ns after check = 7.0 Flag.S Type.F#4, (robot refill_oil ()) -4> (human close_hood ()) prev=#2 next=[]
e_flagged_nodes after check solution:
	1.0 Flag.E Type.I#3, (human go_behind_car ()) -1> (human go_behind_car ()) prev=#1 next=[]
	6.0 Flag.E Type.D#5, (robot DELAY []) -1> (robot DELAY []) prev=#2 next=[]

<@> picked node = 1.0 Flag.E Type.I#3, (human go_behind_car ()) -1> (human go_behind_car ()) prev=#1 next=[]
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-58-HP-replace_rear_light()-0.0
||	-47-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = low 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 0-RA-Car_maintenance()
decomp i= 0 : dec_handling_lights_start_checking
	0-RA-Car_maintenance() => [109-RP-go_front_car()-0.0 - 110-RP-refill_washer()-0.0 - 111-RP-refill_oil()-0.0 - 112-RP-store_oil()-0.0] : dec_car_maintenance_R
	109-RP-go_front_car()-0.0 => [109-RP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[110-RP-refill_washer()-0.0, 111-RP-refill_oil()-0.0, 112-RP-store_oil()-0.0]
	end 0
refinement = 
[
	dec_handling_lights_start_checking: [110-RP-refill_washer()-0.0 - 111-RP-refill_oil()-0.0 - 112-RP-store_oil()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 113-RP-refill_washer()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-111-RP-refill_oil()-0.0
||	-112-RP-store_oil()-0.0
| AGENDA human =
||	-58-HP-replace_rear_light()-0.0
||	-47-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 58-HP-replace_rear_light()-0.0
decomp i= 0 : dec_handling_lights_start_checking
	end 0
human- Refine agenda with r_beliefs
Task to refine: 58-HP-replace_rear_light()-0.0
decomp i= 0 : dec_handling_lights_start_checking
	end 0
No relevant belief divergence for refinement
refinement = 
[
	dec_handling_lights_start_checking: [58-HP-replace_rear_light()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 114-HP-replace_rear_light()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-111-RP-refill_oil()-0.0
||	-112-RP-store_oil()-0.0
| AGENDA human =
||	-47-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 111-RP-refill_oil()-0.0
decomp i= 0 : dec_handling_lights_start_checking
	end 0
refinement = 
[
	dec_handling_lights_start_checking: [111-RP-refill_oil()-0.0]
]
Decomp OK
[93malready done[0m
[93m111-RP-refill_oil()-0.0 not applicable[0m
Operator isn't applicable with only one of the beliefs

# UPDATE belief divergences
	washer:None: H=low R=full
	oil:None: H=full R=low

Testing with 1 relevant divergence
divergence tested = washer:None: H=low R=full
Task to refine: 47-HA-Closing_hood()
decomp i= 0 : 
	47-HA-Closing_hood() => [115-HP-go_front_car()-0.0 - 116-HP-close_hood()-0.0] : dec_closing_hood
	end 0
[93malready done[0m
[93m111-RP-refill_oil()-0.0 not applicable[0m
Operator isn't applicable with only one of the beliefs
	divergence isn't relevant
divergence tested = oil:None: H=full R=low
Task to refine: 47-HA-Closing_hood()
decomp i= 0 : 
	47-HA-Closing_hood() => [117-HP-go_front_car()-0.0 - 118-HP-close_hood()-0.0] : dec_closing_hood
	end 0
	divergence is relevant!
Relevant divergences to correct : 	oil:None: H=full R=low

COM: com action added eff = 119-RP-COM_ALIGN['oil-low']-3.0
robot- Refine agenda
Task to refine: 111-RP-refill_oil()-0.0
decomp i= 0 : dec_handling_lights_start_checking
	end 0
refinement = 
[
	dec_handling_lights_start_checking: [111-RP-refill_oil()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
Trying to create delaying branch
rel_divs= 	oil:None: H=full R=low

	initial div ..
applied refinement = 
next actions:
	- 120-RP-refill_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-112-RP-store_oil()-0.0
| AGENDA human =
||	-47-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 47-HA-Closing_hood()
decomp i= 0 : dec_handling_lights_start_checking
	47-HA-Closing_hood() => [121-HP-go_front_car()-0.0 - 122-HP-close_hood()-0.0] : dec_closing_hood
	end 0
human- Refine agenda with r_beliefs
Task to refine: 47-HA-Closing_hood()
decomp i= 0 : dec_handling_lights_start_checking
	47-HA-Closing_hood() => [123-HP-go_front_car()-0.0 - 124-HP-close_hood()-0.0] : dec_closing_hood
	end 0
No relevant belief divergence for refinement
refinement = 
[
	dec_handling_lights_start_checking: [121-HP-go_front_car()-0.0 - 122-HP-close_hood()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
SA: human assessed washer <- full
applied refinement = 
next actions:
	- 125-HP-go_front_car()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-112-RP-store_oil()-0.0
| AGENDA human =
||	-122-HP-close_hood()-0.0
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 112-RP-store_oil()-0.0
decomp i= 0 : dec_handling_lights_start_checking
	end 0
refinement = 
[
	dec_handling_lights_start_checking: [112-RP-store_oil()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 126-RP-store_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-122-HP-close_hood()-0.0
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 122-HP-close_hood()-0.0
decomp i= 0 : dec_handling_lights_start_checking
	end 0
human- Refine agenda with r_beliefs
Task to refine: 122-HP-close_hood()-0.0
decomp i= 0 : dec_handling_lights_start_checking
	end 0
[93m122-HP-close_hood()-0.0 not applicable[0m
Operator isn't applicable with only one of the beliefs
NEED of belief alignment!

# UPDATE belief divergences
	oil:None: H=low R=full

Testing with 1 relevant divergence
divergence tested = oil:None: H=low R=full
Task to refine: 122-HP-close_hood()-0.0
decomp i= 0 : 
	end 0
	divergence is relevant!
Relevant divergences to correct : 	oil:None: H=low R=full

COM: com action added = 127-RP-COM_ALIGN['oil-full']-3.0
human- Refine agenda
Task to refine: 122-HP-close_hood()-0.0
decomp i= 0 : dec_handling_lights_start_checking
	end 0
human- Refine agenda with r_beliefs
Task to refine: 122-HP-close_hood()-0.0
decomp i= 0 : dec_handling_lights_start_checking
	end 0
No relevant belief divergence for refinement
refinement = 
[
	dec_handling_lights_start_checking: [122-HP-close_hood()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
Trying to create delaying branch
rel_divs= 	oil:None: H=low R=full

	div not initial!
		testing n= 6.0 Flag.E Type.I#3, (human go_behind_car ()) -6> (robot COM_ALIGN ['oil-full']) prev=#1 next=[]
	div node identified :  6.0 Flag.E Type.I#3, (human go_behind_car ()) -6> (robot COM_ALIGN ['oil-full']) prev=#1 next=[]
	testing action= 73-HP-go_behind_car()-1.0
		R-Agenda in [0-RA-Car_maintenance()]
		H-Agenda in [58-HP-replace_rear_light()-0.0, 47-HA-Closing_hood()]
before acting
after acting
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = low 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
after other
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = low 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
action.next= [113-RP-refill_washer()-1.0]
	testing action= 113-RP-refill_washer()-1.0
		R-Agenda in [111-RP-refill_oil()-0.0, 112-RP-store_oil()-0.0]
		H-Agenda in [58-HP-replace_rear_light()-0.0, 47-HA-Closing_hood()]
before acting
after acting
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
after other
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
action.next= [114-HP-replace_rear_light()-1.0]
	testing action= 114-HP-replace_rear_light()-1.0
		R-Agenda in [111-RP-refill_oil()-0.0, 112-RP-store_oil()-0.0]
		H-Agenda in [47-HA-Closing_hood()]
before acting
after acting
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
after other
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
action.next= [119-RP-COM_ALIGN['oil-low']-3.0]
	testing action= 119-RP-COM_ALIGN['oil-low']-3.0
		R-Agenda in []
		H-Agenda in []
	testing action= 120-RP-refill_oil()-1.0
		R-Agenda in [112-RP-store_oil()-0.0]
		H-Agenda in [47-HA-Closing_hood()]
before acting
after acting
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
after other
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
agendas:
div_action.agent_agendas[CM.g_human_name]= [47-HA-Closing_hood()]
div_action.agent_agendas[CM.g_robot_name]= [112-RP-store_oil()-0.0]
	div action identified :  120-RP-refill_oil()-1.0
__________________________________________________________________________
| AGENDA robot =
||	-120-RP-refill_oil()-1.0
||	-112-RP-store_oil()-0.0
| AGENDA human =
||	-47-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
	Branching:
BRANCHING current_cost= 6.0
	div_node_bottom created =>  6.0 Flag.E Type.I#6, (robot refill_oil ()) -3> (robot COM_ALIGN ['oil-full']) prev=#3 next=[]
	delay_node created =>  6.0 Flag.E Type.D#7, (robot DELAY []) -1> (robot DELAY []) prev=#3 next=[]
	div_node edited =>  6.0 Flag.F Type.R#3, (human go_behind_car ()) -3> (robot COM_ALIGN ['oil-low']) prev=#1 next=[#6 #7]
applied refinement = 
next actions:
	- 128-HP-close_hood()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
refinement = 
[
	dec_handling_lights_start_checking: [DecompType.BOTH_AGENDAS_EMPTY]
]
BOTH_AGENDAS_EMPTY
applied refinement = 
next actions:

=> end explo
node explored = 6.0 Flag.F Type.R#3, (human go_behind_car ()) -3> (robot COM_ALIGN ['oil-low']) prev=#1 next=[#6 #7]
new_e_flagged_nodes : 
	6.0 Flag.E Type.D#7, (robot DELAY []) -1> (robot DELAY []) prev=#3 next=[]
	7.0 Flag.E Type.F#6, (robot refill_oil ()) -4> (human close_hood ()) prev=#3 next=[]
e_flagged_nodes :
	6.0 Flag.E Type.D#5, (robot DELAY []) -1> (robot DELAY []) prev=#2 next=[]
	6.0 Flag.E Type.D#7, (robot DELAY []) -1> (robot DELAY []) prev=#3 next=[]
	7.0 Flag.E Type.F#6, (robot refill_oil ()) -4> (human close_hood ()) prev=#3 next=[]
Ns before check = 7.0 Flag.S Type.F#4, (robot refill_oil ()) -4> (human close_hood ()) prev=#2 next=[]
Nf = 7.0 Flag.E Type.F#6, (robot refill_oil ()) -4> (human close_hood ()) prev=#3 next=[]
Ns after check = 7.0 Flag.S Type.F#4, (robot refill_oil ()) -4> (human close_hood ()) prev=#2 next=[]
e_flagged_nodes after check solution:
	6.0 Flag.E Type.D#5, (robot DELAY []) -1> (robot DELAY []) prev=#2 next=[]
	6.0 Flag.E Type.D#7, (robot DELAY []) -1> (robot DELAY []) prev=#3 next=[]

<@> picked node = 6.0 Flag.E Type.D#5, (robot DELAY []) -1> (robot DELAY []) prev=#2 next=[]
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-87-RP-refill_oil()-1.0
||	-77-RP-store_oil()-0.0
| AGENDA human =
||	-49-HA-Checking_front_lights()
||	-47-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 49-HA-Checking_front_lights()
decomp i= 0 : delaying
	49-HA-Checking_front_lights() => [130-HP-go_front_car()-0.0 - 131-HP-check_left_light()-0.0 - 132-HP-check_right_light()-0.0] : dec_checking_front_ligths
	end 0
human- Refine agenda with r_beliefs
Task to refine: 49-HA-Checking_front_lights()
decomp i= 0 : delaying
	49-HA-Checking_front_lights() => [133-HP-go_front_car()-0.0 - 134-HP-check_left_light()-0.0 - 135-HP-check_right_light()-0.0] : dec_checking_front_ligths
	end 0
No relevant belief divergence for refinement
refinement = 
[
	delaying: [130-HP-go_front_car()-0.0 - 131-HP-check_left_light()-0.0 - 132-HP-check_right_light()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
SA: human assessed washer <- full
applied refinement = 
next actions:
	- 136-HP-go_front_car()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-87-RP-refill_oil()-1.0
||	-77-RP-store_oil()-0.0
| AGENDA human =
||	-131-HP-check_left_light()-0.0
||	-132-HP-check_right_light()-0.0
||	-47-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 87-RP-refill_oil()-1.0
decomp i= 0 : delaying
	end 0
refinement = 
[
	delaying: [87-RP-refill_oil()-1.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 137-RP-refill_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-77-RP-store_oil()-0.0
| AGENDA human =
||	-131-HP-check_left_light()-0.0
||	-132-HP-check_right_light()-0.0
||	-47-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 131-HP-check_left_light()-0.0
decomp i= 0 : delaying
	131-HP-check_left_light()-0.0 => [131-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 132-HP-check_right_light()-0.0
	132-HP-check_right_light()-0.0 => [132-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 47-HA-Closing_hood()
	47-HA-Closing_hood() => [138-HP-go_front_car()-0.0 - 139-HP-close_hood()-0.0] : dec_closing_hood
	138-HP-go_front_car()-0.0 => [138-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[139-HP-close_hood()-0.0]
	end 0
human- Refine agenda with r_beliefs
Task to refine: 131-HP-check_left_light()-0.0
decomp i= 0 : delaying
	131-HP-check_left_light()-0.0 => [131-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 132-HP-check_right_light()-0.0
	132-HP-check_right_light()-0.0 => [132-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 47-HA-Closing_hood()
	47-HA-Closing_hood() => [140-HP-go_front_car()-0.0 - 141-HP-close_hood()-0.0] : dec_closing_hood
	140-HP-go_front_car()-0.0 => [140-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[141-HP-close_hood()-0.0]
	end 0
No relevant belief divergence for refinement
refinement = 
[
	delaying: [139-HP-close_hood()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 142-HP-close_hood()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-77-RP-store_oil()-0.0
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 77-RP-store_oil()-0.0
decomp i= 0 : delaying
	end 0
refinement = 
[
	delaying: [77-RP-store_oil()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 143-RP-store_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
human- Refine agenda with r_beliefs
No relevant belief divergence for refinement
refinement = 
[
	delaying: [DecompType.BOTH_AGENDAS_EMPTY]
]
BOTH_AGENDAS_EMPTY
applied refinement = 
next actions:

=> end explo
node explored = 10.0 Flag.E Type.F#5, (robot DELAY []) -5> (robot store_oil ()) prev=#2 next=[]
new_e_flagged_nodes : 
	10.0 Flag.E Type.F#5, (robot DELAY []) -5> (robot store_oil ()) prev=#2 next=[]
e_flagged_nodes :
	6.0 Flag.E Type.D#7, (robot DELAY []) -1> (robot DELAY []) prev=#3 next=[]
	10.0 Flag.E Type.F#5, (robot DELAY []) -5> (robot store_oil ()) prev=#2 next=[]
Ns before check = 7.0 Flag.S Type.F#4, (robot refill_oil ()) -4> (human close_hood ()) prev=#2 next=[]
Nf = 10.0 Flag.E Type.F#5, (robot DELAY []) -5> (robot store_oil ()) prev=#2 next=[]
Ns after check = 7.0 Flag.S Type.F#4, (robot refill_oil ()) -4> (human close_hood ()) prev=#2 next=[]
e_flagged_nodes after check solution:
	6.0 Flag.E Type.D#7, (robot DELAY []) -1> (robot DELAY []) prev=#3 next=[]

<@> picked node = 6.0 Flag.E Type.D#7, (robot DELAY []) -1> (robot DELAY []) prev=#3 next=[]
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-120-RP-refill_oil()-1.0
||	-112-RP-store_oil()-0.0
| AGENDA human =
||	-47-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 47-HA-Closing_hood()
decomp i= 0 : delaying
	47-HA-Closing_hood() => [144-HP-go_front_car()-0.0 - 145-HP-close_hood()-0.0] : dec_closing_hood
	end 0
human- Refine agenda with r_beliefs
Task to refine: 47-HA-Closing_hood()
decomp i= 0 : delaying
	47-HA-Closing_hood() => [146-HP-go_front_car()-0.0 - 147-HP-close_hood()-0.0] : dec_closing_hood
	end 0
No relevant belief divergence for refinement
refinement = 
[
	delaying: [144-HP-go_front_car()-0.0 - 145-HP-close_hood()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
SA: human assessed washer <- full
applied refinement = 
next actions:
	- 148-HP-go_front_car()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-120-RP-refill_oil()-1.0
||	-112-RP-store_oil()-0.0
| AGENDA human =
||	-145-HP-close_hood()-0.0
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 120-RP-refill_oil()-1.0
decomp i= 0 : delaying
	end 0
refinement = 
[
	delaying: [120-RP-refill_oil()-1.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 149-RP-refill_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-112-RP-store_oil()-0.0
| AGENDA human =
||	-145-HP-close_hood()-0.0
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 145-HP-close_hood()-0.0
decomp i= 0 : delaying
	end 0
human- Refine agenda with r_beliefs
Task to refine: 145-HP-close_hood()-0.0
decomp i= 0 : delaying
	end 0
No relevant belief divergence for refinement
refinement = 
[
	delaying: [145-HP-close_hood()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 150-HP-close_hood()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-112-RP-store_oil()-0.0
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 112-RP-store_oil()-0.0
decomp i= 0 : delaying
	end 0
refinement = 
[
	delaying: [112-RP-store_oil()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 151-RP-store_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
human- Refine agenda with r_beliefs
No relevant belief divergence for refinement
refinement = 
[
	delaying: [DecompType.BOTH_AGENDAS_EMPTY]
]
BOTH_AGENDAS_EMPTY
applied refinement = 
next actions:

=> end explo
node explored = 10.0 Flag.E Type.F#7, (robot DELAY []) -5> (robot store_oil ()) prev=#3 next=[]
new_e_flagged_nodes : 
	10.0 Flag.E Type.F#7, (robot DELAY []) -5> (robot store_oil ()) prev=#3 next=[]
e_flagged_nodes :
	10.0 Flag.E Type.F#7, (robot DELAY []) -5> (robot store_oil ()) prev=#3 next=[]
Ns before check = 7.0 Flag.S Type.F#4, (robot refill_oil ()) -4> (human close_hood ()) prev=#2 next=[]
Nf = 10.0 Flag.E Type.F#7, (robot DELAY []) -5> (robot store_oil ()) prev=#3 next=[]
Ns after check = 7.0 Flag.S Type.F#4, (robot refill_oil ()) -4> (human close_hood ()) prev=#2 next=[]
e_flagged_nodes after check solution:
	=> time spent first exploration = 178ms
Start refining u nodes
	=> time spent refining = 0ms
Total duration = 178ms
Non relevant div:
False
Plans:
45-RP-COM_ALIGN['rear_light-old']-3.0 72-HP-go_behind_car()-1.0 78-RP-refill_washer()-1.0 79-HP-replace_rear_light()-1.0 86-RP-COM_ALIGN['oil-low']-3.0 87-RP-refill_oil()-1.0 94-HP-go_front_car()-1.0 95-RP-store_oil()-1.0 102-RP-COM_ALIGN['oil-full']-3.0 107-HP-close_hood()-1.0/45-RP-COM_ALIGN['rear_light-old']-3.0 72-HP-go_behind_car()-1.0 78-RP-refill_washer()-1.0 79-HP-replace_rear_light()-1.0 86-RP-COM_ALIGN['oil-low']-3.0 108-RP-DELAY[]-0.0 136-HP-go_front_car()-1.0 137-RP-refill_oil()-1.0 142-HP-close_hood()-1.0 143-RP-store_oil()-1.0/45-RP-COM_ALIGN['rear_light-old']-3.0 73-HP-go_behind_car()-1.0 113-RP-refill_washer()-1.0 114-HP-replace_rear_light()-1.0 119-RP-COM_ALIGN['oil-low']-3.0 120-RP-refill_oil()-1.0 125-HP-go_front_car()-1.0 126-RP-store_oil()-1.0 127-RP-COM_ALIGN['oil-full']-3.0 128-HP-close_hood()-1.0/45-RP-COM_ALIGN['rear_light-old']-3.0 73-HP-go_behind_car()-1.0 113-RP-refill_washer()-1.0 114-HP-replace_rear_light()-1.0 119-RP-COM_ALIGN['oil-low']-3.0 129-RP-DELAY[]-0.0 148-HP-go_front_car()-1.0 149-RP-refill_oil()-1.0 150-HP-close_hood()-1.0 151-RP-store_oil()-1.0
best_traces:
[143-RP-store_oil()-1.0, 151-RP-store_oil()-1.0]
best_metrics:
(2.0, 0.0, 8.0, 1.0)
