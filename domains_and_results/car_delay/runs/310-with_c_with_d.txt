RUN N=310 With=True
INITIAL STATES
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
|| robot_init.at_robot = front 	ObsType.OBS 	loc=front
|| robot_init.at_human = front 	ObsType.OBS 	loc=front
|| robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
|| robot_init.washer = full 	ObsType.OBS 	loc=front
|| robot_init.oil = low 	ObsType.INF 	loc=front
|| robot_init.hood = open 	ObsType.OBS 	loc=front
|| robot_init.rear_light = old 	ObsType.INF 	loc=rear
|| robot_init.left_light = ok 	ObsType.INF 	loc=front
|| robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
|| human_init.at_robot = front
|| human_init.at_human = front
|| human_init.at_oil_bottle = front
|| human_init.washer = low
|| human_init.oil = full
|| human_init.hood = open
|| human_init.rear_light = new
|| human_init.left_light = ok
|| human_init.right_light = ok
|________________________________________________________________________
Start first exploration
SA: human assessed washer <- full
first node = 0.0 Flag.E Type.I#1, (human BEGIN []) -1> (human BEGIN []) prev=None next=[]

<@> picked node = 0.0 Flag.E Type.I#1, (human BEGIN []) -1> (human BEGIN []) prev=None next=[]
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 0-RA-Car_maintenance()
decomp i= 0 : origin
	0-RA-Car_maintenance() => [3-RP-go_front_car()-0.0 - 4-RP-refill_washer()-0.0 - 5-RP-refill_oil()-0.0 - 6-RP-store_oil()-0.0] : dec_car_maintenance_R
	3-RP-go_front_car()-0.0 => [3-RP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[4-RP-refill_washer()-0.0, 5-RP-refill_oil()-0.0, 6-RP-store_oil()-0.0]
	4-RP-refill_washer()-0.0 => [4-RP-refill_washer()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[5-RP-refill_oil()-0.0, 6-RP-store_oil()-0.0]
	end 0
refinement = 
[
	origin: [5-RP-refill_oil()-0.0 - 6-RP-store_oil()-0.0]
]
Decomp OK
[93malready done[0m
[93m5-RP-refill_oil()-0.0 not applicable[0m
Operator isn't applicable with only one of the beliefs

# UPDATE belief divergences
	oil:None: H=full R=low
	rear_light:None: H=new R=old

Testing with 1 relevant divergence
divergence tested = oil:None: H=full R=low
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : 
	1-HA-Car_maintenance() => [7-HA-Handling_lights() - 8-HA-Closing_hood()] : dec_car_maintenance_H
	7-HA-Handling_lights() => [9-HA-Checking_front_lights()] : dec_handling_lights_start_replace
	9-HA-Checking_front_lights() => [10-HP-go_front_car()-0.0 - 11-HP-check_left_light()-0.0 - 12-HP-check_right_light()-0.0] : dec_checking_front_ligths
	10-HP-go_front_car()-0.0 => [10-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[11-HP-check_left_light()-0.0, 12-HP-check_right_light()-0.0, 8-HA-Closing_hood()]
	11-HP-check_left_light()-0.0 => [11-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[12-HP-check_right_light()-0.0, 8-HA-Closing_hood()]
	12-HP-check_right_light()-0.0 => [12-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[8-HA-Closing_hood()]
	8-HA-Closing_hood() => [13-HP-go_front_car()-0.0 - 14-HP-close_hood()-0.0] : dec_closing_hood
	13-HP-go_front_car()-0.0 => [13-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[14-HP-close_hood()-0.0]
	end 0
	divergence is relevant!
Relevant divergences to correct : 	oil:None: H=full R=low

COM: com action added eff = 15-RP-COM_ALIGN['oil-low']-3.0
robot- Refine agenda
Task to refine: 0-RA-Car_maintenance()
decomp i= 0 : origin
	0-RA-Car_maintenance() => [16-RP-go_front_car()-0.0 - 17-RP-refill_washer()-0.0 - 18-RP-refill_oil()-0.0 - 19-RP-store_oil()-0.0] : dec_car_maintenance_R
	16-RP-go_front_car()-0.0 => [16-RP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[17-RP-refill_washer()-0.0, 18-RP-refill_oil()-0.0, 19-RP-store_oil()-0.0]
	17-RP-refill_washer()-0.0 => [17-RP-refill_washer()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[18-RP-refill_oil()-0.0, 19-RP-store_oil()-0.0]
	end 0
refinement = 
[
	origin: [18-RP-refill_oil()-0.0 - 19-RP-store_oil()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
Trying to create delaying branch
rel_divs= 	oil:None: H=full R=low

	initial div ..
applied refinement = 
next actions:
	- 20-RP-refill_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-19-RP-store_oil()-0.0
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [21-HA-Handling_lights() - 22-HA-Closing_hood()] : dec_car_maintenance_H
	21-HA-Handling_lights() => [23-HA-Checking_front_lights()] : dec_handling_lights_start_replace
	23-HA-Checking_front_lights() => [24-HP-go_front_car()-0.0 - 25-HP-check_left_light()-0.0 - 26-HP-check_right_light()-0.0] : dec_checking_front_ligths
	24-HP-go_front_car()-0.0 => [24-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[25-HP-check_left_light()-0.0, 26-HP-check_right_light()-0.0, 22-HA-Closing_hood()]
	25-HP-check_left_light()-0.0 => [25-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[26-HP-check_right_light()-0.0, 22-HA-Closing_hood()]
	26-HP-check_right_light()-0.0 => [26-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[22-HA-Closing_hood()]
	22-HA-Closing_hood() => [27-HP-go_front_car()-0.0 - 28-HP-close_hood()-0.0] : dec_closing_hood
	27-HP-go_front_car()-0.0 => [27-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[28-HP-close_hood()-0.0]
	end 0
human- Refine agenda with r_beliefs
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [29-HA-Handling_lights() - 30-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 29-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	29-HA-Handling_lights() => [31-HA-Replacing_rear_light() - 32-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [33-HA-Checking_front_lights(), 34-HA-Replacing_rear_light(), 30-HA-Closing_hood()]
	31-HA-Replacing_rear_light() => [35-HP-go_behind_car()-0.0 - 36-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	33-HA-Checking_front_lights() => [37-HP-go_front_car()-0.0 - 38-HP-check_left_light()-0.0 - 39-HP-check_right_light()-0.0] : dec_checking_front_ligths
	37-HP-go_front_car()-0.0 => [37-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[38-HP-check_left_light()-0.0, 39-HP-check_right_light()-0.0, 34-HA-Replacing_rear_light(), 30-HA-Closing_hood()]
	38-HP-check_left_light()-0.0 => [38-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[39-HP-check_right_light()-0.0, 34-HA-Replacing_rear_light(), 30-HA-Closing_hood()]
	39-HP-check_right_light()-0.0 => [39-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[34-HA-Replacing_rear_light(), 30-HA-Closing_hood()]
	34-HA-Replacing_rear_light() => [40-HP-go_behind_car()-0.0 - 41-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 1
Different number of decomposition
NEED of belief alignment!

# UPDATE belief divergences
	rear_light:None: H=new R=old

Testing with 1 relevant divergence
divergence tested = rear_light:None: H=new R=old
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : 
	1-HA-Car_maintenance() => [42-HA-Handling_lights() - 43-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 42-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	42-HA-Handling_lights() => [44-HA-Replacing_rear_light() - 45-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [46-HA-Checking_front_lights(), 47-HA-Replacing_rear_light(), 43-HA-Closing_hood()]
	44-HA-Replacing_rear_light() => [48-HP-go_behind_car()-0.0 - 49-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	46-HA-Checking_front_lights() => [50-HP-go_front_car()-0.0 - 51-HP-check_left_light()-0.0 - 52-HP-check_right_light()-0.0] : dec_checking_front_ligths
	50-HP-go_front_car()-0.0 => [50-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[51-HP-check_left_light()-0.0, 52-HP-check_right_light()-0.0, 47-HA-Replacing_rear_light(), 43-HA-Closing_hood()]
	51-HP-check_left_light()-0.0 => [51-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[52-HP-check_right_light()-0.0, 47-HA-Replacing_rear_light(), 43-HA-Closing_hood()]
	52-HP-check_right_light()-0.0 => [52-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[47-HA-Replacing_rear_light(), 43-HA-Closing_hood()]
	47-HA-Replacing_rear_light() => [53-HP-go_behind_car()-0.0 - 54-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 1
	divergence is relevant!
Relevant divergences to correct : 	rear_light:None: H=new R=old

COM: com action added = 55-RP-COM_ALIGN['rear_light-old']-3.0
human- Refine agenda
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [56-HA-Handling_lights() - 57-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 56-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	56-HA-Handling_lights() => [58-HA-Replacing_rear_light() - 59-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [60-HA-Checking_front_lights(), 61-HA-Replacing_rear_light(), 57-HA-Closing_hood()]
	58-HA-Replacing_rear_light() => [62-HP-go_behind_car()-0.0 - 63-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	60-HA-Checking_front_lights() => [64-HP-go_front_car()-0.0 - 65-HP-check_left_light()-0.0 - 66-HP-check_right_light()-0.0] : dec_checking_front_ligths
	64-HP-go_front_car()-0.0 => [64-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[65-HP-check_left_light()-0.0, 66-HP-check_right_light()-0.0, 61-HA-Replacing_rear_light(), 57-HA-Closing_hood()]
	65-HP-check_left_light()-0.0 => [65-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[66-HP-check_right_light()-0.0, 61-HA-Replacing_rear_light(), 57-HA-Closing_hood()]
	66-HP-check_right_light()-0.0 => [66-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[61-HA-Replacing_rear_light(), 57-HA-Closing_hood()]
	61-HA-Replacing_rear_light() => [67-HP-go_behind_car()-0.0 - 68-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 1
human- Refine agenda with r_beliefs
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [69-HA-Handling_lights() - 70-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 69-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	69-HA-Handling_lights() => [71-HA-Replacing_rear_light() - 72-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [73-HA-Checking_front_lights(), 74-HA-Replacing_rear_light(), 70-HA-Closing_hood()]
	71-HA-Replacing_rear_light() => [75-HP-go_behind_car()-0.0 - 76-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	73-HA-Checking_front_lights() => [77-HP-go_front_car()-0.0 - 78-HP-check_left_light()-0.0 - 79-HP-check_right_light()-0.0] : dec_checking_front_ligths
	77-HP-go_front_car()-0.0 => [77-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[78-HP-check_left_light()-0.0, 79-HP-check_right_light()-0.0, 74-HA-Replacing_rear_light(), 70-HA-Closing_hood()]
	78-HP-check_left_light()-0.0 => [78-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[79-HP-check_right_light()-0.0, 74-HA-Replacing_rear_light(), 70-HA-Closing_hood()]
	79-HP-check_right_light()-0.0 => [79-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[74-HA-Replacing_rear_light(), 70-HA-Closing_hood()]
	74-HA-Replacing_rear_light() => [80-HP-go_behind_car()-0.0 - 81-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 1
No relevant belief divergence for refinement
refinement = 
[
	dec_handling_lights_start_replace: [62-HP-go_behind_car()-0.0 - 63-HP-replace_rear_light()-0.0 - 59-HA-Checking_front_lights() - 57-HA-Closing_hood()]
	dec_handling_lights_start_checking: [67-HP-go_behind_car()-0.0 - 68-HP-replace_rear_light()-0.0 - 57-HA-Closing_hood()]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
Trying to create delaying branch
rel_divs= 	rear_light:None: H=new R=old

	initial div ..
applied refinement = 
next actions:
	- 82-HP-go_behind_car()-1.0
	- 83-HP-go_behind_car()-1.0

=> end explo
node explored = 1.0 Flag.F Type.H#1, (human BEGIN []) -2> (robot COM_ALIGN ['rear_light-old']) prev=None next=[#2 #3]
new_e_flagged_nodes : 
	2.0 Flag.E Type.I#2, (human go_behind_car ()) -1> (human go_behind_car ()) prev=#1 next=[]
	2.0 Flag.E Type.I#3, (human go_behind_car ()) -1> (human go_behind_car ()) prev=#1 next=[]
e_flagged_nodes :
	2.0 Flag.E Type.I#2, (human go_behind_car ()) -1> (human go_behind_car ()) prev=#1 next=[]
	2.0 Flag.E Type.I#3, (human go_behind_car ()) -1> (human go_behind_car ()) prev=#1 next=[]
Ns before check = None
Nf = None
Ns after check = None
e_flagged_nodes after check solution:
	2.0 Flag.E Type.I#2, (human go_behind_car ()) -1> (human go_behind_car ()) prev=#1 next=[]
	2.0 Flag.E Type.I#3, (human go_behind_car ()) -1> (human go_behind_car ()) prev=#1 next=[]

<@> picked node = 2.0 Flag.E Type.I#2, (human go_behind_car ()) -1> (human go_behind_car ()) prev=#1 next=[]
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-19-RP-store_oil()-0.0
| AGENDA human =
||	-63-HP-replace_rear_light()-0.0
||	-59-HA-Checking_front_lights()
||	-57-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 19-RP-store_oil()-0.0
decomp i= 0 : dec_handling_lights_start_replace
	end 0
refinement = 
[
	dec_handling_lights_start_replace: [19-RP-store_oil()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 84-RP-store_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-63-HP-replace_rear_light()-0.0
||	-59-HA-Checking_front_lights()
||	-57-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 63-HP-replace_rear_light()-0.0
decomp i= 0 : dec_handling_lights_start_replace
	end 0
human- Refine agenda with r_beliefs
Task to refine: 63-HP-replace_rear_light()-0.0
decomp i= 0 : dec_handling_lights_start_replace
	end 0
No relevant belief divergence for refinement
refinement = 
[
	dec_handling_lights_start_replace: [63-HP-replace_rear_light()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 85-HP-replace_rear_light()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-59-HA-Checking_front_lights()
||	-57-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
refinement = 
[
	dec_handling_lights_start_replace: [DecompType.AGENDA_EMPTY]
]
AGENDA_EMPTY => IDLE added
applied refinement = 
next actions:
	- 86-RP-IDLE[]-0.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-59-HA-Checking_front_lights()
||	-57-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 59-HA-Checking_front_lights()
decomp i= 0 : dec_handling_lights_start_replace
	59-HA-Checking_front_lights() => [87-HP-go_front_car()-0.0 - 88-HP-check_left_light()-0.0 - 89-HP-check_right_light()-0.0] : dec_checking_front_ligths
	end 0
human- Refine agenda with r_beliefs
Task to refine: 59-HA-Checking_front_lights()
decomp i= 0 : dec_handling_lights_start_replace
	59-HA-Checking_front_lights() => [90-HP-go_front_car()-0.0 - 91-HP-check_left_light()-0.0 - 92-HP-check_right_light()-0.0] : dec_checking_front_ligths
	end 0
No relevant belief divergence for refinement
refinement = 
[
	dec_handling_lights_start_replace: [87-HP-go_front_car()-0.0 - 88-HP-check_left_light()-0.0 - 89-HP-check_right_light()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 93-HP-go_front_car()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-88-HP-check_left_light()-0.0
||	-89-HP-check_right_light()-0.0
||	-57-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
refinement = 
[
	dec_handling_lights_start_replace: [DecompType.AGENDA_EMPTY]
]
AGENDA_EMPTY => IDLE added
applied refinement = 
next actions:
	- 94-RP-IDLE[]-0.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-88-HP-check_left_light()-0.0
||	-89-HP-check_right_light()-0.0
||	-57-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 88-HP-check_left_light()-0.0
decomp i= 0 : dec_handling_lights_start_replace
	88-HP-check_left_light()-0.0 => [88-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 89-HP-check_right_light()-0.0
	89-HP-check_right_light()-0.0 => [89-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 57-HA-Closing_hood()
	57-HA-Closing_hood() => [95-HP-go_front_car()-0.0 - 96-HP-close_hood()-0.0] : dec_closing_hood
	95-HP-go_front_car()-0.0 => [95-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[96-HP-close_hood()-0.0]
	end 0
human- Refine agenda with r_beliefs
Task to refine: 88-HP-check_left_light()-0.0
decomp i= 0 : dec_handling_lights_start_replace
	88-HP-check_left_light()-0.0 => [88-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 89-HP-check_right_light()-0.0
	89-HP-check_right_light()-0.0 => [89-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 57-HA-Closing_hood()
	57-HA-Closing_hood() => [97-HP-go_front_car()-0.0 - 98-HP-close_hood()-0.0] : dec_closing_hood
	97-HP-go_front_car()-0.0 => [97-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[98-HP-close_hood()-0.0]
	end 0
No relevant belief divergence for refinement
refinement = 
[
	dec_handling_lights_start_replace: [96-HP-close_hood()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 99-HP-close_hood()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
refinement = 
[
	dec_handling_lights_start_replace: [DecompType.BOTH_AGENDAS_EMPTY]
]
BOTH_AGENDAS_EMPTY
applied refinement = 
next actions:

=> end explo
node explored = 6.0 Flag.E Type.F#2, (human go_behind_car ()) -7> (human close_hood ()) prev=#1 next=[]
new_e_flagged_nodes : 
	6.0 Flag.E Type.F#2, (human go_behind_car ()) -7> (human close_hood ()) prev=#1 next=[]
e_flagged_nodes :
	2.0 Flag.E Type.I#3, (human go_behind_car ()) -1> (human go_behind_car ()) prev=#1 next=[]
	6.0 Flag.E Type.F#2, (human go_behind_car ()) -7> (human close_hood ()) prev=#1 next=[]
Ns before check = None
Nf = 6.0 Flag.E Type.F#2, (human go_behind_car ()) -7> (human close_hood ()) prev=#1 next=[]
new Ns!
Ns after check = 6.0 Flag.S Type.F#2, (human go_behind_car ()) -7> (human close_hood ()) prev=#1 next=[]
e_flagged_nodes after check solution:
	2.0 Flag.E Type.I#3, (human go_behind_car ()) -1> (human go_behind_car ()) prev=#1 next=[]

<@> picked node = 2.0 Flag.E Type.I#3, (human go_behind_car ()) -1> (human go_behind_car ()) prev=#1 next=[]
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-19-RP-store_oil()-0.0
| AGENDA human =
||	-68-HP-replace_rear_light()-0.0
||	-57-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 19-RP-store_oil()-0.0
decomp i= 0 : dec_handling_lights_start_checking
	end 0
refinement = 
[
	dec_handling_lights_start_checking: [19-RP-store_oil()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 100-RP-store_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-68-HP-replace_rear_light()-0.0
||	-57-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 68-HP-replace_rear_light()-0.0
decomp i= 0 : dec_handling_lights_start_checking
	end 0
human- Refine agenda with r_beliefs
Task to refine: 68-HP-replace_rear_light()-0.0
decomp i= 0 : dec_handling_lights_start_checking
	end 0
No relevant belief divergence for refinement
refinement = 
[
	dec_handling_lights_start_checking: [68-HP-replace_rear_light()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 101-HP-replace_rear_light()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-57-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
refinement = 
[
	dec_handling_lights_start_checking: [DecompType.AGENDA_EMPTY]
]
AGENDA_EMPTY => IDLE added
applied refinement = 
next actions:
	- 102-RP-IDLE[]-0.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-57-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 57-HA-Closing_hood()
decomp i= 0 : dec_handling_lights_start_checking
	57-HA-Closing_hood() => [103-HP-go_front_car()-0.0 - 104-HP-close_hood()-0.0] : dec_closing_hood
	end 0
human- Refine agenda with r_beliefs
Task to refine: 57-HA-Closing_hood()
decomp i= 0 : dec_handling_lights_start_checking
	57-HA-Closing_hood() => [105-HP-go_front_car()-0.0 - 106-HP-close_hood()-0.0] : dec_closing_hood
	end 0
No relevant belief divergence for refinement
refinement = 
[
	dec_handling_lights_start_checking: [103-HP-go_front_car()-0.0 - 104-HP-close_hood()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 107-HP-go_front_car()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-104-HP-close_hood()-0.0
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
refinement = 
[
	dec_handling_lights_start_checking: [DecompType.AGENDA_EMPTY]
]
AGENDA_EMPTY => IDLE added
applied refinement = 
next actions:
	- 108-RP-IDLE[]-0.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-104-HP-close_hood()-0.0
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 104-HP-close_hood()-0.0
decomp i= 0 : dec_handling_lights_start_checking
	end 0
human- Refine agenda with r_beliefs
Task to refine: 104-HP-close_hood()-0.0
decomp i= 0 : dec_handling_lights_start_checking
	end 0
No relevant belief divergence for refinement
refinement = 
[
	dec_handling_lights_start_checking: [104-HP-close_hood()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 109-HP-close_hood()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
refinement = 
[
	dec_handling_lights_start_checking: [DecompType.BOTH_AGENDAS_EMPTY]
]
BOTH_AGENDAS_EMPTY
applied refinement = 
next actions:

=> end explo
node explored = 6.0 Flag.E Type.F#3, (human go_behind_car ()) -7> (human close_hood ()) prev=#1 next=[]
new_e_flagged_nodes : 
	6.0 Flag.E Type.F#3, (human go_behind_car ()) -7> (human close_hood ()) prev=#1 next=[]
e_flagged_nodes :
	6.0 Flag.E Type.F#3, (human go_behind_car ()) -7> (human close_hood ()) prev=#1 next=[]
Ns before check = 6.0 Flag.S Type.F#2, (human go_behind_car ()) -7> (human close_hood ()) prev=#1 next=[]
Nf = 6.0 Flag.E Type.F#3, (human go_behind_car ()) -7> (human close_hood ()) prev=#1 next=[]
Ns after check = 6.0 Flag.S Type.F#2, (human go_behind_car ()) -7> (human close_hood ()) prev=#1 next=[]
e_flagged_nodes after check solution:
	=> time spent first exploration = 68ms
Start refining u nodes
	=> time spent refining = 0ms
Total duration = 68ms
Non relevant div:
True
Plans:
15-RP-COM_ALIGN['oil-low']-3.0 20-RP-refill_oil()-1.0 55-RP-COM_ALIGN['rear_light-old']-3.0 82-HP-go_behind_car()-1.0 84-RP-store_oil()-1.0 85-HP-replace_rear_light()-1.0 86-RP-IDLE[]-0.0 93-HP-go_front_car()-1.0 94-RP-IDLE[]-0.0 99-HP-close_hood()-1.0/15-RP-COM_ALIGN['oil-low']-3.0 20-RP-refill_oil()-1.0 55-RP-COM_ALIGN['rear_light-old']-3.0 83-HP-go_behind_car()-1.0 100-RP-store_oil()-1.0 101-HP-replace_rear_light()-1.0 102-RP-IDLE[]-0.0 107-HP-go_front_car()-1.0 108-RP-IDLE[]-0.0 109-HP-close_hood()-1.0
best_traces:
[99-HP-close_hood()-1.0, 109-HP-close_hood()-1.0]
best_metrics:
(2.0, 0.0, 8.0, 0.0)
