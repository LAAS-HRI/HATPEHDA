RUN N=504 With=True
INITIAL STATES
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
|| robot_init.at_robot = front 	ObsType.OBS 	loc=front
|| robot_init.at_human = front 	ObsType.OBS 	loc=front
|| robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
|| robot_init.washer = full 	ObsType.OBS 	loc=front
|| robot_init.oil = full 	ObsType.INF 	loc=front
|| robot_init.hood = open 	ObsType.OBS 	loc=front
|| robot_init.rear_light = new 	ObsType.INF 	loc=rear
|| robot_init.left_light = ok 	ObsType.INF 	loc=front
|| robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
|| human_init.at_robot = front
|| human_init.at_human = front
|| human_init.at_oil_bottle = front
|| human_init.washer = full
|| human_init.oil = low
|| human_init.hood = open
|| human_init.rear_light = old
|| human_init.left_light = ok
|| human_init.right_light = ok
|________________________________________________________________________
Start first exploration
first node = 0.0 Flag.E Type.I#1, (human BEGIN []) -1> (human BEGIN []) prev=None next=[]

<@> picked node = 0.0 Flag.E Type.I#1, (human BEGIN []) -1> (human BEGIN []) prev=None next=[]
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 0-RA-Car_maintenance()
decomp i= 0 : origin
	0-RA-Car_maintenance() => [3-RP-go_front_car()-0.0 - 4-RP-refill_washer()-0.0 - 5-RP-refill_oil()-0.0 - 6-RP-store_oil()-0.0] : dec_car_maintenance_R
	3-RP-go_front_car()-0.0 => [3-RP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[4-RP-refill_washer()-0.0, 5-RP-refill_oil()-0.0, 6-RP-store_oil()-0.0]
	4-RP-refill_washer()-0.0 => [4-RP-refill_washer()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[5-RP-refill_oil()-0.0, 6-RP-store_oil()-0.0]
	5-RP-refill_oil()-0.0 => [5-RP-refill_oil()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[6-RP-store_oil()-0.0]
	end 0
refinement = 
[
	origin: [6-RP-store_oil()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 7-RP-store_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [8-HA-Handling_lights() - 9-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 8-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	8-HA-Handling_lights() => [10-HA-Replacing_rear_light() - 11-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [12-HA-Checking_front_lights(), 13-HA-Replacing_rear_light(), 9-HA-Closing_hood()]
	10-HA-Replacing_rear_light() => [14-HP-go_behind_car()-0.0 - 15-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	12-HA-Checking_front_lights() => [16-HP-go_front_car()-0.0 - 17-HP-check_left_light()-0.0 - 18-HP-check_right_light()-0.0] : dec_checking_front_ligths
	16-HP-go_front_car()-0.0 => [16-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[17-HP-check_left_light()-0.0, 18-HP-check_right_light()-0.0, 13-HA-Replacing_rear_light(), 9-HA-Closing_hood()]
	17-HP-check_left_light()-0.0 => [17-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[18-HP-check_right_light()-0.0, 13-HA-Replacing_rear_light(), 9-HA-Closing_hood()]
	18-HP-check_right_light()-0.0 => [18-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[13-HA-Replacing_rear_light(), 9-HA-Closing_hood()]
	13-HA-Replacing_rear_light() => [19-HP-go_behind_car()-0.0 - 20-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 1
human- Refine agenda with r_beliefs
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [21-HA-Handling_lights() - 22-HA-Closing_hood()] : dec_car_maintenance_H
	21-HA-Handling_lights() => [23-HA-Checking_front_lights()] : dec_handling_lights_start_replace
	23-HA-Checking_front_lights() => [24-HP-go_front_car()-0.0 - 25-HP-check_left_light()-0.0 - 26-HP-check_right_light()-0.0] : dec_checking_front_ligths
	24-HP-go_front_car()-0.0 => [24-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[25-HP-check_left_light()-0.0, 26-HP-check_right_light()-0.0, 22-HA-Closing_hood()]
	25-HP-check_left_light()-0.0 => [25-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[26-HP-check_right_light()-0.0, 22-HA-Closing_hood()]
	26-HP-check_right_light()-0.0 => [26-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[22-HA-Closing_hood()]
	22-HA-Closing_hood() => [27-HP-go_front_car()-0.0 - 28-HP-close_hood()-0.0] : dec_closing_hood
	27-HP-go_front_car()-0.0 => [27-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[28-HP-close_hood()-0.0]
	end 0
Different number of decomposition
NEED of belief alignment!

# UPDATE belief divergences
	oil:None: H=low R=full
	rear_light:None: H=old R=new

Testing with 1 relevant divergence
divergence tested = oil:None: H=low R=full
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : 
	1-HA-Car_maintenance() => [29-HA-Handling_lights() - 30-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 29-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	29-HA-Handling_lights() => [31-HA-Replacing_rear_light() - 32-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [33-HA-Checking_front_lights(), 34-HA-Replacing_rear_light(), 30-HA-Closing_hood()]
	31-HA-Replacing_rear_light() => [35-HP-go_behind_car()-0.0 - 36-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	33-HA-Checking_front_lights() => [37-HP-go_front_car()-0.0 - 38-HP-check_left_light()-0.0 - 39-HP-check_right_light()-0.0] : dec_checking_front_ligths
	37-HP-go_front_car()-0.0 => [37-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[38-HP-check_left_light()-0.0, 39-HP-check_right_light()-0.0, 34-HA-Replacing_rear_light(), 30-HA-Closing_hood()]
	38-HP-check_left_light()-0.0 => [38-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[39-HP-check_right_light()-0.0, 34-HA-Replacing_rear_light(), 30-HA-Closing_hood()]
	39-HP-check_right_light()-0.0 => [39-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[34-HA-Replacing_rear_light(), 30-HA-Closing_hood()]
	34-HA-Replacing_rear_light() => [40-HP-go_behind_car()-0.0 - 41-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 1
Different number of decomposition
	divergence isn't relevant
divergence tested = rear_light:None: H=old R=new
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : 
	1-HA-Car_maintenance() => [42-HA-Handling_lights() - 43-HA-Closing_hood()] : dec_car_maintenance_H
	42-HA-Handling_lights() => [44-HA-Checking_front_lights()] : dec_handling_lights_start_replace
	44-HA-Checking_front_lights() => [45-HP-go_front_car()-0.0 - 46-HP-check_left_light()-0.0 - 47-HP-check_right_light()-0.0] : dec_checking_front_ligths
	45-HP-go_front_car()-0.0 => [45-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[46-HP-check_left_light()-0.0, 47-HP-check_right_light()-0.0, 43-HA-Closing_hood()]
	46-HP-check_left_light()-0.0 => [46-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[47-HP-check_right_light()-0.0, 43-HA-Closing_hood()]
	47-HP-check_right_light()-0.0 => [47-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[43-HA-Closing_hood()]
	43-HA-Closing_hood() => [48-HP-go_front_car()-0.0 - 49-HP-close_hood()-0.0] : dec_closing_hood
	48-HP-go_front_car()-0.0 => [48-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[49-HP-close_hood()-0.0]
	end 0
[93m49-HP-close_hood()-0.0 not applicable[0m
Operator isn't applicable with only one of the beliefs
	divergence isn't relevant
Testing with 2 relevant divergences
divs tested :
oil:None: H=low R=full
rear_light:None: H=old R=new
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : 
	1-HA-Car_maintenance() => [50-HA-Handling_lights() - 51-HA-Closing_hood()] : dec_car_maintenance_H
	50-HA-Handling_lights() => [52-HA-Checking_front_lights()] : dec_handling_lights_start_replace
	52-HA-Checking_front_lights() => [53-HP-go_front_car()-0.0 - 54-HP-check_left_light()-0.0 - 55-HP-check_right_light()-0.0] : dec_checking_front_ligths
	53-HP-go_front_car()-0.0 => [53-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[54-HP-check_left_light()-0.0, 55-HP-check_right_light()-0.0, 51-HA-Closing_hood()]
	54-HP-check_left_light()-0.0 => [54-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[55-HP-check_right_light()-0.0, 51-HA-Closing_hood()]
	55-HP-check_right_light()-0.0 => [55-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[51-HA-Closing_hood()]
	51-HA-Closing_hood() => [56-HP-go_front_car()-0.0 - 57-HP-close_hood()-0.0] : dec_closing_hood
	56-HP-go_front_car()-0.0 => [56-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[57-HP-close_hood()-0.0]
	end 0
	divergences are relevant!
Relevant divergences to correct : 	oil:None: H=low R=full
	rear_light:None: H=old R=new

COM: com action added = 58-RP-COM_ALIGN['oil-full', 'rear_light-new']-3.0
human- Refine agenda
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [59-HA-Handling_lights() - 60-HA-Closing_hood()] : dec_car_maintenance_H
	59-HA-Handling_lights() => [61-HA-Checking_front_lights()] : dec_handling_lights_start_replace
	61-HA-Checking_front_lights() => [62-HP-go_front_car()-0.0 - 63-HP-check_left_light()-0.0 - 64-HP-check_right_light()-0.0] : dec_checking_front_ligths
	62-HP-go_front_car()-0.0 => [62-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[63-HP-check_left_light()-0.0, 64-HP-check_right_light()-0.0, 60-HA-Closing_hood()]
	63-HP-check_left_light()-0.0 => [63-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[64-HP-check_right_light()-0.0, 60-HA-Closing_hood()]
	64-HP-check_right_light()-0.0 => [64-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[60-HA-Closing_hood()]
	60-HA-Closing_hood() => [65-HP-go_front_car()-0.0 - 66-HP-close_hood()-0.0] : dec_closing_hood
	65-HP-go_front_car()-0.0 => [65-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[66-HP-close_hood()-0.0]
	end 0
human- Refine agenda with r_beliefs
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [67-HA-Handling_lights() - 68-HA-Closing_hood()] : dec_car_maintenance_H
	67-HA-Handling_lights() => [69-HA-Checking_front_lights()] : dec_handling_lights_start_replace
	69-HA-Checking_front_lights() => [70-HP-go_front_car()-0.0 - 71-HP-check_left_light()-0.0 - 72-HP-check_right_light()-0.0] : dec_checking_front_ligths
	70-HP-go_front_car()-0.0 => [70-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[71-HP-check_left_light()-0.0, 72-HP-check_right_light()-0.0, 68-HA-Closing_hood()]
	71-HP-check_left_light()-0.0 => [71-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[72-HP-check_right_light()-0.0, 68-HA-Closing_hood()]
	72-HP-check_right_light()-0.0 => [72-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[68-HA-Closing_hood()]
	68-HA-Closing_hood() => [73-HP-go_front_car()-0.0 - 74-HP-close_hood()-0.0] : dec_closing_hood
	73-HP-go_front_car()-0.0 => [73-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[74-HP-close_hood()-0.0]
	end 0
No relevant belief divergence for refinement
refinement = 
[
	origin: [66-HP-close_hood()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 75-HP-close_hood()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
refinement = 
[
	origin: [DecompType.BOTH_AGENDAS_EMPTY]
]
BOTH_AGENDAS_EMPTY
applied refinement = 
next actions:

=> end explo
node explored = 2.0 Flag.E Type.F#1, (human BEGIN []) -3> (human close_hood ()) prev=None next=[]
new_e_flagged_nodes : 
	2.0 Flag.E Type.F#1, (human BEGIN []) -3> (human close_hood ()) prev=None next=[]
e_flagged_nodes :
	2.0 Flag.E Type.F#1, (human BEGIN []) -3> (human close_hood ()) prev=None next=[]
Ns before check = None
Nf = 2.0 Flag.E Type.F#1, (human BEGIN []) -3> (human close_hood ()) prev=None next=[]
new Ns!
Ns after check = 2.0 Flag.S Type.F#1, (human BEGIN []) -3> (human close_hood ()) prev=None next=[]
e_flagged_nodes after check solution:
	=> time spent first exploration = 36ms
Start refining u nodes
	=> time spent refining = 0ms
Total duration = 36ms
Non relevant div:
False
Plans:
7-RP-store_oil()-1.0 58-RP-COM_ALIGN['oil-full', 'rear_light-new']-3.0 75-HP-close_hood()-1.0
best_traces:
[75-HP-close_hood()-1.0]
best_metrics:
(1, 0, 2, 0)
