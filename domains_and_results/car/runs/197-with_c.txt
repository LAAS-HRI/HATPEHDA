RUN N=197 With=True
INITIAL STATES
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
|| robot_init.at_robot = front 	ObsType.OBS 	loc=front
|| robot_init.at_human = front 	ObsType.OBS 	loc=front
|| robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
|| robot_init.washer = low 	ObsType.OBS 	loc=front
|| robot_init.oil = full 	ObsType.INF 	loc=front
|| robot_init.hood = open 	ObsType.OBS 	loc=front
|| robot_init.rear_light = new 	ObsType.INF 	loc=rear
|| robot_init.left_light = todo 	ObsType.INF 	loc=front
|| robot_init.right_light = todo 	ObsType.INF 	loc=front
| STATE human =
|| human_init.at_robot = front
|| human_init.at_human = front
|| human_init.at_oil_bottle = front
|| human_init.washer = low
|| human_init.oil = full
|| human_init.hood = open
|| human_init.rear_light = old
|| human_init.left_light = todo
|| human_init.right_light = todo
|________________________________________________________________________
Start first exploration
first node = 0.0 Flag.E Type.I#1, (robot BEGIN []) -1> (robot BEGIN []) prev=None next=[]

<@> picked node = 0.0 Flag.E Type.I#1, (robot BEGIN []) -1> (robot BEGIN []) prev=None next=[]
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = low 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = todo 	ObsType.INF 	loc=front
||robot_init.right_light = todo 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = todo
||human_init.right_light = todo
|________________________________________________________________________
human- Refine agenda
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [3-HA-Handling_lights() - 4-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 3-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	3-HA-Handling_lights() => [5-HA-Replacing_rear_light() - 6-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [7-HA-Checking_front_lights(), 8-HA-Replacing_rear_light(), 4-HA-Closing_hood()]
	5-HA-Replacing_rear_light() => [9-HP-go_behind_car()-0.0 - 10-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	7-HA-Checking_front_lights() => [11-HP-go_front_car()-0.0 - 12-HP-check_left_light()-0.0 - 13-HP-check_right_light()-0.0] : dec_checking_front_ligths
	11-HP-go_front_car()-0.0 => [11-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[12-HP-check_left_light()-0.0, 13-HP-check_right_light()-0.0, 8-HA-Replacing_rear_light(), 4-HA-Closing_hood()]
	end 1
human- Refine agenda with r_beliefs
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [14-HA-Handling_lights() - 15-HA-Closing_hood()] : dec_car_maintenance_H
	14-HA-Handling_lights() => [16-HA-Checking_front_lights()] : dec_handling_lights_start_replace
	16-HA-Checking_front_lights() => [17-HP-go_front_car()-0.0 - 18-HP-check_left_light()-0.0 - 19-HP-check_right_light()-0.0] : dec_checking_front_ligths
	17-HP-go_front_car()-0.0 => [17-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[18-HP-check_left_light()-0.0, 19-HP-check_right_light()-0.0, 15-HA-Closing_hood()]
	end 0
Different number of decomposition
NEED of belief alignment!

# UPDATE belief divergences
	rear_light:None: H=old R=new

Testing with 1 relevant divergence
divergence tested = rear_light:None: H=old R=new
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : 
	1-HA-Car_maintenance() => [20-HA-Handling_lights() - 21-HA-Closing_hood()] : dec_car_maintenance_H
	20-HA-Handling_lights() => [22-HA-Checking_front_lights()] : dec_handling_lights_start_replace
	22-HA-Checking_front_lights() => [23-HP-go_front_car()-0.0 - 24-HP-check_left_light()-0.0 - 25-HP-check_right_light()-0.0] : dec_checking_front_ligths
	23-HP-go_front_car()-0.0 => [23-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[24-HP-check_left_light()-0.0, 25-HP-check_right_light()-0.0, 21-HA-Closing_hood()]
	end 0
	divergence is relevant!
Relevant divergences to correct : 	rear_light:None: H=old R=new

COM: com action added = 26-RP-COM_ALIGN['rear_light-new']-3.0
human- Refine agenda
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [27-HA-Handling_lights() - 28-HA-Closing_hood()] : dec_car_maintenance_H
	27-HA-Handling_lights() => [29-HA-Checking_front_lights()] : dec_handling_lights_start_replace
	29-HA-Checking_front_lights() => [30-HP-go_front_car()-0.0 - 31-HP-check_left_light()-0.0 - 32-HP-check_right_light()-0.0] : dec_checking_front_ligths
	30-HP-go_front_car()-0.0 => [30-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[31-HP-check_left_light()-0.0, 32-HP-check_right_light()-0.0, 28-HA-Closing_hood()]
	end 0
human- Refine agenda with r_beliefs
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [33-HA-Handling_lights() - 34-HA-Closing_hood()] : dec_car_maintenance_H
	33-HA-Handling_lights() => [35-HA-Checking_front_lights()] : dec_handling_lights_start_replace
	35-HA-Checking_front_lights() => [36-HP-go_front_car()-0.0 - 37-HP-check_left_light()-0.0 - 38-HP-check_right_light()-0.0] : dec_checking_front_ligths
	36-HP-go_front_car()-0.0 => [36-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[37-HP-check_left_light()-0.0, 38-HP-check_right_light()-0.0, 34-HA-Closing_hood()]
	end 0
No relevant belief divergence for refinement
refinement = 
[
	origin: [31-HP-check_left_light()-0.0 - 32-HP-check_right_light()-0.0 - 28-HA-Closing_hood()]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 39-HP-check_left_light()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-32-HP-check_right_light()-0.0
||	-28-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = low 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = todo 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = todo
|________________________________________________________________________
robot- Refine agenda
Task to refine: 0-RA-Car_maintenance()
decomp i= 0 : origin
	0-RA-Car_maintenance() => [40-RP-go_front_car()-0.0 - 41-RP-refill_washer()-0.0 - 42-RP-refill_oil()-0.0 - 43-RP-store_oil()-0.0] : dec_car_maintenance_R
	40-RP-go_front_car()-0.0 => [40-RP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[41-RP-refill_washer()-0.0, 42-RP-refill_oil()-0.0, 43-RP-store_oil()-0.0]
	end 0
refinement = 
[
	origin: [41-RP-refill_washer()-0.0 - 42-RP-refill_oil()-0.0 - 43-RP-store_oil()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 44-RP-refill_washer()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-42-RP-refill_oil()-0.0
||	-43-RP-store_oil()-0.0
| AGENDA human =
||	-32-HP-check_right_light()-0.0
||	-28-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = todo 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = todo
|________________________________________________________________________
human- Refine agenda
Task to refine: 32-HP-check_right_light()-0.0
decomp i= 0 : origin
	end 0
human- Refine agenda with r_beliefs
Task to refine: 32-HP-check_right_light()-0.0
decomp i= 0 : origin
	end 0
No relevant belief divergence for refinement
refinement = 
[
	origin: [32-HP-check_right_light()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 45-HP-check_right_light()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-42-RP-refill_oil()-0.0
||	-43-RP-store_oil()-0.0
| AGENDA human =
||	-28-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 42-RP-refill_oil()-0.0
decomp i= 0 : origin
	42-RP-refill_oil()-0.0 => [42-RP-refill_oil()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 43-RP-store_oil()-0.0
	end 0
refinement = 
[
	origin: [43-RP-store_oil()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 46-RP-store_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-28-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 28-HA-Closing_hood()
decomp i= 0 : origin
	28-HA-Closing_hood() => [47-HP-go_front_car()-0.0 - 48-HP-close_hood()-0.0] : dec_closing_hood
	47-HP-go_front_car()-0.0 => [47-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[48-HP-close_hood()-0.0]
	end 0
human- Refine agenda with r_beliefs
Task to refine: 28-HA-Closing_hood()
decomp i= 0 : origin
	28-HA-Closing_hood() => [49-HP-go_front_car()-0.0 - 50-HP-close_hood()-0.0] : dec_closing_hood
	49-HP-go_front_car()-0.0 => [49-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[50-HP-close_hood()-0.0]
	end 0
No relevant belief divergence for refinement
refinement = 
[
	origin: [48-HP-close_hood()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 51-HP-close_hood()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
refinement = 
[
	origin: [DecompType.BOTH_AGENDAS_EMPTY]
]
BOTH_AGENDAS_EMPTY
applied refinement = 
next actions:

=> end explo
node explored = 5.0 Flag.E Type.F#1, (robot BEGIN []) -6> (human close_hood ()) prev=None next=[]
new_e_flagged_nodes : 
	5.0 Flag.E Type.F#1, (robot BEGIN []) -6> (human close_hood ()) prev=None next=[]
e_flagged_nodes :
	5.0 Flag.E Type.F#1, (robot BEGIN []) -6> (human close_hood ()) prev=None next=[]
Ns before check = None
Nf = 5.0 Flag.E Type.F#1, (robot BEGIN []) -6> (human close_hood ()) prev=None next=[]
new Ns!
Ns after check = 5.0 Flag.S Type.F#1, (robot BEGIN []) -6> (human close_hood ()) prev=None next=[]
e_flagged_nodes after check solution:
	=> time spent first exploration = 32ms
Start refining u nodes
	=> time spent refining = 0ms
Total duration = 32ms
Non relevant div:
False
Plans:
26-RP-COM_ALIGN['rear_light-new']-3.0 39-HP-check_left_light()-1.0 44-RP-refill_washer()-1.0 45-HP-check_right_light()-1.0 46-RP-store_oil()-1.0 51-HP-close_hood()-1.0
best_traces:
[51-HP-close_hood()-1.0]
best_metrics:
(1, 0, 5, 0)
