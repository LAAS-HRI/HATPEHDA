RUN N=348 With=True
INITIAL STATES
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
|| robot_init.at_robot = front 	ObsType.OBS 	loc=front
|| robot_init.at_human = front 	ObsType.OBS 	loc=front
|| robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
|| robot_init.washer = full 	ObsType.OBS 	loc=front
|| robot_init.oil = low 	ObsType.INF 	loc=front
|| robot_init.hood = open 	ObsType.OBS 	loc=front
|| robot_init.rear_light = new 	ObsType.INF 	loc=rear
|| robot_init.left_light = todo 	ObsType.INF 	loc=front
|| robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
|| human_init.at_robot = front
|| human_init.at_human = front
|| human_init.at_oil_bottle = front
|| human_init.washer = full
|| human_init.oil = full
|| human_init.hood = open
|| human_init.rear_light = old
|| human_init.left_light = todo
|| human_init.right_light = ok
|________________________________________________________________________
Start first exploration
first node = 0.0 Flag.E Type.I#1, (human BEGIN []) -1> (human BEGIN []) prev=None next=[]

<@> picked node = 0.0 Flag.E Type.I#1, (human BEGIN []) -1> (human BEGIN []) prev=None next=[]
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = todo 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = todo
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 0-RA-Car_maintenance()
decomp i= 0 : origin
	0-RA-Car_maintenance() => [3-RP-go_front_car()-0.0 - 4-RP-refill_washer()-0.0 - 5-RP-refill_oil()-0.0 - 6-RP-store_oil()-0.0] : dec_car_maintenance_R
	3-RP-go_front_car()-0.0 => [3-RP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[4-RP-refill_washer()-0.0, 5-RP-refill_oil()-0.0, 6-RP-store_oil()-0.0]
	4-RP-refill_washer()-0.0 => [4-RP-refill_washer()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[5-RP-refill_oil()-0.0, 6-RP-store_oil()-0.0]
	end 0
refinement = 
[
	origin: [5-RP-refill_oil()-0.0 - 6-RP-store_oil()-0.0]
]
Decomp OK
[93malready done[0m
[93m5-RP-refill_oil()-0.0 not applicable[0m
Operator isn't applicable with only one of the beliefs

# UPDATE belief divergences
	oil:None: H=full R=low
	rear_light:None: H=old R=new

Testing with 1 relevant divergence
divergence tested = oil:None: H=full R=low
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : 
	1-HA-Car_maintenance() => [7-HA-Handling_lights() - 8-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 7-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	7-HA-Handling_lights() => [9-HA-Replacing_rear_light() - 10-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [11-HA-Checking_front_lights(), 12-HA-Replacing_rear_light(), 8-HA-Closing_hood()]
	9-HA-Replacing_rear_light() => [13-HP-go_behind_car()-0.0 - 14-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	11-HA-Checking_front_lights() => [15-HP-go_front_car()-0.0 - 16-HP-check_left_light()-0.0 - 17-HP-check_right_light()-0.0] : dec_checking_front_ligths
	15-HP-go_front_car()-0.0 => [15-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[16-HP-check_left_light()-0.0, 17-HP-check_right_light()-0.0, 12-HA-Replacing_rear_light(), 8-HA-Closing_hood()]
	end 1
	divergence is relevant!
Relevant divergences to correct : 	oil:None: H=full R=low

COM: com action added eff = 18-RP-COM_ALIGN['oil-low']-3.0
robot- Refine agenda
Task to refine: 0-RA-Car_maintenance()
decomp i= 0 : origin
	0-RA-Car_maintenance() => [19-RP-go_front_car()-0.0 - 20-RP-refill_washer()-0.0 - 21-RP-refill_oil()-0.0 - 22-RP-store_oil()-0.0] : dec_car_maintenance_R
	19-RP-go_front_car()-0.0 => [19-RP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[20-RP-refill_washer()-0.0, 21-RP-refill_oil()-0.0, 22-RP-store_oil()-0.0]
	20-RP-refill_washer()-0.0 => [20-RP-refill_washer()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[21-RP-refill_oil()-0.0, 22-RP-store_oil()-0.0]
	end 0
refinement = 
[
	origin: [21-RP-refill_oil()-0.0 - 22-RP-store_oil()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 23-RP-refill_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-22-RP-store_oil()-0.0
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = todo 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = todo
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [24-HA-Handling_lights() - 25-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 24-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	24-HA-Handling_lights() => [26-HA-Replacing_rear_light() - 27-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [28-HA-Checking_front_lights(), 29-HA-Replacing_rear_light(), 25-HA-Closing_hood()]
	26-HA-Replacing_rear_light() => [30-HP-go_behind_car()-0.0 - 31-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	28-HA-Checking_front_lights() => [32-HP-go_front_car()-0.0 - 33-HP-check_left_light()-0.0 - 34-HP-check_right_light()-0.0] : dec_checking_front_ligths
	32-HP-go_front_car()-0.0 => [32-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[33-HP-check_left_light()-0.0, 34-HP-check_right_light()-0.0, 29-HA-Replacing_rear_light(), 25-HA-Closing_hood()]
	end 1
human- Refine agenda with r_beliefs
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [35-HA-Handling_lights() - 36-HA-Closing_hood()] : dec_car_maintenance_H
	35-HA-Handling_lights() => [37-HA-Checking_front_lights()] : dec_handling_lights_start_replace
	37-HA-Checking_front_lights() => [38-HP-go_front_car()-0.0 - 39-HP-check_left_light()-0.0 - 40-HP-check_right_light()-0.0] : dec_checking_front_ligths
	38-HP-go_front_car()-0.0 => [38-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[39-HP-check_left_light()-0.0, 40-HP-check_right_light()-0.0, 36-HA-Closing_hood()]
	end 0
Different number of decomposition
NEED of belief alignment!

# UPDATE belief divergences
	rear_light:None: H=old R=new

Testing with 1 relevant divergence
divergence tested = rear_light:None: H=old R=new
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : 
	1-HA-Car_maintenance() => [41-HA-Handling_lights() - 42-HA-Closing_hood()] : dec_car_maintenance_H
	41-HA-Handling_lights() => [43-HA-Checking_front_lights()] : dec_handling_lights_start_replace
	43-HA-Checking_front_lights() => [44-HP-go_front_car()-0.0 - 45-HP-check_left_light()-0.0 - 46-HP-check_right_light()-0.0] : dec_checking_front_ligths
	44-HP-go_front_car()-0.0 => [44-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[45-HP-check_left_light()-0.0, 46-HP-check_right_light()-0.0, 42-HA-Closing_hood()]
	end 0
	divergence is relevant!
Relevant divergences to correct : 	rear_light:None: H=old R=new

COM: com action added = 47-RP-COM_ALIGN['rear_light-new']-3.0
human- Refine agenda
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [48-HA-Handling_lights() - 49-HA-Closing_hood()] : dec_car_maintenance_H
	48-HA-Handling_lights() => [50-HA-Checking_front_lights()] : dec_handling_lights_start_replace
	50-HA-Checking_front_lights() => [51-HP-go_front_car()-0.0 - 52-HP-check_left_light()-0.0 - 53-HP-check_right_light()-0.0] : dec_checking_front_ligths
	51-HP-go_front_car()-0.0 => [51-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[52-HP-check_left_light()-0.0, 53-HP-check_right_light()-0.0, 49-HA-Closing_hood()]
	end 0
human- Refine agenda with r_beliefs
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [54-HA-Handling_lights() - 55-HA-Closing_hood()] : dec_car_maintenance_H
	54-HA-Handling_lights() => [56-HA-Checking_front_lights()] : dec_handling_lights_start_replace
	56-HA-Checking_front_lights() => [57-HP-go_front_car()-0.0 - 58-HP-check_left_light()-0.0 - 59-HP-check_right_light()-0.0] : dec_checking_front_ligths
	57-HP-go_front_car()-0.0 => [57-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[58-HP-check_left_light()-0.0, 59-HP-check_right_light()-0.0, 55-HA-Closing_hood()]
	end 0
No relevant belief divergence for refinement
refinement = 
[
	origin: [52-HP-check_left_light()-0.0 - 53-HP-check_right_light()-0.0 - 49-HA-Closing_hood()]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 60-HP-check_left_light()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-22-RP-store_oil()-0.0
| AGENDA human =
||	-53-HP-check_right_light()-0.0
||	-49-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 22-RP-store_oil()-0.0
decomp i= 0 : origin
	end 0
refinement = 
[
	origin: [22-RP-store_oil()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 61-RP-store_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-53-HP-check_right_light()-0.0
||	-49-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 53-HP-check_right_light()-0.0
decomp i= 0 : origin
	53-HP-check_right_light()-0.0 => [53-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 49-HA-Closing_hood()
	49-HA-Closing_hood() => [62-HP-go_front_car()-0.0 - 63-HP-close_hood()-0.0] : dec_closing_hood
	62-HP-go_front_car()-0.0 => [62-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[63-HP-close_hood()-0.0]
	end 0
human- Refine agenda with r_beliefs
Task to refine: 53-HP-check_right_light()-0.0
decomp i= 0 : origin
	53-HP-check_right_light()-0.0 => [53-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 49-HA-Closing_hood()
	49-HA-Closing_hood() => [64-HP-go_front_car()-0.0 - 65-HP-close_hood()-0.0] : dec_closing_hood
	64-HP-go_front_car()-0.0 => [64-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[65-HP-close_hood()-0.0]
	end 0
No relevant belief divergence for refinement
refinement = 
[
	origin: [63-HP-close_hood()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 66-HP-close_hood()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
refinement = 
[
	origin: [DecompType.BOTH_AGENDAS_EMPTY]
]
BOTH_AGENDAS_EMPTY
applied refinement = 
next actions:

=> end explo
node explored = 4.0 Flag.E Type.F#1, (human BEGIN []) -5> (human close_hood ()) prev=None next=[]
new_e_flagged_nodes : 
	4.0 Flag.E Type.F#1, (human BEGIN []) -5> (human close_hood ()) prev=None next=[]
e_flagged_nodes :
	4.0 Flag.E Type.F#1, (human BEGIN []) -5> (human close_hood ()) prev=None next=[]
Ns before check = None
Nf = 4.0 Flag.E Type.F#1, (human BEGIN []) -5> (human close_hood ()) prev=None next=[]
new Ns!
Ns after check = 4.0 Flag.S Type.F#1, (human BEGIN []) -5> (human close_hood ()) prev=None next=[]
e_flagged_nodes after check solution:
	=> time spent first exploration = 38ms
Start refining u nodes
	=> time spent refining = 0ms
Total duration = 38ms
Non relevant div:
False
Plans:
18-RP-COM_ALIGN['oil-low']-3.0 23-RP-refill_oil()-1.0 47-RP-COM_ALIGN['rear_light-new']-3.0 60-HP-check_left_light()-1.0 61-RP-store_oil()-1.0 66-HP-close_hood()-1.0
best_traces:
[66-HP-close_hood()-1.0]
best_metrics:
(2, 0, 4, 0)
