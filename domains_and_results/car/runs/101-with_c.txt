RUN N=101 With=True
INITIAL STATES
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
|| robot_init.at_robot = front 	ObsType.OBS 	loc=front
|| robot_init.at_human = front 	ObsType.OBS 	loc=front
|| robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
|| robot_init.washer = low 	ObsType.OBS 	loc=front
|| robot_init.oil = low 	ObsType.INF 	loc=front
|| robot_init.hood = open 	ObsType.OBS 	loc=front
|| robot_init.rear_light = new 	ObsType.INF 	loc=rear
|| robot_init.left_light = ok 	ObsType.INF 	loc=front
|| robot_init.right_light = todo 	ObsType.INF 	loc=front
| STATE human =
|| human_init.at_robot = front
|| human_init.at_human = front
|| human_init.at_oil_bottle = front
|| human_init.washer = low
|| human_init.oil = full
|| human_init.hood = open
|| human_init.rear_light = old
|| human_init.left_light = ok
|| human_init.right_light = todo
|________________________________________________________________________
Start first exploration
first node = 0.0 Flag.E Type.I#1, (robot BEGIN []) -1> (robot BEGIN []) prev=None next=[]

<@> picked node = 0.0 Flag.E Type.I#1, (robot BEGIN []) -1> (robot BEGIN []) prev=None next=[]
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = low 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = todo 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = todo
|________________________________________________________________________
human- Refine agenda
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [3-HA-Handling_lights() - 4-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 3-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	3-HA-Handling_lights() => [5-HA-Replacing_rear_light() - 6-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [7-HA-Checking_front_lights(), 8-HA-Replacing_rear_light(), 4-HA-Closing_hood()]
	5-HA-Replacing_rear_light() => [9-HP-go_behind_car()-0.0 - 10-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	7-HA-Checking_front_lights() => [11-HP-go_front_car()-0.0 - 12-HP-check_left_light()-0.0 - 13-HP-check_right_light()-0.0] : dec_checking_front_ligths
	11-HP-go_front_car()-0.0 => [11-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[12-HP-check_left_light()-0.0, 13-HP-check_right_light()-0.0, 8-HA-Replacing_rear_light(), 4-HA-Closing_hood()]
	12-HP-check_left_light()-0.0 => [12-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[13-HP-check_right_light()-0.0, 8-HA-Replacing_rear_light(), 4-HA-Closing_hood()]
	end 1
human- Refine agenda with r_beliefs
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [14-HA-Handling_lights() - 15-HA-Closing_hood()] : dec_car_maintenance_H
	14-HA-Handling_lights() => [16-HA-Checking_front_lights()] : dec_handling_lights_start_replace
	16-HA-Checking_front_lights() => [17-HP-go_front_car()-0.0 - 18-HP-check_left_light()-0.0 - 19-HP-check_right_light()-0.0] : dec_checking_front_ligths
	17-HP-go_front_car()-0.0 => [17-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[18-HP-check_left_light()-0.0, 19-HP-check_right_light()-0.0, 15-HA-Closing_hood()]
	18-HP-check_left_light()-0.0 => [18-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[19-HP-check_right_light()-0.0, 15-HA-Closing_hood()]
	end 0
Different number of decomposition
NEED of belief alignment!

# UPDATE belief divergences
	oil:None: H=full R=low
	rear_light:None: H=old R=new

Testing with 1 relevant divergence
divergence tested = oil:None: H=full R=low
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : 
	1-HA-Car_maintenance() => [20-HA-Handling_lights() - 21-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 20-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	20-HA-Handling_lights() => [22-HA-Replacing_rear_light() - 23-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [24-HA-Checking_front_lights(), 25-HA-Replacing_rear_light(), 21-HA-Closing_hood()]
	22-HA-Replacing_rear_light() => [26-HP-go_behind_car()-0.0 - 27-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	24-HA-Checking_front_lights() => [28-HP-go_front_car()-0.0 - 29-HP-check_left_light()-0.0 - 30-HP-check_right_light()-0.0] : dec_checking_front_ligths
	28-HP-go_front_car()-0.0 => [28-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[29-HP-check_left_light()-0.0, 30-HP-check_right_light()-0.0, 25-HA-Replacing_rear_light(), 21-HA-Closing_hood()]
	29-HP-check_left_light()-0.0 => [29-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[30-HP-check_right_light()-0.0, 25-HA-Replacing_rear_light(), 21-HA-Closing_hood()]
	end 1
Different number of decomposition
	divergence isn't relevant
divergence tested = rear_light:None: H=old R=new
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : 
	1-HA-Car_maintenance() => [31-HA-Handling_lights() - 32-HA-Closing_hood()] : dec_car_maintenance_H
	31-HA-Handling_lights() => [33-HA-Checking_front_lights()] : dec_handling_lights_start_replace
	33-HA-Checking_front_lights() => [34-HP-go_front_car()-0.0 - 35-HP-check_left_light()-0.0 - 36-HP-check_right_light()-0.0] : dec_checking_front_ligths
	34-HP-go_front_car()-0.0 => [34-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[35-HP-check_left_light()-0.0, 36-HP-check_right_light()-0.0, 32-HA-Closing_hood()]
	35-HP-check_left_light()-0.0 => [35-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[36-HP-check_right_light()-0.0, 32-HA-Closing_hood()]
	end 0
	divergence is relevant!
Relevant divergences to correct : 	rear_light:None: H=old R=new

COM: com action added = 37-RP-COM_ALIGN['rear_light-new']-3.0
human- Refine agenda
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [38-HA-Handling_lights() - 39-HA-Closing_hood()] : dec_car_maintenance_H
	38-HA-Handling_lights() => [40-HA-Checking_front_lights()] : dec_handling_lights_start_replace
	40-HA-Checking_front_lights() => [41-HP-go_front_car()-0.0 - 42-HP-check_left_light()-0.0 - 43-HP-check_right_light()-0.0] : dec_checking_front_ligths
	41-HP-go_front_car()-0.0 => [41-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[42-HP-check_left_light()-0.0, 43-HP-check_right_light()-0.0, 39-HA-Closing_hood()]
	42-HP-check_left_light()-0.0 => [42-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[43-HP-check_right_light()-0.0, 39-HA-Closing_hood()]
	end 0
human- Refine agenda with r_beliefs
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [44-HA-Handling_lights() - 45-HA-Closing_hood()] : dec_car_maintenance_H
	44-HA-Handling_lights() => [46-HA-Checking_front_lights()] : dec_handling_lights_start_replace
	46-HA-Checking_front_lights() => [47-HP-go_front_car()-0.0 - 48-HP-check_left_light()-0.0 - 49-HP-check_right_light()-0.0] : dec_checking_front_ligths
	47-HP-go_front_car()-0.0 => [47-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[48-HP-check_left_light()-0.0, 49-HP-check_right_light()-0.0, 45-HA-Closing_hood()]
	48-HP-check_left_light()-0.0 => [48-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[49-HP-check_right_light()-0.0, 45-HA-Closing_hood()]
	end 0
No relevant belief divergence for refinement
refinement = 
[
	origin: [43-HP-check_right_light()-0.0 - 39-HA-Closing_hood()]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 50-HP-check_right_light()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-39-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = low 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 0-RA-Car_maintenance()
decomp i= 0 : origin
	0-RA-Car_maintenance() => [51-RP-go_front_car()-0.0 - 52-RP-refill_washer()-0.0 - 53-RP-refill_oil()-0.0 - 54-RP-store_oil()-0.0] : dec_car_maintenance_R
	51-RP-go_front_car()-0.0 => [51-RP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[52-RP-refill_washer()-0.0, 53-RP-refill_oil()-0.0, 54-RP-store_oil()-0.0]
	end 0
refinement = 
[
	origin: [52-RP-refill_washer()-0.0 - 53-RP-refill_oil()-0.0 - 54-RP-store_oil()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 55-RP-refill_washer()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-53-RP-refill_oil()-0.0
||	-54-RP-store_oil()-0.0
| AGENDA human =
||	-39-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 39-HA-Closing_hood()
decomp i= 0 : origin
	39-HA-Closing_hood() => [56-HP-go_front_car()-0.0 - 57-HP-close_hood()-0.0] : dec_closing_hood
	56-HP-go_front_car()-0.0 => [56-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[57-HP-close_hood()-0.0]
	end 0
human- Refine agenda with r_beliefs
Task to refine: 39-HA-Closing_hood()
decomp i= 0 : origin
	39-HA-Closing_hood() => [58-HP-go_front_car()-0.0 - 59-HP-close_hood()-0.0] : dec_closing_hood
	58-HP-go_front_car()-0.0 => [58-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[59-HP-close_hood()-0.0]
	end 0
[93m57-HP-close_hood()-0.0 not applicable[0m
Operator isn't applicable with only one of the beliefs
NEED of belief alignment!

# UPDATE belief divergences
	oil:None: H=full R=low

Testing with 1 relevant divergence
divergence tested = oil:None: H=full R=low
Task to refine: 39-HA-Closing_hood()
decomp i= 0 : 
	39-HA-Closing_hood() => [60-HP-go_front_car()-0.0 - 61-HP-close_hood()-0.0] : dec_closing_hood
	60-HP-go_front_car()-0.0 => [60-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[61-HP-close_hood()-0.0]
	end 0
[93m61-HP-close_hood()-0.0 not applicable[0m
[93m61-HP-close_hood()-0.0 not applicable[0m
	divergence is relevant!
Relevant divergences to correct : 	oil:None: H=full R=low

COM: com action added = 62-RP-COM_ALIGN['oil-low']-3.0
human- Refine agenda
Task to refine: 39-HA-Closing_hood()
decomp i= 0 : origin
	39-HA-Closing_hood() => [63-HP-go_front_car()-0.0 - 64-HP-close_hood()-0.0] : dec_closing_hood
	63-HP-go_front_car()-0.0 => [63-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[64-HP-close_hood()-0.0]
	end 0
human- Refine agenda with r_beliefs
Task to refine: 39-HA-Closing_hood()
decomp i= 0 : origin
	39-HA-Closing_hood() => [65-HP-go_front_car()-0.0 - 66-HP-close_hood()-0.0] : dec_closing_hood
	65-HP-go_front_car()-0.0 => [65-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[66-HP-close_hood()-0.0]
	end 0
[93m64-HP-close_hood()-0.0 not applicable[0m
[93m64-HP-close_hood()-0.0 not applicable[0m
No relevant belief divergence for refinement
refinement = 
[
	origin: [64-HP-close_hood()-0.0]
]
Decomp OK
apply acting agent
[93m64-HP-close_hood()-0.0 not applicable[0m
close_hood not feasible...
applied refinement = 
next actions:
	- 67-HP-WAIT[]-2.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-53-RP-refill_oil()-0.0
||	-54-RP-store_oil()-0.0
| AGENDA human =
||	-64-HP-close_hood()-0.0
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 53-RP-refill_oil()-0.0
decomp i= 0 : origin
	end 0
refinement = 
[
	origin: [53-RP-refill_oil()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 68-RP-refill_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-54-RP-store_oil()-0.0
| AGENDA human =
||	-64-HP-close_hood()-0.0
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 64-HP-close_hood()-0.0
decomp i= 0 : origin
	end 0
human- Refine agenda with r_beliefs
Task to refine: 64-HP-close_hood()-0.0
decomp i= 0 : origin
	end 0
No relevant belief divergence for refinement
refinement = 
[
	origin: [64-HP-close_hood()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 69-HP-close_hood()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-54-RP-store_oil()-0.0
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 54-RP-store_oil()-0.0
decomp i= 0 : origin
	end 0
refinement = 
[
	origin: [54-RP-store_oil()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 70-RP-store_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
human- Refine agenda with r_beliefs
No relevant belief divergence for refinement
refinement = 
[
	origin: [DecompType.BOTH_AGENDAS_EMPTY]
]
BOTH_AGENDAS_EMPTY
applied refinement = 
next actions:

=> end explo
node explored = 7.0 Flag.E Type.F#1, (robot BEGIN []) -7> (robot store_oil ()) prev=None next=[]
new_e_flagged_nodes : 
	7.0 Flag.E Type.F#1, (robot BEGIN []) -7> (robot store_oil ()) prev=None next=[]
e_flagged_nodes :
	7.0 Flag.E Type.F#1, (robot BEGIN []) -7> (robot store_oil ()) prev=None next=[]
Ns before check = None
Nf = 7.0 Flag.E Type.F#1, (robot BEGIN []) -7> (robot store_oil ()) prev=None next=[]
new Ns!
Ns after check = 7.0 Flag.S Type.F#1, (robot BEGIN []) -7> (robot store_oil ()) prev=None next=[]
e_flagged_nodes after check solution:
	=> time spent first exploration = 47ms
Start refining u nodes
	=> time spent refining = 0ms
Total duration = 47ms
Non relevant div:
False
Plans:
37-RP-COM_ALIGN['rear_light-new']-3.0 50-HP-check_right_light()-1.0 55-RP-refill_washer()-1.0 62-RP-COM_ALIGN['oil-low']-3.0 67-HP-WAIT[]-2.0 68-RP-refill_oil()-1.0 69-HP-close_hood()-1.0 70-RP-store_oil()-1.0
best_traces:
[70-RP-store_oil()-1.0]
best_metrics:
(2, 1, 6, 0)
