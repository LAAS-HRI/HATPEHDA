RUN N=195 With=True
INITIAL STATES
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-cook()
||	-1-RA-come_clean_counter()
| AGENDA human =
||	-2-HA-cook()
|------------------------------------------------------------------------
| STATE robot =
|| robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
|| robot_init.at_human = room 	ObsType.OBS 	loc=room
|| robot_init.at_pasta = room 	ObsType.OBS 	loc=room
|| robot_init.salt_added = False 	ObsType.INF 	loc=kitchen
|| robot_init.pot_fire = off 	ObsType.OBS 	loc=kitchen
|| robot_init.counter_clean = False 	ObsType.INF 	loc=kichen
| STATE human =
|| human_init.at_robot = kitchen
|| human_init.at_human = room
|| human_init.at_pasta = kitchen
|| human_init.salt_added = False
|| human_init.pot_fire = on
|| human_init.counter_clean = False
|________________________________________________________________________
Start first exploration
SA: human assessed at_pasta <- room
first node = 0.0 Flag.E Type.I#1, (robot BEGIN []) -1> (robot BEGIN []) prev=None next=[]

<@> picked node = 0.0 Flag.E Type.I#1, (robot BEGIN []) -1> (robot BEGIN []) prev=None next=[]
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-cook()
||	-1-RA-come_clean_counter()
| AGENDA human =
||	-2-HA-cook()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = room 	ObsType.OBS 	loc=room
||robot_init.at_pasta = room 	ObsType.OBS 	loc=room
||robot_init.salt_added = False 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = off 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = False 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = kitchen
||human_init.at_human = room
||human_init.at_pasta = room
||human_init.salt_added = False
||human_init.pot_fire = on
||human_init.counter_clean = False
|________________________________________________________________________
human- Refine agenda
Task to refine: 2-HA-cook()
decomp i= 0 : origin
	multiple decs for 2-HA-cook():  dec_cook_H_1  dec_cook_H_2 
	2-HA-cook() => [4-HA-get_pasta() - 5-HA-come_add_salt() - 6-HA-come_pour_pasta()] : dec_cook_H_1
		decomposition 1 : dec_cook_H_2 created : [7-HP-add_salt()-0.0, 8-HA-get_pasta(), 9-HA-come_pour_pasta()]
	4-HA-get_pasta() => [10-HP-grab_pasta()-0.0] : dec_get_pasta_close
	end 0
decomp i= 1 : dec_cook_H_2
	end 1
human- Refine agenda with r_beliefs
Task to refine: 2-HA-cook()
decomp i= 0 : origin
	multiple decs for 2-HA-cook():  dec_cook_H_1  dec_cook_H_2 
	2-HA-cook() => [11-HA-get_pasta() - 12-HA-come_add_salt() - 13-HA-come_pour_pasta()] : dec_cook_H_1
		decomposition 1 : dec_cook_H_2 created : [14-HP-add_salt()-0.0, 15-HA-get_pasta(), 16-HA-come_pour_pasta()]
	11-HA-get_pasta() => [17-HP-grab_pasta()-0.0] : dec_get_pasta_close
	end 0
decomp i= 1 : dec_cook_H_2
	end 1
No relevant belief divergence for refinement
refinement = 
[
	dec_cook_H_1: [10-HP-grab_pasta()-0.0 - 5-HA-come_add_salt() - 6-HA-come_pour_pasta()]
	dec_cook_H_2: [7-HP-add_salt()-0.0 - 8-HA-get_pasta() - 9-HA-come_pour_pasta()]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 18-HP-grab_pasta()-1.0
	- 19-HP-add_salt()-1.0

=> end explo
node explored = 0.0 Flag.F Type.H#1, (robot BEGIN []) -1> (robot BEGIN []) prev=None next=[#2 #3]
new_e_flagged_nodes : 
	1.0 Flag.E Type.I#2, (human grab_pasta ()) -1> (human grab_pasta ()) prev=#1 next=[]
	1.0 Flag.E Type.I#3, (human add_salt ()) -1> (human add_salt ()) prev=#1 next=[]
e_flagged_nodes :
	1.0 Flag.E Type.I#2, (human grab_pasta ()) -1> (human grab_pasta ()) prev=#1 next=[]
	1.0 Flag.E Type.I#3, (human add_salt ()) -1> (human add_salt ()) prev=#1 next=[]
Ns before check = None
Nf = None
Ns after check = None
e_flagged_nodes after check solution:
	1.0 Flag.E Type.I#2, (human grab_pasta ()) -1> (human grab_pasta ()) prev=#1 next=[]
	1.0 Flag.E Type.I#3, (human add_salt ()) -1> (human add_salt ()) prev=#1 next=[]

<@> picked node = 1.0 Flag.E Type.I#2, (human grab_pasta ()) -1> (human grab_pasta ()) prev=#1 next=[]
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-cook()
||	-1-RA-come_clean_counter()
| AGENDA human =
||	-5-HA-come_add_salt()
||	-6-HA-come_pour_pasta()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = room 	ObsType.OBS 	loc=room
||robot_init.at_pasta = human 	ObsType.OBS 	loc=room
||robot_init.salt_added = False 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = off 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = False 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = kitchen
||human_init.at_human = room
||human_init.at_pasta = human
||human_init.salt_added = False
||human_init.pot_fire = on
||human_init.counter_clean = False
|________________________________________________________________________
robot- Refine agenda
Task to refine: 0-RA-cook()
decomp i= 0 : dec_cook_H_1
	multiple decs for 0-RA-cook():  dec_cook_R_1  dec_cook_R_2 
	0-RA-cook() => [20-RA-come_add_salt() - 21-RA-come_turn_on_pot_fire()] : dec_cook_R_1
		decomposition 1 : dec_cook_R_2 created : [22-RA-come_turn_on_pot_fire(), 23-RA-come_add_salt()]
	20-RA-come_add_salt() => [24-RP-add_salt()-0.0] : dec_come_add_salt_close
	end 0
decomp i= 1 : dec_cook_R_2
	22-RA-come_turn_on_pot_fire() => [25-RP-turn_on_pot_fire()-0.0] : dec_come_turn_pot_fire_on_close
	end 1
refinement = 
[
	dec_cook_R_1: [24-RP-add_salt()-0.0 - 21-RA-come_turn_on_pot_fire()]
	dec_cook_R_2: [25-RP-turn_on_pot_fire()-0.0 - 23-RA-come_add_salt()]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
Decomp OK
[93malready done[0m
[93m25-RP-turn_on_pot_fire()-0.0 not applicable[0m
Operator isn't applicable with only one of the beliefs

# UPDATE belief divergences
	pot_fire:None: H=on R=off

Testing with 1 relevant divergence
divergence tested = pot_fire:None: H=on R=off
Task to refine: 5-HA-come_add_salt()
decomp i= 0 : 
	5-HA-come_add_salt() => [27-HP-move('kitchen',)-0.0 - 28-HP-add_salt()-0.0] : dec_come_add_salt_far
	end 0
	divergence is relevant!
Relevant divergences to correct : 	pot_fire:None: H=on R=off

COM: com action added eff = 29-RP-COM_ALIGN['pot_fire-off']-3.0
robot- Refine agenda
Task to refine: 0-RA-cook()
decomp i= 0 : dec_cook_H_1
	multiple decs for 0-RA-cook():  dec_cook_R_1  dec_cook_R_2 
	0-RA-cook() => [30-RA-come_add_salt() - 31-RA-come_turn_on_pot_fire()] : dec_cook_R_1
		decomposition 1 : dec_cook_R_2 created : [32-RA-come_turn_on_pot_fire(), 33-RA-come_add_salt()]
	30-RA-come_add_salt() => [34-RP-add_salt()-0.0] : dec_come_add_salt_close
	end 0
decomp i= 1 : dec_cook_R_2
	32-RA-come_turn_on_pot_fire() => [35-RP-turn_on_pot_fire()-0.0] : dec_come_turn_pot_fire_on_close
	end 1
refinement = 
[
	dec_cook_R_1: [34-RP-add_salt()-0.0 - 31-RA-come_turn_on_pot_fire()]
	dec_cook_R_2: [35-RP-turn_on_pot_fire()-0.0 - 33-RA-come_add_salt()]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 36-RP-add_salt()-1.0
	- 37-RP-turn_on_pot_fire()-1.0

=> end explo
node explored = 1.0 Flag.F Type.H#2, (human grab_pasta ()) -1> (robot COM_ALIGN ['pot_fire-off']) prev=#1 next=[#4 #5]
new_e_flagged_nodes : 
	2.0 Flag.E Type.I#4, (robot add_salt ()) -1> (robot add_salt ()) prev=#2 next=[]
	2.0 Flag.E Type.I#5, (robot turn_on_pot_fire ()) -1> (robot turn_on_pot_fire ()) prev=#2 next=[]
e_flagged_nodes :
	1.0 Flag.E Type.I#3, (human add_salt ()) -1> (human add_salt ()) prev=#1 next=[]
	2.0 Flag.E Type.I#4, (robot add_salt ()) -1> (robot add_salt ()) prev=#2 next=[]
	2.0 Flag.E Type.I#5, (robot turn_on_pot_fire ()) -1> (robot turn_on_pot_fire ()) prev=#2 next=[]
Ns before check = None
Nf = None
Ns after check = None
e_flagged_nodes after check solution:
	1.0 Flag.E Type.I#3, (human add_salt ()) -1> (human add_salt ()) prev=#1 next=[]
	2.0 Flag.E Type.I#4, (robot add_salt ()) -1> (robot add_salt ()) prev=#2 next=[]
	2.0 Flag.E Type.I#5, (robot turn_on_pot_fire ()) -1> (robot turn_on_pot_fire ()) prev=#2 next=[]

<@> picked node = 1.0 Flag.E Type.I#3, (human add_salt ()) -1> (human add_salt ()) prev=#1 next=[]
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-cook()
||	-1-RA-come_clean_counter()
| AGENDA human =
||	-8-HA-get_pasta()
||	-9-HA-come_pour_pasta()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = room 	ObsType.OBS 	loc=room
||robot_init.at_pasta = room 	ObsType.OBS 	loc=room
||robot_init.salt_added = True 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = off 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = False 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = kitchen
||human_init.at_human = room
||human_init.at_pasta = room
||human_init.salt_added = True
||human_init.pot_fire = on
||human_init.counter_clean = False
|________________________________________________________________________
robot- Refine agenda
Task to refine: 0-RA-cook()
decomp i= 0 : dec_cook_H_2
	0-RA-cook() => [38-RA-come_turn_on_pot_fire()] : dec_cook_R_1
	38-RA-come_turn_on_pot_fire() => [39-RP-turn_on_pot_fire()-0.0] : dec_come_turn_pot_fire_on_close
	end 0
refinement = 
[
	dec_cook_H_2: [39-RP-turn_on_pot_fire()-0.0]
]
Decomp OK
[93malready done[0m
[93m39-RP-turn_on_pot_fire()-0.0 not applicable[0m
Operator isn't applicable with only one of the beliefs

# UPDATE belief divergences
	pot_fire:None: H=on R=off

Testing with 1 relevant divergence
divergence tested = pot_fire:None: H=on R=off
Task to refine: 8-HA-get_pasta()
decomp i= 0 : 
	8-HA-get_pasta() => [40-HP-grab_pasta()-0.0] : dec_get_pasta_close
	end 0
	divergence is relevant!
Relevant divergences to correct : 	pot_fire:None: H=on R=off

COM: com action added eff = 41-RP-COM_ALIGN['pot_fire-off']-3.0
robot- Refine agenda
Task to refine: 0-RA-cook()
decomp i= 0 : dec_cook_H_2
	0-RA-cook() => [42-RA-come_turn_on_pot_fire()] : dec_cook_R_1
	42-RA-come_turn_on_pot_fire() => [43-RP-turn_on_pot_fire()-0.0] : dec_come_turn_pot_fire_on_close
	end 0
refinement = 
[
	dec_cook_H_2: [43-RP-turn_on_pot_fire()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 44-RP-turn_on_pot_fire()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-1-RA-come_clean_counter()
| AGENDA human =
||	-8-HA-get_pasta()
||	-9-HA-come_pour_pasta()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = room 	ObsType.OBS 	loc=room
||robot_init.at_pasta = room 	ObsType.OBS 	loc=room
||robot_init.salt_added = True 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = on 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = False 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = kitchen
||human_init.at_human = room
||human_init.at_pasta = room
||human_init.salt_added = True
||human_init.pot_fire = off
||human_init.counter_clean = False
|________________________________________________________________________
human- Refine agenda
Task to refine: 8-HA-get_pasta()
decomp i= 0 : dec_cook_H_2
	8-HA-get_pasta() => [45-HP-grab_pasta()-0.0] : dec_get_pasta_close
	end 0
human- Refine agenda with r_beliefs
Task to refine: 8-HA-get_pasta()
decomp i= 0 : dec_cook_H_2
	8-HA-get_pasta() => [46-HP-grab_pasta()-0.0] : dec_get_pasta_close
	end 0
No relevant belief divergence for refinement
refinement = 
[
	dec_cook_H_2: [45-HP-grab_pasta()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 47-HP-grab_pasta()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-1-RA-come_clean_counter()
| AGENDA human =
||	-9-HA-come_pour_pasta()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = room 	ObsType.OBS 	loc=room
||robot_init.at_pasta = human 	ObsType.OBS 	loc=room
||robot_init.salt_added = True 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = on 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = False 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = kitchen
||human_init.at_human = room
||human_init.at_pasta = human
||human_init.salt_added = True
||human_init.pot_fire = off
||human_init.counter_clean = False
|________________________________________________________________________
robot- Refine agenda
Task to refine: 1-RA-come_clean_counter()
decomp i= 0 : dec_cook_H_2
	1-RA-come_clean_counter() => [48-RP-clean_counter()-0.0] : dec_come_clean_close
	end 0
refinement = 
[
	dec_cook_H_2: [48-RP-clean_counter()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 49-RP-clean_counter()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-9-HA-come_pour_pasta()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = room 	ObsType.OBS 	loc=room
||robot_init.at_pasta = human 	ObsType.OBS 	loc=room
||robot_init.salt_added = True 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = on 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = True 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = kitchen
||human_init.at_human = room
||human_init.at_pasta = human
||human_init.salt_added = True
||human_init.pot_fire = off
||human_init.counter_clean = False
|________________________________________________________________________
human- Refine agenda
Task to refine: 9-HA-come_pour_pasta()
decomp i= 0 : dec_cook_H_2
	9-HA-come_pour_pasta() => [50-HP-move('kitchen',)-0.0 - 51-HP-pour_pasta()-0.0] : dec_come_pour_pasta_far
	end 0
human- Refine agenda with r_beliefs
Task to refine: 9-HA-come_pour_pasta()
decomp i= 0 : dec_cook_H_2
	9-HA-come_pour_pasta() => [52-HP-move('kitchen',)-0.0 - 53-HP-pour_pasta()-0.0] : dec_come_pour_pasta_far
	end 0
No relevant belief divergence for refinement
refinement = 
[
	dec_cook_H_2: [50-HP-move('kitchen',)-0.0 - 51-HP-pour_pasta()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
SA: human assessed pot_fire <- on
applied refinement = 
next actions:
	- 54-HP-move('kitchen',)-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-51-HP-pour_pasta()-0.0
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_pasta = human 	ObsType.OBS 	loc=kitchen
||robot_init.salt_added = True 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = on 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = True 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = kitchen
||human_init.at_human = kitchen
||human_init.at_pasta = human
||human_init.salt_added = True
||human_init.pot_fire = on
||human_init.counter_clean = False
|________________________________________________________________________
robot- Refine agenda
refinement = 
[
	dec_cook_H_2: [DecompType.AGENDA_EMPTY]
]
AGENDA_EMPTY => IDLE added
applied refinement = 
next actions:
	- 55-RP-IDLE[]-0.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-51-HP-pour_pasta()-0.0
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_pasta = human 	ObsType.OBS 	loc=kitchen
||robot_init.salt_added = True 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = on 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = True 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = kitchen
||human_init.at_human = kitchen
||human_init.at_pasta = human
||human_init.salt_added = True
||human_init.pot_fire = on
||human_init.counter_clean = False
|________________________________________________________________________
human- Refine agenda
Task to refine: 51-HP-pour_pasta()-0.0
decomp i= 0 : dec_cook_H_2
	end 0
human- Refine agenda with r_beliefs
Task to refine: 51-HP-pour_pasta()-0.0
decomp i= 0 : dec_cook_H_2
	end 0
No relevant belief divergence for refinement
refinement = 
[
	dec_cook_H_2: [51-HP-pour_pasta()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 56-HP-pour_pasta()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_pasta = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.salt_added = True 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = on 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = True 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = kitchen
||human_init.at_human = kitchen
||human_init.at_pasta = kitchen
||human_init.salt_added = True
||human_init.pot_fire = on
||human_init.counter_clean = False
|________________________________________________________________________
robot- Refine agenda
refinement = 
[
	dec_cook_H_2: [DecompType.BOTH_AGENDAS_EMPTY]
]
BOTH_AGENDAS_EMPTY
applied refinement = 
next actions:

=> end explo
node explored = 6.0 Flag.E Type.F#3, (human add_salt ()) -7> (human pour_pasta ()) prev=#1 next=[]
new_e_flagged_nodes : 
	6.0 Flag.E Type.F#3, (human add_salt ()) -7> (human pour_pasta ()) prev=#1 next=[]
e_flagged_nodes :
	2.0 Flag.E Type.I#4, (robot add_salt ()) -1> (robot add_salt ()) prev=#2 next=[]
	2.0 Flag.E Type.I#5, (robot turn_on_pot_fire ()) -1> (robot turn_on_pot_fire ()) prev=#2 next=[]
	6.0 Flag.E Type.F#3, (human add_salt ()) -7> (human pour_pasta ()) prev=#1 next=[]
Ns before check = None
Nf = 6.0 Flag.E Type.F#3, (human add_salt ()) -7> (human pour_pasta ()) prev=#1 next=[]
new Ns!
Ns after check = 6.0 Flag.S Type.F#3, (human add_salt ()) -7> (human pour_pasta ()) prev=#1 next=[]
e_flagged_nodes after check solution:
	2.0 Flag.E Type.I#4, (robot add_salt ()) -1> (robot add_salt ()) prev=#2 next=[]
	2.0 Flag.E Type.I#5, (robot turn_on_pot_fire ()) -1> (robot turn_on_pot_fire ()) prev=#2 next=[]

<@> picked node = 2.0 Flag.E Type.I#4, (robot add_salt ()) -1> (robot add_salt ()) prev=#2 next=[]
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-31-RA-come_turn_on_pot_fire()
||	-1-RA-come_clean_counter()
| AGENDA human =
||	-5-HA-come_add_salt()
||	-6-HA-come_pour_pasta()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = room 	ObsType.OBS 	loc=room
||robot_init.at_pasta = human 	ObsType.OBS 	loc=room
||robot_init.salt_added = True 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = off 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = False 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = kitchen
||human_init.at_human = room
||human_init.at_pasta = human
||human_init.salt_added = False
||human_init.pot_fire = off
||human_init.counter_clean = False
|________________________________________________________________________
human- Refine agenda
Task to refine: 5-HA-come_add_salt()
decomp i= 0 : dec_cook_R_1
	5-HA-come_add_salt() => [57-HP-move('kitchen',)-0.0 - 58-HP-add_salt()-0.0] : dec_come_add_salt_far
	end 0
human- Refine agenda with r_beliefs
Task to refine: 5-HA-come_add_salt()
decomp i= 0 : dec_cook_R_1
	5-HA-come_add_salt() => [59-HP-move('kitchen',)-0.0 - 60-HP-add_salt()-0.0] : dec_come_add_salt_far
	end 0
No relevant belief divergence for refinement
refinement = 
[
	dec_cook_R_1: [57-HP-move('kitchen',)-0.0 - 58-HP-add_salt()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 61-HP-move('kitchen',)-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-31-RA-come_turn_on_pot_fire()
||	-1-RA-come_clean_counter()
| AGENDA human =
||	-58-HP-add_salt()-0.0
||	-6-HA-come_pour_pasta()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_pasta = human 	ObsType.OBS 	loc=kitchen
||robot_init.salt_added = True 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = off 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = False 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = kitchen
||human_init.at_human = kitchen
||human_init.at_pasta = human
||human_init.salt_added = False
||human_init.pot_fire = off
||human_init.counter_clean = False
|________________________________________________________________________
robot- Refine agenda
Task to refine: 31-RA-come_turn_on_pot_fire()
decomp i= 0 : dec_cook_R_1
	31-RA-come_turn_on_pot_fire() => [62-RP-turn_on_pot_fire()-0.0] : dec_come_turn_pot_fire_on_close
	end 0
refinement = 
[
	dec_cook_R_1: [62-RP-turn_on_pot_fire()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 63-RP-turn_on_pot_fire()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-1-RA-come_clean_counter()
| AGENDA human =
||	-58-HP-add_salt()-0.0
||	-6-HA-come_pour_pasta()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_pasta = human 	ObsType.OBS 	loc=kitchen
||robot_init.salt_added = True 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = on 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = False 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = kitchen
||human_init.at_human = kitchen
||human_init.at_pasta = human
||human_init.salt_added = False
||human_init.pot_fire = on
||human_init.counter_clean = False
|________________________________________________________________________
human- Refine agenda
Task to refine: 58-HP-add_salt()-0.0
decomp i= 0 : dec_cook_R_1
	end 0
human- Refine agenda with r_beliefs
Task to refine: 58-HP-add_salt()-0.0
decomp i= 0 : dec_cook_R_1
	58-HP-add_salt()-0.0 => [58-HP-add_salt()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 6-HA-come_pour_pasta()
	6-HA-come_pour_pasta() => [64-HP-pour_pasta()-0.0] : dec_come_pour_pasta_close
	end 0
Not same task name
NEED of belief alignment!

# UPDATE belief divergences
	salt_added:None: H=False R=True

Testing with 1 relevant divergence
divergence tested = salt_added:None: H=False R=True
Task to refine: 58-HP-add_salt()-0.0
decomp i= 0 : 
	58-HP-add_salt()-0.0 => [58-HP-add_salt()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 6-HA-come_pour_pasta()
	6-HA-come_pour_pasta() => [65-HP-pour_pasta()-0.0] : dec_come_pour_pasta_close
	end 0
	divergence is relevant!
Relevant divergences to correct : 	salt_added:None: H=False R=True

COM: com action added = 66-RP-COM_ALIGN['salt_added-True']-3.0
human- Refine agenda
Task to refine: 58-HP-add_salt()-0.0
decomp i= 0 : dec_cook_R_1
	58-HP-add_salt()-0.0 => [58-HP-add_salt()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 6-HA-come_pour_pasta()
	6-HA-come_pour_pasta() => [67-HP-pour_pasta()-0.0] : dec_come_pour_pasta_close
	end 0
human- Refine agenda with r_beliefs
Task to refine: 58-HP-add_salt()-0.0
decomp i= 0 : dec_cook_R_1
	58-HP-add_salt()-0.0 => [58-HP-add_salt()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 6-HA-come_pour_pasta()
	6-HA-come_pour_pasta() => [68-HP-pour_pasta()-0.0] : dec_come_pour_pasta_close
	end 0
No relevant belief divergence for refinement
refinement = 
[
	dec_cook_R_1: [67-HP-pour_pasta()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
Trying to create delaying branch
rel_divs= 	salt_added:None: H=False R=True

	div not initial!
		testing n= 4.0 Flag.E Type.I#4, (robot add_salt ()) -3> (robot COM_ALIGN ['salt_added-True']) prev=#2 next=[]
	div node identified :  4.0 Flag.E Type.I#4, (robot add_salt ()) -3> (robot COM_ALIGN ['salt_added-True']) prev=#2 next=[]
	testing action= 36-RP-add_salt()-1.0
		R-Agenda in [31-RA-come_turn_on_pot_fire(), 1-RA-come_clean_counter()]
		H-Agenda in [5-HA-come_add_salt(), 6-HA-come_pour_pasta()]
before acting
after acting
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-cook()
||	-1-RA-come_clean_counter()
| AGENDA human =
||	-5-HA-come_add_salt()
||	-6-HA-come_pour_pasta()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = room 	ObsType.OBS 	loc=room
||robot_init.at_pasta = human 	ObsType.OBS 	loc=room
||robot_init.salt_added = True 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = off 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = False 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = kitchen
||human_init.at_human = room
||human_init.at_pasta = human
||human_init.salt_added = False
||human_init.pot_fire = off
||human_init.counter_clean = False
|________________________________________________________________________
after other
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-cook()
||	-1-RA-come_clean_counter()
| AGENDA human =
||	-5-HA-come_add_salt()
||	-6-HA-come_pour_pasta()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = room 	ObsType.OBS 	loc=room
||robot_init.at_pasta = human 	ObsType.OBS 	loc=room
||robot_init.salt_added = True 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = off 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = False 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = kitchen
||human_init.at_human = room
||human_init.at_pasta = human
||human_init.salt_added = False
||human_init.pot_fire = off
||human_init.counter_clean = False
|________________________________________________________________________
agendas:
div_action.agent_agendas[CM.g_human_name]= [5-HA-come_add_salt(), 6-HA-come_pour_pasta()]
div_action.agent_agendas[CM.g_robot_name]= [31-RA-come_turn_on_pot_fire(), 1-RA-come_clean_counter()]
	div action identified :  36-RP-add_salt()-1.0
__________________________________________________________________________
| AGENDA robot =
||	-36-RP-add_salt()-1.0
||	-31-RA-come_turn_on_pot_fire()
||	-1-RA-come_clean_counter()
| AGENDA human =
||	-5-HA-come_add_salt()
||	-6-HA-come_pour_pasta()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = room 	ObsType.OBS 	loc=room
||robot_init.at_pasta = human 	ObsType.OBS 	loc=room
||robot_init.salt_added = False 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = off 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = False 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = kitchen
||human_init.at_human = room
||human_init.at_pasta = human
||human_init.salt_added = False
||human_init.pot_fire = off
||human_init.counter_clean = False
|________________________________________________________________________
	Branching:
	delay_node created =>  4.0 Flag.E Type.D#6, (robot DELAY []) -1> (robot DELAY []) prev=#2 next=[]
applied refinement = 
next actions:
	- 69-HP-pour_pasta()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-1-RA-come_clean_counter()
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_pasta = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.salt_added = True 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = on 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = False 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = kitchen
||human_init.at_human = kitchen
||human_init.at_pasta = kitchen
||human_init.salt_added = True
||human_init.pot_fire = on
||human_init.counter_clean = False
|________________________________________________________________________
robot- Refine agenda
Task to refine: 1-RA-come_clean_counter()
decomp i= 0 : dec_cook_R_1
	1-RA-come_clean_counter() => [71-RP-clean_counter()-0.0] : dec_come_clean_close
	end 0
refinement = 
[
	dec_cook_R_1: [71-RP-clean_counter()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 72-RP-clean_counter()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_pasta = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.salt_added = True 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = on 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = True 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = kitchen
||human_init.at_human = kitchen
||human_init.at_pasta = kitchen
||human_init.salt_added = True
||human_init.pot_fire = on
||human_init.counter_clean = True
|________________________________________________________________________
human- Refine agenda
human- Refine agenda with r_beliefs
No relevant belief divergence for refinement
refinement = 
[
	dec_cook_R_1: [DecompType.BOTH_AGENDAS_EMPTY]
]
BOTH_AGENDAS_EMPTY
applied refinement = 
next actions:

=> end explo
node explored = 6.0 Flag.E Type.F#4, (robot add_salt ()) -5> (robot clean_counter ()) prev=#2 next=[]
new_e_flagged_nodes : 
	4.0 Flag.E Type.D#6, (robot DELAY []) -1> (robot DELAY []) prev=#2 next=[]
	6.0 Flag.E Type.F#4, (robot add_salt ()) -5> (robot clean_counter ()) prev=#2 next=[]
e_flagged_nodes :
	2.0 Flag.E Type.I#5, (robot turn_on_pot_fire ()) -1> (robot turn_on_pot_fire ()) prev=#2 next=[]
	4.0 Flag.E Type.D#6, (robot DELAY []) -1> (robot DELAY []) prev=#2 next=[]
	6.0 Flag.E Type.F#4, (robot add_salt ()) -5> (robot clean_counter ()) prev=#2 next=[]
Ns before check = 6.0 Flag.S Type.F#3, (human add_salt ()) -7> (human pour_pasta ()) prev=#1 next=[]
Nf = 6.0 Flag.E Type.F#4, (robot add_salt ()) -5> (robot clean_counter ()) prev=#2 next=[]
Ns after check = 6.0 Flag.S Type.F#3, (human add_salt ()) -7> (human pour_pasta ()) prev=#1 next=[]
e_flagged_nodes after check solution:
	2.0 Flag.E Type.I#5, (robot turn_on_pot_fire ()) -1> (robot turn_on_pot_fire ()) prev=#2 next=[]
	4.0 Flag.E Type.D#6, (robot DELAY []) -1> (robot DELAY []) prev=#2 next=[]

<@> picked node = 2.0 Flag.E Type.I#5, (robot turn_on_pot_fire ()) -1> (robot turn_on_pot_fire ()) prev=#2 next=[]
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-33-RA-come_add_salt()
||	-1-RA-come_clean_counter()
| AGENDA human =
||	-5-HA-come_add_salt()
||	-6-HA-come_pour_pasta()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = room 	ObsType.OBS 	loc=room
||robot_init.at_pasta = human 	ObsType.OBS 	loc=room
||robot_init.salt_added = False 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = on 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = False 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = kitchen
||human_init.at_human = room
||human_init.at_pasta = human
||human_init.salt_added = False
||human_init.pot_fire = off
||human_init.counter_clean = False
|________________________________________________________________________
human- Refine agenda
Task to refine: 5-HA-come_add_salt()
decomp i= 0 : dec_cook_R_2
	5-HA-come_add_salt() => [73-HP-move('kitchen',)-0.0 - 74-HP-add_salt()-0.0] : dec_come_add_salt_far
	end 0
human- Refine agenda with r_beliefs
Task to refine: 5-HA-come_add_salt()
decomp i= 0 : dec_cook_R_2
	5-HA-come_add_salt() => [75-HP-move('kitchen',)-0.0 - 76-HP-add_salt()-0.0] : dec_come_add_salt_far
	end 0
No relevant belief divergence for refinement
refinement = 
[
	dec_cook_R_2: [73-HP-move('kitchen',)-0.0 - 74-HP-add_salt()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
SA: human assessed pot_fire <- on
applied refinement = 
next actions:
	- 77-HP-move('kitchen',)-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-33-RA-come_add_salt()
||	-1-RA-come_clean_counter()
| AGENDA human =
||	-74-HP-add_salt()-0.0
||	-6-HA-come_pour_pasta()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_pasta = human 	ObsType.OBS 	loc=kitchen
||robot_init.salt_added = False 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = on 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = False 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = kitchen
||human_init.at_human = kitchen
||human_init.at_pasta = human
||human_init.salt_added = False
||human_init.pot_fire = on
||human_init.counter_clean = False
|________________________________________________________________________
robot- Refine agenda
Task to refine: 33-RA-come_add_salt()
decomp i= 0 : dec_cook_R_2
	33-RA-come_add_salt() => [78-RP-add_salt()-0.0] : dec_come_add_salt_close
	end 0
refinement = 
[
	dec_cook_R_2: [78-RP-add_salt()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 79-RP-add_salt()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-1-RA-come_clean_counter()
| AGENDA human =
||	-74-HP-add_salt()-0.0
||	-6-HA-come_pour_pasta()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_pasta = human 	ObsType.OBS 	loc=kitchen
||robot_init.salt_added = True 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = on 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = False 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = kitchen
||human_init.at_human = kitchen
||human_init.at_pasta = human
||human_init.salt_added = True
||human_init.pot_fire = on
||human_init.counter_clean = False
|________________________________________________________________________
human- Refine agenda
Task to refine: 74-HP-add_salt()-0.0
decomp i= 0 : dec_cook_R_2
	74-HP-add_salt()-0.0 => [74-HP-add_salt()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 6-HA-come_pour_pasta()
	6-HA-come_pour_pasta() => [80-HP-pour_pasta()-0.0] : dec_come_pour_pasta_close
	end 0
human- Refine agenda with r_beliefs
Task to refine: 74-HP-add_salt()-0.0
decomp i= 0 : dec_cook_R_2
	74-HP-add_salt()-0.0 => [74-HP-add_salt()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 6-HA-come_pour_pasta()
	6-HA-come_pour_pasta() => [81-HP-pour_pasta()-0.0] : dec_come_pour_pasta_close
	end 0
No relevant belief divergence for refinement
refinement = 
[
	dec_cook_R_2: [80-HP-pour_pasta()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 82-HP-pour_pasta()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-1-RA-come_clean_counter()
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_pasta = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.salt_added = True 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = on 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = False 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = kitchen
||human_init.at_human = kitchen
||human_init.at_pasta = kitchen
||human_init.salt_added = True
||human_init.pot_fire = on
||human_init.counter_clean = False
|________________________________________________________________________
robot- Refine agenda
Task to refine: 1-RA-come_clean_counter()
decomp i= 0 : dec_cook_R_2
	1-RA-come_clean_counter() => [83-RP-clean_counter()-0.0] : dec_come_clean_close
	end 0
refinement = 
[
	dec_cook_R_2: [83-RP-clean_counter()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 84-RP-clean_counter()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_pasta = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.salt_added = True 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = on 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = True 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = kitchen
||human_init.at_human = kitchen
||human_init.at_pasta = kitchen
||human_init.salt_added = True
||human_init.pot_fire = on
||human_init.counter_clean = True
|________________________________________________________________________
human- Refine agenda
human- Refine agenda with r_beliefs
No relevant belief divergence for refinement
refinement = 
[
	dec_cook_R_2: [DecompType.BOTH_AGENDAS_EMPTY]
]
BOTH_AGENDAS_EMPTY
applied refinement = 
next actions:

=> end explo
node explored = 6.0 Flag.E Type.F#5, (robot turn_on_pot_fire ()) -5> (robot clean_counter ()) prev=#2 next=[]
new_e_flagged_nodes : 
	6.0 Flag.E Type.F#5, (robot turn_on_pot_fire ()) -5> (robot clean_counter ()) prev=#2 next=[]
e_flagged_nodes :
	4.0 Flag.E Type.D#6, (robot DELAY []) -1> (robot DELAY []) prev=#2 next=[]
	6.0 Flag.E Type.F#5, (robot turn_on_pot_fire ()) -5> (robot clean_counter ()) prev=#2 next=[]
Ns before check = 6.0 Flag.S Type.F#3, (human add_salt ()) -7> (human pour_pasta ()) prev=#1 next=[]
Nf = 6.0 Flag.E Type.F#5, (robot turn_on_pot_fire ()) -5> (robot clean_counter ()) prev=#2 next=[]
Ns after check = 6.0 Flag.S Type.F#3, (human add_salt ()) -7> (human pour_pasta ()) prev=#1 next=[]
e_flagged_nodes after check solution:
	4.0 Flag.E Type.D#6, (robot DELAY []) -1> (robot DELAY []) prev=#2 next=[]

<@> picked node = 4.0 Flag.E Type.D#6, (robot DELAY []) -1> (robot DELAY []) prev=#2 next=[]
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-36-RP-add_salt()-1.0
||	-31-RA-come_turn_on_pot_fire()
||	-1-RA-come_clean_counter()
| AGENDA human =
||	-5-HA-come_add_salt()
||	-6-HA-come_pour_pasta()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = room 	ObsType.OBS 	loc=room
||robot_init.at_pasta = human 	ObsType.OBS 	loc=room
||robot_init.salt_added = False 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = off 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = False 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = kitchen
||human_init.at_human = room
||human_init.at_pasta = human
||human_init.salt_added = False
||human_init.pot_fire = off
||human_init.counter_clean = False
|________________________________________________________________________
human- Refine agenda
Task to refine: 5-HA-come_add_salt()
decomp i= 0 : delaying
	5-HA-come_add_salt() => [85-HP-move('kitchen',)-0.0 - 86-HP-add_salt()-0.0] : dec_come_add_salt_far
	end 0
human- Refine agenda with r_beliefs
Task to refine: 5-HA-come_add_salt()
decomp i= 0 : delaying
	5-HA-come_add_salt() => [87-HP-move('kitchen',)-0.0 - 88-HP-add_salt()-0.0] : dec_come_add_salt_far
	end 0
No relevant belief divergence for refinement
refinement = 
[
	delaying: [85-HP-move('kitchen',)-0.0 - 86-HP-add_salt()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 89-HP-move('kitchen',)-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-36-RP-add_salt()-1.0
||	-31-RA-come_turn_on_pot_fire()
||	-1-RA-come_clean_counter()
| AGENDA human =
||	-86-HP-add_salt()-0.0
||	-6-HA-come_pour_pasta()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_pasta = human 	ObsType.OBS 	loc=kitchen
||robot_init.salt_added = False 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = off 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = False 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = kitchen
||human_init.at_human = kitchen
||human_init.at_pasta = human
||human_init.salt_added = False
||human_init.pot_fire = off
||human_init.counter_clean = False
|________________________________________________________________________
robot- Refine agenda
Task to refine: 36-RP-add_salt()-1.0
decomp i= 0 : delaying
	end 0
refinement = 
[
	delaying: [36-RP-add_salt()-1.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 90-RP-add_salt()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-31-RA-come_turn_on_pot_fire()
||	-1-RA-come_clean_counter()
| AGENDA human =
||	-86-HP-add_salt()-0.0
||	-6-HA-come_pour_pasta()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_pasta = human 	ObsType.OBS 	loc=kitchen
||robot_init.salt_added = True 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = off 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = False 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = kitchen
||human_init.at_human = kitchen
||human_init.at_pasta = human
||human_init.salt_added = True
||human_init.pot_fire = off
||human_init.counter_clean = False
|________________________________________________________________________
human- Refine agenda
Task to refine: 86-HP-add_salt()-0.0
decomp i= 0 : delaying
	86-HP-add_salt()-0.0 => [86-HP-add_salt()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 6-HA-come_pour_pasta()
	6-HA-come_pour_pasta() => [91-HP-pour_pasta()-0.0] : dec_come_pour_pasta_close
	end 0
human- Refine agenda with r_beliefs
Task to refine: 86-HP-add_salt()-0.0
decomp i= 0 : delaying
	86-HP-add_salt()-0.0 => [86-HP-add_salt()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 6-HA-come_pour_pasta()
	6-HA-come_pour_pasta() => [92-HP-pour_pasta()-0.0] : dec_come_pour_pasta_close
	end 0
[93m91-HP-pour_pasta()-0.0 not applicable[0m
[93m91-HP-pour_pasta()-0.0 not applicable[0m
No relevant belief divergence for refinement
refinement = 
[
	delaying: [91-HP-pour_pasta()-0.0]
]
Decomp OK
apply acting agent
[93m91-HP-pour_pasta()-0.0 not applicable[0m
pour_pasta not feasible...
applied refinement = 
next actions:
	- 93-HP-WAIT[]-2.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-31-RA-come_turn_on_pot_fire()
||	-1-RA-come_clean_counter()
| AGENDA human =
||	-91-HP-pour_pasta()-0.0
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_pasta = human 	ObsType.OBS 	loc=kitchen
||robot_init.salt_added = True 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = off 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = False 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = kitchen
||human_init.at_human = kitchen
||human_init.at_pasta = human
||human_init.salt_added = True
||human_init.pot_fire = off
||human_init.counter_clean = False
|________________________________________________________________________
robot- Refine agenda
Task to refine: 31-RA-come_turn_on_pot_fire()
decomp i= 0 : delaying
	31-RA-come_turn_on_pot_fire() => [94-RP-turn_on_pot_fire()-0.0] : dec_come_turn_pot_fire_on_close
	end 0
refinement = 
[
	delaying: [94-RP-turn_on_pot_fire()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 95-RP-turn_on_pot_fire()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-1-RA-come_clean_counter()
| AGENDA human =
||	-91-HP-pour_pasta()-0.0
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_pasta = human 	ObsType.OBS 	loc=kitchen
||robot_init.salt_added = True 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = on 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = False 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = kitchen
||human_init.at_human = kitchen
||human_init.at_pasta = human
||human_init.salt_added = True
||human_init.pot_fire = on
||human_init.counter_clean = False
|________________________________________________________________________
human- Refine agenda
Task to refine: 91-HP-pour_pasta()-0.0
decomp i= 0 : delaying
	end 0
human- Refine agenda with r_beliefs
Task to refine: 91-HP-pour_pasta()-0.0
decomp i= 0 : delaying
	end 0
No relevant belief divergence for refinement
refinement = 
[
	delaying: [91-HP-pour_pasta()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 96-HP-pour_pasta()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-1-RA-come_clean_counter()
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_pasta = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.salt_added = True 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = on 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = False 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = kitchen
||human_init.at_human = kitchen
||human_init.at_pasta = kitchen
||human_init.salt_added = True
||human_init.pot_fire = on
||human_init.counter_clean = False
|________________________________________________________________________
robot- Refine agenda
Task to refine: 1-RA-come_clean_counter()
decomp i= 0 : delaying
	1-RA-come_clean_counter() => [97-RP-clean_counter()-0.0] : dec_come_clean_close
	end 0
refinement = 
[
	delaying: [97-RP-clean_counter()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 98-RP-clean_counter()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_pasta = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.salt_added = True 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = on 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = True 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = kitchen
||human_init.at_human = kitchen
||human_init.at_pasta = kitchen
||human_init.salt_added = True
||human_init.pot_fire = on
||human_init.counter_clean = True
|________________________________________________________________________
human- Refine agenda
human- Refine agenda with r_beliefs
No relevant belief divergence for refinement
refinement = 
[
	delaying: [DecompType.BOTH_AGENDAS_EMPTY]
]
BOTH_AGENDAS_EMPTY
applied refinement = 
next actions:

=> end explo
node explored = 11.0 Flag.E Type.F#6, (robot DELAY []) -7> (robot clean_counter ()) prev=#2 next=[]
new_e_flagged_nodes : 
	11.0 Flag.E Type.F#6, (robot DELAY []) -7> (robot clean_counter ()) prev=#2 next=[]
e_flagged_nodes :
	11.0 Flag.E Type.F#6, (robot DELAY []) -7> (robot clean_counter ()) prev=#2 next=[]
Ns before check = 6.0 Flag.S Type.F#3, (human add_salt ()) -7> (human pour_pasta ()) prev=#1 next=[]
Nf = 11.0 Flag.E Type.F#6, (robot DELAY []) -7> (robot clean_counter ()) prev=#2 next=[]
Ns after check = 6.0 Flag.S Type.F#3, (human add_salt ()) -7> (human pour_pasta ()) prev=#1 next=[]
e_flagged_nodes after check solution:
	=> time spent first exploration = 127ms
Start refining u nodes
	=> time spent refining = 0ms
Total duration = 127ms
Non relevant div:
True
Plans:
18-HP-grab_pasta()-1.0 29-RP-COM_ALIGN['pot_fire-off']-3.0 36-RP-add_salt()-1.0 61-HP-move('kitchen',)-1.0 63-RP-turn_on_pot_fire()-1.0 66-RP-COM_ALIGN['salt_added-True']-3.0 69-HP-pour_pasta()-1.0 72-RP-clean_counter()-1.0/18-HP-grab_pasta()-1.0 29-RP-COM_ALIGN['pot_fire-off']-3.0 37-RP-turn_on_pot_fire()-1.0 77-HP-move('kitchen',)-1.0 79-RP-add_salt()-1.0 82-HP-pour_pasta()-1.0 84-RP-clean_counter()-1.0/18-HP-grab_pasta()-1.0 29-RP-COM_ALIGN['pot_fire-off']-3.0 70-RP-DELAY[]-0.0 89-HP-move('kitchen',)-1.0 90-RP-add_salt()-1.0 93-HP-WAIT[]-2.0 95-RP-turn_on_pot_fire()-1.0 96-HP-pour_pasta()-1.0 98-RP-clean_counter()-1.0/19-HP-add_salt()-1.0 41-RP-COM_ALIGN['pot_fire-off']-3.0 44-RP-turn_on_pot_fire()-1.0 47-HP-grab_pasta()-1.0 49-RP-clean_counter()-1.0 54-HP-move('kitchen',)-1.0 55-RP-IDLE[]-0.0 56-HP-pour_pasta()-1.0
best_traces:
[72-RP-clean_counter()-1.0, 84-RP-clean_counter()-1.0, 98-RP-clean_counter()-1.0, 56-HP-pour_pasta()-1.0]
best_metrics:
(1.1666666666666665, 0.16666666666666666, 6.833333333333334, 0.16666666666666666)
