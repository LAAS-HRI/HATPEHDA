RUN N=476 With=True
INITIAL STATES
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-cook()
||	-1-RA-come_clean_counter()
| AGENDA human =
||	-2-HA-cook()
|------------------------------------------------------------------------
| STATE robot =
|| robot_init.at_robot = room 	ObsType.OBS 	loc=room
|| robot_init.at_human = room 	ObsType.OBS 	loc=room
|| robot_init.at_pasta = room 	ObsType.OBS 	loc=room
|| robot_init.salt_added = False 	ObsType.INF 	loc=kitchen
|| robot_init.pot_fire = on 	ObsType.OBS 	loc=kitchen
|| robot_init.counter_clean = False 	ObsType.INF 	loc=kichen
| STATE human =
|| human_init.at_robot = room
|| human_init.at_human = room
|| human_init.at_pasta = room
|| human_init.salt_added = True
|| human_init.pot_fire = off
|| human_init.counter_clean = False
|________________________________________________________________________
Start first exploration
first node = 0.0 Flag.E Type.I#1, (human BEGIN []) -1> (human BEGIN []) prev=None next=[]

<@> picked node = 0.0 Flag.E Type.I#1, (human BEGIN []) -1> (human BEGIN []) prev=None next=[]
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-cook()
||	-1-RA-come_clean_counter()
| AGENDA human =
||	-2-HA-cook()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = room 	ObsType.OBS 	loc=room
||robot_init.at_human = room 	ObsType.OBS 	loc=room
||robot_init.at_pasta = room 	ObsType.OBS 	loc=room
||robot_init.salt_added = False 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = on 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = False 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = room
||human_init.at_human = room
||human_init.at_pasta = room
||human_init.salt_added = True
||human_init.pot_fire = off
||human_init.counter_clean = False
|________________________________________________________________________
robot- Refine agenda
Task to refine: 0-RA-cook()
decomp i= 0 : origin
	0-RA-cook() => [4-RA-come_add_salt()] : dec_cook_R_1
	4-RA-come_add_salt() => [5-RP-move('kitchen',)-0.0 - 6-RP-add_salt()-0.0] : dec_come_add_salt_far
	end 0
refinement = 
[
	origin: [5-RP-move('kitchen',)-0.0 - 6-RP-add_salt()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 7-RP-move('kitchen',)-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-6-RP-add_salt()-0.0
||	-1-RA-come_clean_counter()
| AGENDA human =
||	-2-HA-cook()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = room 	ObsType.OBS 	loc=room
||robot_init.at_pasta = room 	ObsType.OBS 	loc=room
||robot_init.salt_added = False 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = on 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = False 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = room
||human_init.at_human = room
||human_init.at_pasta = room
||human_init.salt_added = True
||human_init.pot_fire = off
||human_init.counter_clean = False
|________________________________________________________________________
human- Refine agenda
Task to refine: 2-HA-cook()
decomp i= 0 : origin
	2-HA-cook() => [8-HA-get_pasta() - 9-HA-come_pour_pasta()] : dec_cook_H_1
	8-HA-get_pasta() => [10-HP-grab_pasta()-0.0] : dec_get_pasta_close
	end 0
human- Refine agenda with r_beliefs
Task to refine: 2-HA-cook()
decomp i= 0 : origin
	multiple decs for 2-HA-cook():  dec_cook_H_1  dec_cook_H_2 
	2-HA-cook() => [11-HA-get_pasta() - 12-HA-come_add_salt() - 13-HA-come_pour_pasta()] : dec_cook_H_1
		decomposition 1 : dec_cook_H_2 created : [14-HP-add_salt()-0.0, 15-HA-get_pasta(), 16-HA-come_pour_pasta()]
	11-HA-get_pasta() => [17-HP-grab_pasta()-0.0] : dec_get_pasta_close
	end 0
decomp i= 1 : dec_cook_H_2
	end 1
Different number of decomposition
NEED of belief alignment!

# UPDATE belief divergences
	at_robot:None: H=room R=kitchen
	salt_added:None: H=True R=False
	pot_fire:None: H=off R=on

Testing with 1 relevant divergence
divergence tested = at_robot:None: H=room R=kitchen
Task to refine: 2-HA-cook()
decomp i= 0 : 
	2-HA-cook() => [18-HA-get_pasta() - 19-HA-come_pour_pasta()] : dec_cook_H_1
	18-HA-get_pasta() => [20-HP-grab_pasta()-0.0] : dec_get_pasta_close
	end 0
Different number of decomposition
	divergence isn't relevant
divergence tested = salt_added:None: H=True R=False
Task to refine: 2-HA-cook()
decomp i= 0 : 
	multiple decs for 2-HA-cook():  dec_cook_H_1  dec_cook_H_2 
	2-HA-cook() => [21-HA-get_pasta() - 22-HA-come_add_salt() - 23-HA-come_pour_pasta()] : dec_cook_H_1
		decomposition 1 : dec_cook_H_2 created : [24-HP-add_salt()-0.0, 25-HA-get_pasta(), 26-HA-come_pour_pasta()]
	21-HA-get_pasta() => [27-HP-grab_pasta()-0.0] : dec_get_pasta_close
	end 0
decomp i= 1 : dec_cook_H_2
	end 1
	divergence is relevant!
Relevant divergences to correct : 	salt_added:None: H=True R=False

COM: com action added = 28-RP-COM_ALIGN['salt_added-False']-3.0
human- Refine agenda
Task to refine: 2-HA-cook()
decomp i= 0 : origin
	multiple decs for 2-HA-cook():  dec_cook_H_1  dec_cook_H_2 
	2-HA-cook() => [29-HA-get_pasta() - 30-HA-come_add_salt() - 31-HA-come_pour_pasta()] : dec_cook_H_1
		decomposition 1 : dec_cook_H_2 created : [32-HP-add_salt()-0.0, 33-HA-get_pasta(), 34-HA-come_pour_pasta()]
	29-HA-get_pasta() => [35-HP-grab_pasta()-0.0] : dec_get_pasta_close
	end 0
decomp i= 1 : dec_cook_H_2
	end 1
human- Refine agenda with r_beliefs
Task to refine: 2-HA-cook()
decomp i= 0 : origin
	multiple decs for 2-HA-cook():  dec_cook_H_1  dec_cook_H_2 
	2-HA-cook() => [36-HA-get_pasta() - 37-HA-come_add_salt() - 38-HA-come_pour_pasta()] : dec_cook_H_1
		decomposition 1 : dec_cook_H_2 created : [39-HP-add_salt()-0.0, 40-HA-get_pasta(), 41-HA-come_pour_pasta()]
	36-HA-get_pasta() => [42-HP-grab_pasta()-0.0] : dec_get_pasta_close
	end 0
decomp i= 1 : dec_cook_H_2
	end 1
No relevant belief divergence for refinement
refinement = 
[
	dec_cook_H_1: [35-HP-grab_pasta()-0.0 - 30-HA-come_add_salt() - 31-HA-come_pour_pasta()]
	dec_cook_H_2: [32-HP-add_salt()-0.0 - 33-HA-get_pasta() - 34-HA-come_pour_pasta()]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
Trying to create delaying branch
rel_divs= 	salt_added:None: H=True R=False

	initial div ..
applied refinement = 
next actions:
	- 43-HP-grab_pasta()-1.0
	- 44-HP-add_salt()-1.0

=> end explo
node explored = 1.0 Flag.F Type.H#1, (human BEGIN []) -2> (robot COM_ALIGN ['salt_added-False']) prev=None next=[#2 #3]
new_e_flagged_nodes : 
	2.0 Flag.E Type.I#2, (human grab_pasta ()) -1> (human grab_pasta ()) prev=#1 next=[]
	2.0 Flag.E Type.I#3, (human add_salt ()) -1> (human add_salt ()) prev=#1 next=[]
e_flagged_nodes :
	2.0 Flag.E Type.I#2, (human grab_pasta ()) -1> (human grab_pasta ()) prev=#1 next=[]
	2.0 Flag.E Type.I#3, (human add_salt ()) -1> (human add_salt ()) prev=#1 next=[]
Ns before check = None
Nf = None
Ns after check = None
e_flagged_nodes after check solution:
	2.0 Flag.E Type.I#2, (human grab_pasta ()) -1> (human grab_pasta ()) prev=#1 next=[]
	2.0 Flag.E Type.I#3, (human add_salt ()) -1> (human add_salt ()) prev=#1 next=[]

<@> picked node = 2.0 Flag.E Type.I#2, (human grab_pasta ()) -1> (human grab_pasta ()) prev=#1 next=[]
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-6-RP-add_salt()-0.0
||	-1-RA-come_clean_counter()
| AGENDA human =
||	-30-HA-come_add_salt()
||	-31-HA-come_pour_pasta()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = room 	ObsType.OBS 	loc=room
||robot_init.at_pasta = human 	ObsType.OBS 	loc=room
||robot_init.salt_added = False 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = on 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = False 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = room
||human_init.at_human = room
||human_init.at_pasta = human
||human_init.salt_added = False
||human_init.pot_fire = off
||human_init.counter_clean = False
|________________________________________________________________________
robot- Refine agenda
Task to refine: 6-RP-add_salt()-0.0
decomp i= 0 : dec_cook_H_1
	end 0
refinement = 
[
	dec_cook_H_1: [6-RP-add_salt()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 45-RP-add_salt()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-1-RA-come_clean_counter()
| AGENDA human =
||	-30-HA-come_add_salt()
||	-31-HA-come_pour_pasta()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = room 	ObsType.OBS 	loc=room
||robot_init.at_pasta = human 	ObsType.OBS 	loc=room
||robot_init.salt_added = True 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = on 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = False 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = room
||human_init.at_human = room
||human_init.at_pasta = human
||human_init.salt_added = False
||human_init.pot_fire = off
||human_init.counter_clean = False
|________________________________________________________________________
human- Refine agenda
Task to refine: 30-HA-come_add_salt()
decomp i= 0 : dec_cook_H_1
	30-HA-come_add_salt() => [46-HP-move('kitchen',)-0.0 - 47-HP-add_salt()-0.0] : dec_come_add_salt_far
	end 0
human- Refine agenda with r_beliefs
Task to refine: 30-HA-come_add_salt()
decomp i= 0 : dec_cook_H_1
	30-HA-come_add_salt() => [48-HP-move('kitchen',)-0.0 - 49-HP-add_salt()-0.0] : dec_come_add_salt_far
	end 0
No relevant belief divergence for refinement
refinement = 
[
	dec_cook_H_1: [46-HP-move('kitchen',)-0.0 - 47-HP-add_salt()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
SA: human assessed at_robot <- kitchen
SA: human assessed pot_fire <- on
applied refinement = 
next actions:
	- 50-HP-move('kitchen',)-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-1-RA-come_clean_counter()
| AGENDA human =
||	-47-HP-add_salt()-0.0
||	-31-HA-come_pour_pasta()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_pasta = human 	ObsType.OBS 	loc=kitchen
||robot_init.salt_added = True 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = on 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = False 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = kitchen
||human_init.at_human = kitchen
||human_init.at_pasta = human
||human_init.salt_added = False
||human_init.pot_fire = on
||human_init.counter_clean = False
|________________________________________________________________________
robot- Refine agenda
Task to refine: 1-RA-come_clean_counter()
decomp i= 0 : dec_cook_H_1
	1-RA-come_clean_counter() => [51-RP-clean_counter()-0.0] : dec_come_clean_close
	end 0
refinement = 
[
	dec_cook_H_1: [51-RP-clean_counter()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 52-RP-clean_counter()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-47-HP-add_salt()-0.0
||	-31-HA-come_pour_pasta()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_pasta = human 	ObsType.OBS 	loc=kitchen
||robot_init.salt_added = True 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = on 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = True 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = kitchen
||human_init.at_human = kitchen
||human_init.at_pasta = human
||human_init.salt_added = False
||human_init.pot_fire = on
||human_init.counter_clean = True
|________________________________________________________________________
human- Refine agenda
Task to refine: 47-HP-add_salt()-0.0
decomp i= 0 : dec_cook_H_1
	end 0
human- Refine agenda with r_beliefs
Task to refine: 47-HP-add_salt()-0.0
decomp i= 0 : dec_cook_H_1
	47-HP-add_salt()-0.0 => [47-HP-add_salt()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 31-HA-come_pour_pasta()
	31-HA-come_pour_pasta() => [53-HP-pour_pasta()-0.0] : dec_come_pour_pasta_close
	end 0
Not same task name
NEED of belief alignment!

# UPDATE belief divergences
	salt_added:None: H=False R=True

Testing with 1 relevant divergence
divergence tested = salt_added:None: H=False R=True
Task to refine: 47-HP-add_salt()-0.0
decomp i= 0 : 
	47-HP-add_salt()-0.0 => [47-HP-add_salt()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 31-HA-come_pour_pasta()
	31-HA-come_pour_pasta() => [54-HP-pour_pasta()-0.0] : dec_come_pour_pasta_close
	end 0
	divergence is relevant!
Relevant divergences to correct : 	salt_added:None: H=False R=True

COM: com action added = 55-RP-COM_ALIGN['salt_added-True']-3.0
human- Refine agenda
Task to refine: 47-HP-add_salt()-0.0
decomp i= 0 : dec_cook_H_1
	47-HP-add_salt()-0.0 => [47-HP-add_salt()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 31-HA-come_pour_pasta()
	31-HA-come_pour_pasta() => [56-HP-pour_pasta()-0.0] : dec_come_pour_pasta_close
	end 0
human- Refine agenda with r_beliefs
Task to refine: 47-HP-add_salt()-0.0
decomp i= 0 : dec_cook_H_1
	47-HP-add_salt()-0.0 => [47-HP-add_salt()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 31-HA-come_pour_pasta()
	31-HA-come_pour_pasta() => [57-HP-pour_pasta()-0.0] : dec_come_pour_pasta_close
	end 0
No relevant belief divergence for refinement
refinement = 
[
	dec_cook_H_1: [56-HP-pour_pasta()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
Trying to create delaying branch
rel_divs= 	salt_added:None: H=False R=True

	div not initial!
		testing n= 5.0 Flag.E Type.I#2, (human grab_pasta ()) -4> (robot COM_ALIGN ['salt_added-True']) prev=#1 next=[]
	div node identified :  5.0 Flag.E Type.I#2, (human grab_pasta ()) -4> (robot COM_ALIGN ['salt_added-True']) prev=#1 next=[]
	testing action= 43-HP-grab_pasta()-1.0
		R-Agenda in [6-RP-add_salt()-0.0, 1-RA-come_clean_counter()]
		H-Agenda in [30-HA-come_add_salt(), 31-HA-come_pour_pasta()]
before acting
after acting
__________________________________________________________________________
| AGENDA robot =
||	-6-RP-add_salt()-0.0
||	-1-RA-come_clean_counter()
| AGENDA human =
||	-2-HA-cook()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = room 	ObsType.OBS 	loc=room
||robot_init.at_pasta = room 	ObsType.OBS 	loc=room
||robot_init.salt_added = False 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = on 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = False 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = room
||human_init.at_human = room
||human_init.at_pasta = human
||human_init.salt_added = False
||human_init.pot_fire = off
||human_init.counter_clean = False
|________________________________________________________________________
after other
__________________________________________________________________________
| AGENDA robot =
||	-6-RP-add_salt()-0.0
||	-1-RA-come_clean_counter()
| AGENDA human =
||	-2-HA-cook()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = room 	ObsType.OBS 	loc=room
||robot_init.at_pasta = human 	ObsType.OBS 	loc=room
||robot_init.salt_added = False 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = on 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = False 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = room
||human_init.at_human = room
||human_init.at_pasta = human
||human_init.salt_added = False
||human_init.pot_fire = off
||human_init.counter_clean = False
|________________________________________________________________________
action.next= [45-RP-add_salt()-1.0]
	testing action= 45-RP-add_salt()-1.0
		R-Agenda in [1-RA-come_clean_counter()]
		H-Agenda in [30-HA-come_add_salt(), 31-HA-come_pour_pasta()]
before acting
after acting
__________________________________________________________________________
| AGENDA robot =
||	-6-RP-add_salt()-0.0
||	-1-RA-come_clean_counter()
| AGENDA human =
||	-2-HA-cook()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = room 	ObsType.OBS 	loc=room
||robot_init.at_pasta = human 	ObsType.OBS 	loc=room
||robot_init.salt_added = True 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = on 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = False 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = room
||human_init.at_human = room
||human_init.at_pasta = human
||human_init.salt_added = False
||human_init.pot_fire = off
||human_init.counter_clean = False
|________________________________________________________________________
after other
__________________________________________________________________________
| AGENDA robot =
||	-6-RP-add_salt()-0.0
||	-1-RA-come_clean_counter()
| AGENDA human =
||	-2-HA-cook()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = room 	ObsType.OBS 	loc=room
||robot_init.at_pasta = human 	ObsType.OBS 	loc=room
||robot_init.salt_added = True 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = on 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = False 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = room
||human_init.at_human = room
||human_init.at_pasta = human
||human_init.salt_added = False
||human_init.pot_fire = off
||human_init.counter_clean = False
|________________________________________________________________________
agendas:
div_action.agent_agendas[CM.g_human_name]= [30-HA-come_add_salt(), 31-HA-come_pour_pasta()]
div_action.agent_agendas[CM.g_robot_name]= [1-RA-come_clean_counter()]
	div action identified :  45-RP-add_salt()-1.0
__________________________________________________________________________
| AGENDA robot =
||	-45-RP-add_salt()-1.0
||	-1-RA-come_clean_counter()
| AGENDA human =
||	-30-HA-come_add_salt()
||	-31-HA-come_pour_pasta()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = room 	ObsType.OBS 	loc=room
||robot_init.at_pasta = human 	ObsType.OBS 	loc=room
||robot_init.salt_added = False 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = on 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = False 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = room
||human_init.at_human = room
||human_init.at_pasta = human
||human_init.salt_added = False
||human_init.pot_fire = off
||human_init.counter_clean = False
|________________________________________________________________________
	Branching:
BRANCHING current_cost= 5.0
	div_node_bottom created =>  5.0 Flag.E Type.I#4, (robot add_salt ()) -3> (robot COM_ALIGN ['salt_added-True']) prev=#2 next=[]
	delay_node created =>  2.0 Flag.E Type.D#5, (robot DELAY []) -1> (robot DELAY []) prev=#2 next=[]
	div_node edited =>  2.0 Flag.F Type.R#2, (human grab_pasta ()) -1> (human grab_pasta ()) prev=#1 next=[#4 #5]
applied refinement = 
next actions:
	- 58-HP-pour_pasta()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_pasta = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.salt_added = True 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = on 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = True 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = kitchen
||human_init.at_human = kitchen
||human_init.at_pasta = kitchen
||human_init.salt_added = True
||human_init.pot_fire = on
||human_init.counter_clean = True
|________________________________________________________________________
robot- Refine agenda
refinement = 
[
	dec_cook_H_1: [DecompType.BOTH_AGENDAS_EMPTY]
]
BOTH_AGENDAS_EMPTY
applied refinement = 
next actions:

=> end explo
node explored = 2.0 Flag.F Type.R#2, (human grab_pasta ()) -1> (human grab_pasta ()) prev=#1 next=[#4 #5]
new_e_flagged_nodes : 
	2.0 Flag.E Type.D#5, (robot DELAY []) -1> (robot DELAY []) prev=#2 next=[]
	6.0 Flag.E Type.F#4, (robot add_salt ()) -4> (human pour_pasta ()) prev=#2 next=[]
e_flagged_nodes :
	2.0 Flag.E Type.I#3, (human add_salt ()) -1> (human add_salt ()) prev=#1 next=[]
	2.0 Flag.E Type.D#5, (robot DELAY []) -1> (robot DELAY []) prev=#2 next=[]
	6.0 Flag.E Type.F#4, (robot add_salt ()) -4> (human pour_pasta ()) prev=#2 next=[]
Ns before check = None
Nf = 6.0 Flag.E Type.F#4, (robot add_salt ()) -4> (human pour_pasta ()) prev=#2 next=[]
new Ns!
Ns after check = 6.0 Flag.S Type.F#4, (robot add_salt ()) -4> (human pour_pasta ()) prev=#2 next=[]
e_flagged_nodes after check solution:
	2.0 Flag.E Type.I#3, (human add_salt ()) -1> (human add_salt ()) prev=#1 next=[]
	2.0 Flag.E Type.D#5, (robot DELAY []) -1> (robot DELAY []) prev=#2 next=[]

<@> picked node = 2.0 Flag.E Type.I#3, (human add_salt ()) -1> (human add_salt ()) prev=#1 next=[]
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-6-RP-add_salt()-0.0
||	-1-RA-come_clean_counter()
| AGENDA human =
||	-33-HA-get_pasta()
||	-34-HA-come_pour_pasta()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = room 	ObsType.OBS 	loc=room
||robot_init.at_pasta = room 	ObsType.OBS 	loc=room
||robot_init.salt_added = True 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = on 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = False 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = room
||human_init.at_human = room
||human_init.at_pasta = room
||human_init.salt_added = True
||human_init.pot_fire = off
||human_init.counter_clean = False
|________________________________________________________________________
robot- Refine agenda
Task to refine: 6-RP-add_salt()-0.0
decomp i= 0 : dec_cook_H_2
	6-RP-add_salt()-0.0 => [6-RP-add_salt()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 1-RA-come_clean_counter()
	1-RA-come_clean_counter() => [60-RP-clean_counter()-0.0] : dec_come_clean_close
	end 0
refinement = 
[
	dec_cook_H_2: [60-RP-clean_counter()-0.0]
]
Decomp OK
[93m60-RP-clean_counter()-0.0 not applicable[0m
Operator isn't applicable with only one of the beliefs

# UPDATE belief divergences
	at_robot:None: H=room R=kitchen
	pot_fire:None: H=off R=on

Testing with 1 relevant divergence
divergence tested = at_robot:None: H=room R=kitchen
Task to refine: 33-HA-get_pasta()
decomp i= 0 : 
	33-HA-get_pasta() => [61-HP-grab_pasta()-0.0] : dec_get_pasta_close
	end 0
	divergence is relevant!
Relevant divergences to correct : 	at_robot:None: H=room R=kitchen

COM: com action added eff = 62-RP-COM_ALIGN['at_robot-kitchen']-3.0
robot- Refine agenda
Task to refine: 6-RP-add_salt()-0.0
decomp i= 0 : dec_cook_H_2
	6-RP-add_salt()-0.0 => [6-RP-add_salt()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 1-RA-come_clean_counter()
	1-RA-come_clean_counter() => [63-RP-clean_counter()-0.0] : dec_come_clean_close
	end 0
refinement = 
[
	dec_cook_H_2: [63-RP-clean_counter()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 64-RP-clean_counter()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-33-HA-get_pasta()
||	-34-HA-come_pour_pasta()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = room 	ObsType.OBS 	loc=room
||robot_init.at_pasta = room 	ObsType.OBS 	loc=room
||robot_init.salt_added = True 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = on 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = True 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = kitchen
||human_init.at_human = room
||human_init.at_pasta = room
||human_init.salt_added = True
||human_init.pot_fire = off
||human_init.counter_clean = False
|________________________________________________________________________
human- Refine agenda
Task to refine: 33-HA-get_pasta()
decomp i= 0 : dec_cook_H_2
	33-HA-get_pasta() => [65-HP-grab_pasta()-0.0] : dec_get_pasta_close
	end 0
human- Refine agenda with r_beliefs
Task to refine: 33-HA-get_pasta()
decomp i= 0 : dec_cook_H_2
	33-HA-get_pasta() => [66-HP-grab_pasta()-0.0] : dec_get_pasta_close
	end 0
No relevant belief divergence for refinement
refinement = 
[
	dec_cook_H_2: [65-HP-grab_pasta()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 67-HP-grab_pasta()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-34-HA-come_pour_pasta()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = room 	ObsType.OBS 	loc=room
||robot_init.at_pasta = human 	ObsType.OBS 	loc=room
||robot_init.salt_added = True 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = on 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = True 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = kitchen
||human_init.at_human = room
||human_init.at_pasta = human
||human_init.salt_added = True
||human_init.pot_fire = off
||human_init.counter_clean = False
|________________________________________________________________________
robot- Refine agenda
refinement = 
[
	dec_cook_H_2: [DecompType.AGENDA_EMPTY]
]
AGENDA_EMPTY => IDLE added
applied refinement = 
next actions:
	- 68-RP-IDLE[]-0.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-34-HA-come_pour_pasta()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = room 	ObsType.OBS 	loc=room
||robot_init.at_pasta = human 	ObsType.OBS 	loc=room
||robot_init.salt_added = True 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = on 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = True 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = kitchen
||human_init.at_human = room
||human_init.at_pasta = human
||human_init.salt_added = True
||human_init.pot_fire = off
||human_init.counter_clean = False
|________________________________________________________________________
human- Refine agenda
Task to refine: 34-HA-come_pour_pasta()
decomp i= 0 : dec_cook_H_2
	34-HA-come_pour_pasta() => [69-HP-move('kitchen',)-0.0 - 70-HP-pour_pasta()-0.0] : dec_come_pour_pasta_far
	end 0
human- Refine agenda with r_beliefs
Task to refine: 34-HA-come_pour_pasta()
decomp i= 0 : dec_cook_H_2
	34-HA-come_pour_pasta() => [71-HP-move('kitchen',)-0.0 - 72-HP-pour_pasta()-0.0] : dec_come_pour_pasta_far
	end 0
No relevant belief divergence for refinement
refinement = 
[
	dec_cook_H_2: [69-HP-move('kitchen',)-0.0 - 70-HP-pour_pasta()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
SA: human assessed pot_fire <- on
applied refinement = 
next actions:
	- 73-HP-move('kitchen',)-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-70-HP-pour_pasta()-0.0
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_pasta = human 	ObsType.OBS 	loc=kitchen
||robot_init.salt_added = True 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = on 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = True 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = kitchen
||human_init.at_human = kitchen
||human_init.at_pasta = human
||human_init.salt_added = True
||human_init.pot_fire = on
||human_init.counter_clean = False
|________________________________________________________________________
robot- Refine agenda
refinement = 
[
	dec_cook_H_2: [DecompType.AGENDA_EMPTY]
]
AGENDA_EMPTY => IDLE added
applied refinement = 
next actions:
	- 74-RP-IDLE[]-0.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-70-HP-pour_pasta()-0.0
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_pasta = human 	ObsType.OBS 	loc=kitchen
||robot_init.salt_added = True 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = on 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = True 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = kitchen
||human_init.at_human = kitchen
||human_init.at_pasta = human
||human_init.salt_added = True
||human_init.pot_fire = on
||human_init.counter_clean = False
|________________________________________________________________________
human- Refine agenda
Task to refine: 70-HP-pour_pasta()-0.0
decomp i= 0 : dec_cook_H_2
	end 0
human- Refine agenda with r_beliefs
Task to refine: 70-HP-pour_pasta()-0.0
decomp i= 0 : dec_cook_H_2
	end 0
No relevant belief divergence for refinement
refinement = 
[
	dec_cook_H_2: [70-HP-pour_pasta()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 75-HP-pour_pasta()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_pasta = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.salt_added = True 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = on 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = True 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = kitchen
||human_init.at_human = kitchen
||human_init.at_pasta = kitchen
||human_init.salt_added = True
||human_init.pot_fire = on
||human_init.counter_clean = False
|________________________________________________________________________
robot- Refine agenda
refinement = 
[
	dec_cook_H_2: [DecompType.BOTH_AGENDAS_EMPTY]
]
BOTH_AGENDAS_EMPTY
applied refinement = 
next actions:

=> end explo
node explored = 6.0 Flag.E Type.F#3, (human add_salt ()) -7> (human pour_pasta ()) prev=#1 next=[]
new_e_flagged_nodes : 
	6.0 Flag.E Type.F#3, (human add_salt ()) -7> (human pour_pasta ()) prev=#1 next=[]
e_flagged_nodes :
	2.0 Flag.E Type.D#5, (robot DELAY []) -1> (robot DELAY []) prev=#2 next=[]
	6.0 Flag.E Type.F#3, (human add_salt ()) -7> (human pour_pasta ()) prev=#1 next=[]
Ns before check = 6.0 Flag.S Type.F#4, (robot add_salt ()) -4> (human pour_pasta ()) prev=#2 next=[]
Nf = 6.0 Flag.E Type.F#3, (human add_salt ()) -7> (human pour_pasta ()) prev=#1 next=[]
Ns after check = 6.0 Flag.S Type.F#4, (robot add_salt ()) -4> (human pour_pasta ()) prev=#2 next=[]
e_flagged_nodes after check solution:
	2.0 Flag.E Type.D#5, (robot DELAY []) -1> (robot DELAY []) prev=#2 next=[]

<@> picked node = 2.0 Flag.E Type.D#5, (robot DELAY []) -1> (robot DELAY []) prev=#2 next=[]
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-45-RP-add_salt()-1.0
||	-1-RA-come_clean_counter()
| AGENDA human =
||	-30-HA-come_add_salt()
||	-31-HA-come_pour_pasta()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = room 	ObsType.OBS 	loc=room
||robot_init.at_pasta = human 	ObsType.OBS 	loc=room
||robot_init.salt_added = False 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = on 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = False 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = room
||human_init.at_human = room
||human_init.at_pasta = human
||human_init.salt_added = False
||human_init.pot_fire = off
||human_init.counter_clean = False
|________________________________________________________________________
human- Refine agenda
Task to refine: 30-HA-come_add_salt()
decomp i= 0 : delaying
	30-HA-come_add_salt() => [76-HP-move('kitchen',)-0.0 - 77-HP-add_salt()-0.0] : dec_come_add_salt_far
	end 0
human- Refine agenda with r_beliefs
Task to refine: 30-HA-come_add_salt()
decomp i= 0 : delaying
	30-HA-come_add_salt() => [78-HP-move('kitchen',)-0.0 - 79-HP-add_salt()-0.0] : dec_come_add_salt_far
	end 0
No relevant belief divergence for refinement
refinement = 
[
	delaying: [76-HP-move('kitchen',)-0.0 - 77-HP-add_salt()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
SA: human assessed at_robot <- kitchen
SA: human assessed pot_fire <- on
applied refinement = 
next actions:
	- 80-HP-move('kitchen',)-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-45-RP-add_salt()-1.0
||	-1-RA-come_clean_counter()
| AGENDA human =
||	-77-HP-add_salt()-0.0
||	-31-HA-come_pour_pasta()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_pasta = human 	ObsType.OBS 	loc=kitchen
||robot_init.salt_added = False 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = on 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = False 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = kitchen
||human_init.at_human = kitchen
||human_init.at_pasta = human
||human_init.salt_added = False
||human_init.pot_fire = on
||human_init.counter_clean = False
|________________________________________________________________________
robot- Refine agenda
Task to refine: 45-RP-add_salt()-1.0
decomp i= 0 : delaying
	end 0
refinement = 
[
	delaying: [45-RP-add_salt()-1.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 81-RP-add_salt()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-1-RA-come_clean_counter()
| AGENDA human =
||	-77-HP-add_salt()-0.0
||	-31-HA-come_pour_pasta()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_pasta = human 	ObsType.OBS 	loc=kitchen
||robot_init.salt_added = True 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = on 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = False 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = kitchen
||human_init.at_human = kitchen
||human_init.at_pasta = human
||human_init.salt_added = True
||human_init.pot_fire = on
||human_init.counter_clean = False
|________________________________________________________________________
human- Refine agenda
Task to refine: 77-HP-add_salt()-0.0
decomp i= 0 : delaying
	77-HP-add_salt()-0.0 => [77-HP-add_salt()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 31-HA-come_pour_pasta()
	31-HA-come_pour_pasta() => [82-HP-pour_pasta()-0.0] : dec_come_pour_pasta_close
	end 0
human- Refine agenda with r_beliefs
Task to refine: 77-HP-add_salt()-0.0
decomp i= 0 : delaying
	77-HP-add_salt()-0.0 => [77-HP-add_salt()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 31-HA-come_pour_pasta()
	31-HA-come_pour_pasta() => [83-HP-pour_pasta()-0.0] : dec_come_pour_pasta_close
	end 0
No relevant belief divergence for refinement
refinement = 
[
	delaying: [82-HP-pour_pasta()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 84-HP-pour_pasta()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-1-RA-come_clean_counter()
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_pasta = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.salt_added = True 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = on 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = False 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = kitchen
||human_init.at_human = kitchen
||human_init.at_pasta = kitchen
||human_init.salt_added = True
||human_init.pot_fire = on
||human_init.counter_clean = False
|________________________________________________________________________
robot- Refine agenda
Task to refine: 1-RA-come_clean_counter()
decomp i= 0 : delaying
	1-RA-come_clean_counter() => [85-RP-clean_counter()-0.0] : dec_come_clean_close
	end 0
refinement = 
[
	delaying: [85-RP-clean_counter()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 86-RP-clean_counter()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_human = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.at_pasta = kitchen 	ObsType.OBS 	loc=kitchen
||robot_init.salt_added = True 	ObsType.INF 	loc=kitchen
||robot_init.pot_fire = on 	ObsType.OBS 	loc=kitchen
||robot_init.counter_clean = True 	ObsType.INF 	loc=kichen
| STATE human =
||human_init.at_robot = kitchen
||human_init.at_human = kitchen
||human_init.at_pasta = kitchen
||human_init.salt_added = True
||human_init.pot_fire = on
||human_init.counter_clean = True
|________________________________________________________________________
human- Refine agenda
human- Refine agenda with r_beliefs
No relevant belief divergence for refinement
refinement = 
[
	delaying: [DecompType.BOTH_AGENDAS_EMPTY]
]
BOTH_AGENDAS_EMPTY
applied refinement = 
next actions:

=> end explo
node explored = 6.0 Flag.E Type.F#5, (robot DELAY []) -5> (robot clean_counter ()) prev=#2 next=[]
new_e_flagged_nodes : 
	6.0 Flag.E Type.F#5, (robot DELAY []) -5> (robot clean_counter ()) prev=#2 next=[]
e_flagged_nodes :
	6.0 Flag.E Type.F#5, (robot DELAY []) -5> (robot clean_counter ()) prev=#2 next=[]
Ns before check = 6.0 Flag.S Type.F#4, (robot add_salt ()) -4> (human pour_pasta ()) prev=#2 next=[]
Nf = 6.0 Flag.E Type.F#5, (robot DELAY []) -5> (robot clean_counter ()) prev=#2 next=[]
Ns after check = 6.0 Flag.S Type.F#4, (robot add_salt ()) -4> (human pour_pasta ()) prev=#2 next=[]
e_flagged_nodes after check solution:
	=> time spent first exploration = 94ms
Start refining u nodes
	=> time spent refining = 0ms
Total duration = 94ms
Non relevant div:
True
Plans:
7-RP-move('kitchen',)-1.0 28-RP-COM_ALIGN['salt_added-False']-3.0 43-HP-grab_pasta()-1.0 45-RP-add_salt()-1.0 50-HP-move('kitchen',)-1.0 52-RP-clean_counter()-1.0 55-RP-COM_ALIGN['salt_added-True']-3.0 58-HP-pour_pasta()-1.0/7-RP-move('kitchen',)-1.0 28-RP-COM_ALIGN['salt_added-False']-3.0 43-HP-grab_pasta()-1.0 59-RP-DELAY[]-0.0 80-HP-move('kitchen',)-1.0 81-RP-add_salt()-1.0 84-HP-pour_pasta()-1.0 86-RP-clean_counter()-1.0/7-RP-move('kitchen',)-1.0 28-RP-COM_ALIGN['salt_added-False']-3.0 44-HP-add_salt()-1.0 62-RP-COM_ALIGN['at_robot-kitchen']-3.0 64-RP-clean_counter()-1.0 67-HP-grab_pasta()-1.0 68-RP-IDLE[]-0.0 73-HP-move('kitchen',)-1.0 74-RP-IDLE[]-0.0 75-HP-pour_pasta()-1.0
best_traces:
[86-RP-clean_counter()-1.0, 75-HP-pour_pasta()-1.0]
best_metrics:
(1.5, 0.0, 7.5, 0.5)
