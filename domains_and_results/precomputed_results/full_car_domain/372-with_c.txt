RUN N=372 With=True
INITIAL STATES
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
|| robot_init.at_robot = front 	ObsType.OBS 	loc=front
|| robot_init.at_human = front 	ObsType.OBS 	loc=front
|| robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
|| robot_init.washer = full 	ObsType.OBS 	loc=front
|| robot_init.oil = low 	ObsType.INF 	loc=front
|| robot_init.hood = open 	ObsType.OBS 	loc=front
|| robot_init.rear_light = new 	ObsType.INF 	loc=rear
|| robot_init.left_light = ok 	ObsType.INF 	loc=front
|| robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
|| human_init.at_robot = front
|| human_init.at_human = front
|| human_init.at_oil_bottle = front
|| human_init.washer = low
|| human_init.oil = full
|| human_init.hood = open
|| human_init.rear_light = old
|| human_init.left_light = ok
|| human_init.right_light = ok
|________________________________________________________________________
Start first exploration
SA: human assessed washer <- full
first node = 0.0 Flag.E Type.I#1, (human BEGIN []) -1> (human BEGIN []) prev=None next=[]

<@> picked node = 0.0 Flag.E Type.I#1, (human BEGIN []) -1> (human BEGIN []) prev=None next=[]
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 0-RA-Car_maintenance()
decomp i= 0 : origin
	0-RA-Car_maintenance() => [3-RP-go_front_car()-0.0 - 4-RP-refill_washer()-0.0 - 5-RP-refill_oil()-0.0 - 6-RP-store_oil()-0.0] : dec_car_maintenance_R
	3-RP-go_front_car()-0.0 => [3-RP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[4-RP-refill_washer()-0.0, 5-RP-refill_oil()-0.0, 6-RP-store_oil()-0.0]
	4-RP-refill_washer()-0.0 => [4-RP-refill_washer()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[5-RP-refill_oil()-0.0, 6-RP-store_oil()-0.0]
	end 0
refinement = 
[
	origin: [5-RP-refill_oil()-0.0 - 6-RP-store_oil()-0.0]
]
Decomp OK
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
[93malready done[0m
[93m5-RP-refill_oil()-0.0 not applicable[0m
Operator isn't applicable with only one of the beliefs

# UPDATE belief divergences
	oil:None: H=full R=low
	rear_light:None: H=old R=new

Testing with 1 relevant divergence
divergence tested = oil:None: H=full R=low
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : 
	1-HA-Car_maintenance() => [7-HA-Handling_lights() - 8-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 7-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	7-HA-Handling_lights() => [9-HA-Replacing_rear_light() - 10-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [11-HA-Checking_front_lights(), 12-HA-Replacing_rear_light(), 8-HA-Closing_hood()]
	9-HA-Replacing_rear_light() => [13-HP-go_behind_car()-0.0 - 14-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	11-HA-Checking_front_lights() => [15-HP-go_front_car()-0.0 - 16-HP-check_left_light()-0.0 - 17-HP-check_right_light()-0.0] : dec_checking_front_ligths
	15-HP-go_front_car()-0.0 => [15-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[16-HP-check_left_light()-0.0, 17-HP-check_right_light()-0.0, 12-HA-Replacing_rear_light(), 8-HA-Closing_hood()]
	16-HP-check_left_light()-0.0 => [16-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[17-HP-check_right_light()-0.0, 12-HA-Replacing_rear_light(), 8-HA-Closing_hood()]
	17-HP-check_right_light()-0.0 => [17-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[12-HA-Replacing_rear_light(), 8-HA-Closing_hood()]
	12-HA-Replacing_rear_light() => [18-HP-go_behind_car()-0.0 - 19-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 1
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
same effects
	divergence is relevant!
Relevant divergences to correct : 	oil:None: H=full R=low

COM: com action added eff = 20-RP-COM_ALIGN['oil-None-low']-3.0
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 21-RP-refill_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-6-RP-store_oil()-0.0
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [22-HA-Handling_lights() - 23-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 22-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	22-HA-Handling_lights() => [24-HA-Replacing_rear_light() - 25-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [26-HA-Checking_front_lights(), 27-HA-Replacing_rear_light(), 23-HA-Closing_hood()]
	24-HA-Replacing_rear_light() => [28-HP-go_behind_car()-0.0 - 29-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	26-HA-Checking_front_lights() => [30-HP-go_front_car()-0.0 - 31-HP-check_left_light()-0.0 - 32-HP-check_right_light()-0.0] : dec_checking_front_ligths
	30-HP-go_front_car()-0.0 => [30-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[31-HP-check_left_light()-0.0, 32-HP-check_right_light()-0.0, 27-HA-Replacing_rear_light(), 23-HA-Closing_hood()]
	31-HP-check_left_light()-0.0 => [31-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[32-HP-check_right_light()-0.0, 27-HA-Replacing_rear_light(), 23-HA-Closing_hood()]
	32-HP-check_right_light()-0.0 => [32-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[27-HA-Replacing_rear_light(), 23-HA-Closing_hood()]
	27-HA-Replacing_rear_light() => [33-HP-go_behind_car()-0.0 - 34-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 1
human- Refine agenda with r_beliefs
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [35-HA-Handling_lights() - 36-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 35-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	35-HA-Handling_lights() => [37-HA-Replacing_rear_light() - 38-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [39-HA-Checking_front_lights(), 40-HA-Replacing_rear_light(), 36-HA-Closing_hood()]
	37-HA-Replacing_rear_light() => [] : dec_replacing_rear_light
[92m	refines into nothing[0m
	continue .. next_subtasks=[38-HA-Checking_front_lights(), 36-HA-Closing_hood()]
	38-HA-Checking_front_lights() => [41-HP-go_front_car()-0.0 - 42-HP-check_left_light()-0.0 - 43-HP-check_right_light()-0.0] : dec_checking_front_ligths
	41-HP-go_front_car()-0.0 => [41-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[42-HP-check_left_light()-0.0, 43-HP-check_right_light()-0.0, 36-HA-Closing_hood()]
	42-HP-check_left_light()-0.0 => [42-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[43-HP-check_right_light()-0.0, 36-HA-Closing_hood()]
	43-HP-check_right_light()-0.0 => [43-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[36-HA-Closing_hood()]
	36-HA-Closing_hood() => [44-HP-go_front_car()-0.0 - 45-HP-close_hood()-0.0] : dec_closing_hood
	44-HP-go_front_car()-0.0 => [44-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[45-HP-close_hood()-0.0]
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	39-HA-Checking_front_lights() => [46-HP-go_front_car()-0.0 - 47-HP-check_left_light()-0.0 - 48-HP-check_right_light()-0.0] : dec_checking_front_ligths
	46-HP-go_front_car()-0.0 => [46-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[47-HP-check_left_light()-0.0, 48-HP-check_right_light()-0.0, 40-HA-Replacing_rear_light(), 36-HA-Closing_hood()]
	47-HP-check_left_light()-0.0 => [47-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[48-HP-check_right_light()-0.0, 40-HA-Replacing_rear_light(), 36-HA-Closing_hood()]
	48-HP-check_right_light()-0.0 => [48-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[40-HA-Replacing_rear_light(), 36-HA-Closing_hood()]
	40-HA-Replacing_rear_light() => [] : dec_replacing_rear_light
[92m	refines into nothing[0m
	continue .. next_subtasks=[36-HA-Closing_hood()]
	36-HA-Closing_hood() => [49-HP-go_front_car()-0.0 - 50-HP-close_hood()-0.0] : dec_closing_hood
	49-HP-go_front_car()-0.0 => [49-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[50-HP-close_hood()-0.0]
	end 1
refinement:
[
	dec_handling_lights_start_replace: [28-HP-go_behind_car()-0.0 - 29-HP-replace_rear_light()-0.0 - 25-HA-Checking_front_lights() - 23-HA-Closing_hood()]
	dec_handling_lights_start_checking: [33-HP-go_behind_car()-0.0 - 34-HP-replace_rear_light()-0.0 - 23-HA-Closing_hood()]
]
refinement_r:
[
	dec_handling_lights_start_replace: [45-HP-close_hood()-0.0]
	dec_handling_lights_start_checking: [50-HP-close_hood()-0.0]
]
refinement_r_beliefs:
[
	dec_handling_lights_start_replace: [45-HP-close_hood()-0.0]
	dec_handling_lights_start_checking: [50-HP-close_hood()-0.0]
]
refinement_h_beliefs:
[
	dec_handling_lights_start_replace: [28-HP-go_behind_car()-0.0 - 29-HP-replace_rear_light()-0.0 - 25-HA-Checking_front_lights() - 23-HA-Closing_hood()]
	dec_handling_lights_start_checking: [33-HP-go_behind_car()-0.0 - 34-HP-replace_rear_light()-0.0 - 23-HA-Closing_hood()]
]
decomp  0
decomp_h.subtasks= [28-HP-go_behind_car()-0.0, 29-HP-replace_rear_light()-0.0, 25-HA-Checking_front_lights(), 23-HA-Closing_hood()]
decomp_r.subtasks= [45-HP-close_hood()-0.0]
Not same number of subtasks
NEED of belief alignment!

# UPDATE belief divergences
	rear_light:None: H=old R=new

Testing with 1 relevant divergence
divergence tested = rear_light:None: H=old R=new
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : 
	1-HA-Car_maintenance() => [51-HA-Handling_lights() - 52-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 51-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	51-HA-Handling_lights() => [53-HA-Replacing_rear_light() - 54-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [55-HA-Checking_front_lights(), 56-HA-Replacing_rear_light(), 52-HA-Closing_hood()]
	53-HA-Replacing_rear_light() => [] : dec_replacing_rear_light
[92m	refines into nothing[0m
	continue .. next_subtasks=[54-HA-Checking_front_lights(), 52-HA-Closing_hood()]
	54-HA-Checking_front_lights() => [57-HP-go_front_car()-0.0 - 58-HP-check_left_light()-0.0 - 59-HP-check_right_light()-0.0] : dec_checking_front_ligths
	57-HP-go_front_car()-0.0 => [57-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[58-HP-check_left_light()-0.0, 59-HP-check_right_light()-0.0, 52-HA-Closing_hood()]
	58-HP-check_left_light()-0.0 => [58-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[59-HP-check_right_light()-0.0, 52-HA-Closing_hood()]
	59-HP-check_right_light()-0.0 => [59-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[52-HA-Closing_hood()]
	52-HA-Closing_hood() => [60-HP-go_front_car()-0.0 - 61-HP-close_hood()-0.0] : dec_closing_hood
	60-HP-go_front_car()-0.0 => [60-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[61-HP-close_hood()-0.0]
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	55-HA-Checking_front_lights() => [62-HP-go_front_car()-0.0 - 63-HP-check_left_light()-0.0 - 64-HP-check_right_light()-0.0] : dec_checking_front_ligths
	62-HP-go_front_car()-0.0 => [62-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[63-HP-check_left_light()-0.0, 64-HP-check_right_light()-0.0, 56-HA-Replacing_rear_light(), 52-HA-Closing_hood()]
	63-HP-check_left_light()-0.0 => [63-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[64-HP-check_right_light()-0.0, 56-HA-Replacing_rear_light(), 52-HA-Closing_hood()]
	64-HP-check_right_light()-0.0 => [64-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[56-HA-Replacing_rear_light(), 52-HA-Closing_hood()]
	56-HA-Replacing_rear_light() => [] : dec_replacing_rear_light
[92m	refines into nothing[0m
	continue .. next_subtasks=[52-HA-Closing_hood()]
	52-HA-Closing_hood() => [65-HP-go_front_car()-0.0 - 66-HP-close_hood()-0.0] : dec_closing_hood
	65-HP-go_front_car()-0.0 => [65-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[66-HP-close_hood()-0.0]
	end 1
ref_aligned 1:
[
	dec_handling_lights_start_replace: [61-HP-close_hood()-0.0]
	dec_handling_lights_start_checking: [66-HP-close_hood()-0.0]
]
Check if ok
refinement_r_beliefs:
[
	dec_handling_lights_start_replace: [45-HP-close_hood()-0.0]
	dec_handling_lights_start_checking: [50-HP-close_hood()-0.0]
]
refinement_h_beliefs:
[
	dec_handling_lights_start_replace: [61-HP-close_hood()-0.0]
	dec_handling_lights_start_checking: [66-HP-close_hood()-0.0]
]
decomp  0
decomp_h.subtasks= [61-HP-close_hood()-0.0]
decomp_r.subtasks= [45-HP-close_hood()-0.0]
len(decomp_h.subtasks)= 1
len(decomp_r.subtasks)= 1
i= 0
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
||	-6-RP-store_oil()-0.0
||	-0-RA-Car_maintenance()
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
same effects
decomp  1
decomp_h.subtasks= [66-HP-close_hood()-0.0]
decomp_r.subtasks= [50-HP-close_hood()-0.0]
len(decomp_h.subtasks)= 1
len(decomp_r.subtasks)= 1
i= 1
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
||	-6-RP-store_oil()-0.0
||	-0-RA-Car_maintenance()
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
same effects
no alignment needed
	divergence is relevant!
Relevant divergences to correct : 	rear_light:None: H=old R=new

COM: com action added = 67-RP-COM_ALIGN['rear_light-None-new']-3.0
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [68-HA-Handling_lights() - 69-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 68-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	68-HA-Handling_lights() => [70-HA-Replacing_rear_light() - 71-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [72-HA-Checking_front_lights(), 73-HA-Replacing_rear_light(), 69-HA-Closing_hood()]
	70-HA-Replacing_rear_light() => [] : dec_replacing_rear_light
[92m	refines into nothing[0m
	continue .. next_subtasks=[71-HA-Checking_front_lights(), 69-HA-Closing_hood()]
	71-HA-Checking_front_lights() => [74-HP-go_front_car()-0.0 - 75-HP-check_left_light()-0.0 - 76-HP-check_right_light()-0.0] : dec_checking_front_ligths
	74-HP-go_front_car()-0.0 => [74-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[75-HP-check_left_light()-0.0, 76-HP-check_right_light()-0.0, 69-HA-Closing_hood()]
	75-HP-check_left_light()-0.0 => [75-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[76-HP-check_right_light()-0.0, 69-HA-Closing_hood()]
	76-HP-check_right_light()-0.0 => [76-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[69-HA-Closing_hood()]
	69-HA-Closing_hood() => [77-HP-go_front_car()-0.0 - 78-HP-close_hood()-0.0] : dec_closing_hood
	77-HP-go_front_car()-0.0 => [77-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[78-HP-close_hood()-0.0]
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	72-HA-Checking_front_lights() => [79-HP-go_front_car()-0.0 - 80-HP-check_left_light()-0.0 - 81-HP-check_right_light()-0.0] : dec_checking_front_ligths
	79-HP-go_front_car()-0.0 => [79-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[80-HP-check_left_light()-0.0, 81-HP-check_right_light()-0.0, 73-HA-Replacing_rear_light(), 69-HA-Closing_hood()]
	80-HP-check_left_light()-0.0 => [80-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[81-HP-check_right_light()-0.0, 73-HA-Replacing_rear_light(), 69-HA-Closing_hood()]
	81-HP-check_right_light()-0.0 => [81-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[73-HA-Replacing_rear_light(), 69-HA-Closing_hood()]
	73-HA-Replacing_rear_light() => [] : dec_replacing_rear_light
[92m	refines into nothing[0m
	continue .. next_subtasks=[69-HA-Closing_hood()]
	69-HA-Closing_hood() => [82-HP-go_front_car()-0.0 - 83-HP-close_hood()-0.0] : dec_closing_hood
	82-HP-go_front_car()-0.0 => [82-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[83-HP-close_hood()-0.0]
	end 1
refinement = 
[
	dec_handling_lights_start_replace: [78-HP-close_hood()-0.0]
	dec_handling_lights_start_checking: [83-HP-close_hood()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 84-HP-close_hood()-1.0
	- 85-HP-close_hood()-1.0

=> end explo
node explored = 7.0 Flag.F Type.H#1, (human BEGIN []) -2> (robot refill_oil ()) prev=None next=[#2 #3]
new_e_flagged_nodes : 
	8.0 Flag.E Type.I#2, (human close_hood ()) -1> (human close_hood ()) prev=#1 next=[]
	8.0 Flag.E Type.I#3, (human close_hood ()) -1> (human close_hood ()) prev=#1 next=[]
e_flagged_nodes :
	8.0 Flag.E Type.I#2, (human close_hood ()) -1> (human close_hood ()) prev=#1 next=[]
	8.0 Flag.E Type.I#3, (human close_hood ()) -1> (human close_hood ()) prev=#1 next=[]
Ns before check = None
Nf = None
Ns after check = None
e_flagged_nodes after check solution:
	8.0 Flag.E Type.I#2, (human close_hood ()) -1> (human close_hood ()) prev=#1 next=[]
	8.0 Flag.E Type.I#3, (human close_hood ()) -1> (human close_hood ()) prev=#1 next=[]

<@> picked node = 8.0 Flag.E Type.I#2, (human close_hood ()) -1> (human close_hood ()) prev=#1 next=[]
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-6-RP-store_oil()-0.0
||	-0-RA-Car_maintenance()
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 6-RP-store_oil()-0.0
decomp i= 0 : dec_handling_lights_start_replace
	end 0
refinement = 
[
	dec_handling_lights_start_replace: [6-RP-store_oil()-0.0]
]
Decomp OK
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
same effects
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 86-RP-store_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
human- Refine agenda with r_beliefs
refinement:
[
	dec_handling_lights_start_replace: [DecompType.AGENDA_EMPTY]
]
refinement_r:
[
	dec_handling_lights_start_replace: [DecompType.AGENDA_EMPTY]
]
refinement_r_beliefs:
[
	dec_handling_lights_start_replace: [DecompType.AGENDA_EMPTY]
]
refinement_h_beliefs:
[
	dec_handling_lights_start_replace: [DecompType.AGENDA_EMPTY]
]
decomp  0
decomp_h.subtasks= []
decomp_r.subtasks= []
len(decomp_h.subtasks)= 0
len(decomp_r.subtasks)= 0
no alignment needed
No relevant belief divergence for refinement
refinement = 
[
	dec_handling_lights_start_replace: [DecompType.AGENDA_EMPTY]
]
AGENDA_EMPTY => IDLE added
applied refinement = 
next actions:
	- 87-HP-IDLE[]-0.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 0-RA-Car_maintenance()
decomp i= 0 : dec_handling_lights_start_replace
	0-RA-Car_maintenance() => [88-RP-go_front_car()-0.0 - 89-RP-refill_washer()-0.0 - 90-RP-refill_oil()-0.0 - 91-RP-store_oil()-0.0] : dec_car_maintenance_R
	88-RP-go_front_car()-0.0 => [88-RP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[89-RP-refill_washer()-0.0, 90-RP-refill_oil()-0.0, 91-RP-store_oil()-0.0]
	89-RP-refill_washer()-0.0 => [89-RP-refill_washer()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[90-RP-refill_oil()-0.0, 91-RP-store_oil()-0.0]
	90-RP-refill_oil()-0.0 => [90-RP-refill_oil()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[91-RP-store_oil()-0.0]
	91-RP-store_oil()-0.0 => [91-RP-store_oil()-0.0] : 
[92m	already done[0m
	91-RP-store_oil()-0.0 => DecompType.BOTH_AGENDAS_EMPTY
	end 0
refinement = 
[
	dec_handling_lights_start_replace: [DecompType.BOTH_AGENDAS_EMPTY]
]
BOTH_AGENDAS_EMPTY
applied refinement = 
next actions:

=> end explo
node explored = 9.0 Flag.E Type.F#2, (human close_hood ()) -3> (human IDLE []) prev=#1 next=[]
new_e_flagged_nodes : 
	9.0 Flag.E Type.F#2, (human close_hood ()) -3> (human IDLE []) prev=#1 next=[]
e_flagged_nodes :
	8.0 Flag.E Type.I#3, (human close_hood ()) -1> (human close_hood ()) prev=#1 next=[]
	9.0 Flag.E Type.F#2, (human close_hood ()) -3> (human IDLE []) prev=#1 next=[]
Ns before check = None
Nf = 9.0 Flag.E Type.F#2, (human close_hood ()) -3> (human IDLE []) prev=#1 next=[]
new Ns!
Ns after check = 9.0 Flag.S Type.F#2, (human close_hood ()) -3> (human IDLE []) prev=#1 next=[]
e_flagged_nodes after check solution:
	8.0 Flag.E Type.I#3, (human close_hood ()) -1> (human close_hood ()) prev=#1 next=[]

<@> picked node = 8.0 Flag.E Type.I#3, (human close_hood ()) -1> (human close_hood ()) prev=#1 next=[]
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-6-RP-store_oil()-0.0
||	-0-RA-Car_maintenance()
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 6-RP-store_oil()-0.0
decomp i= 0 : dec_handling_lights_start_checking
	end 0
refinement = 
[
	dec_handling_lights_start_checking: [6-RP-store_oil()-0.0]
]
Decomp OK
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
same effects
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 92-RP-store_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
human- Refine agenda with r_beliefs
refinement:
[
	dec_handling_lights_start_checking: [DecompType.AGENDA_EMPTY]
]
refinement_r:
[
	dec_handling_lights_start_checking: [DecompType.AGENDA_EMPTY]
]
refinement_r_beliefs:
[
	dec_handling_lights_start_checking: [DecompType.AGENDA_EMPTY]
]
refinement_h_beliefs:
[
	dec_handling_lights_start_checking: [DecompType.AGENDA_EMPTY]
]
decomp  0
decomp_h.subtasks= []
decomp_r.subtasks= []
len(decomp_h.subtasks)= 0
len(decomp_r.subtasks)= 0
no alignment needed
No relevant belief divergence for refinement
refinement = 
[
	dec_handling_lights_start_checking: [DecompType.AGENDA_EMPTY]
]
AGENDA_EMPTY => IDLE added
applied refinement = 
next actions:
	- 93-HP-IDLE[]-0.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 0-RA-Car_maintenance()
decomp i= 0 : dec_handling_lights_start_checking
	0-RA-Car_maintenance() => [94-RP-go_front_car()-0.0 - 95-RP-refill_washer()-0.0 - 96-RP-refill_oil()-0.0 - 97-RP-store_oil()-0.0] : dec_car_maintenance_R
	94-RP-go_front_car()-0.0 => [94-RP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[95-RP-refill_washer()-0.0, 96-RP-refill_oil()-0.0, 97-RP-store_oil()-0.0]
	95-RP-refill_washer()-0.0 => [95-RP-refill_washer()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[96-RP-refill_oil()-0.0, 97-RP-store_oil()-0.0]
	96-RP-refill_oil()-0.0 => [96-RP-refill_oil()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[97-RP-store_oil()-0.0]
	97-RP-store_oil()-0.0 => [97-RP-store_oil()-0.0] : 
[92m	already done[0m
	97-RP-store_oil()-0.0 => DecompType.BOTH_AGENDAS_EMPTY
	end 0
refinement = 
[
	dec_handling_lights_start_checking: [DecompType.BOTH_AGENDAS_EMPTY]
]
BOTH_AGENDAS_EMPTY
applied refinement = 
next actions:

=> end explo
node explored = 9.0 Flag.E Type.F#3, (human close_hood ()) -3> (human IDLE []) prev=#1 next=[]
new_e_flagged_nodes : 
	9.0 Flag.E Type.F#3, (human close_hood ()) -3> (human IDLE []) prev=#1 next=[]
e_flagged_nodes :
	9.0 Flag.E Type.F#3, (human close_hood ()) -3> (human IDLE []) prev=#1 next=[]
Ns before check = 9.0 Flag.S Type.F#2, (human close_hood ()) -3> (human IDLE []) prev=#1 next=[]
Nf = 9.0 Flag.E Type.F#3, (human close_hood ()) -3> (human IDLE []) prev=#1 next=[]
Ns after check = 9.0 Flag.S Type.F#2, (human close_hood ()) -3> (human IDLE []) prev=#1 next=[]
e_flagged_nodes after check solution:
	=> time spent first exploration = 65ms
Start refining u nodes
	=> time spent refining = 0ms
Total duration = 65ms
Non relevant div:
False
Plans:
20-RP-COM_ALIGN['oil-None-low']-3.0 21-RP-refill_oil()-1.0 67-RP-COM_ALIGN['rear_light-None-new']-3.0 84-HP-close_hood()-1.0 86-RP-store_oil()-1.0 87-HP-IDLE[]-0.0/20-RP-COM_ALIGN['oil-None-low']-3.0 21-RP-refill_oil()-1.0 67-RP-COM_ALIGN['rear_light-None-new']-3.0 85-HP-close_hood()-1.0 92-RP-store_oil()-1.0 93-HP-IDLE[]-0.0
