RUN N=373 With=True
INITIAL STATES
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
|| robot_init.at_robot = front 	ObsType.OBS 	loc=front
|| robot_init.at_human = front 	ObsType.OBS 	loc=front
|| robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
|| robot_init.washer = full 	ObsType.OBS 	loc=front
|| robot_init.oil = low 	ObsType.INF 	loc=front
|| robot_init.hood = open 	ObsType.OBS 	loc=front
|| robot_init.rear_light = new 	ObsType.INF 	loc=rear
|| robot_init.left_light = ok 	ObsType.INF 	loc=front
|| robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
|| human_init.at_robot = front
|| human_init.at_human = front
|| human_init.at_oil_bottle = front
|| human_init.washer = low
|| human_init.oil = full
|| human_init.hood = open
|| human_init.rear_light = old
|| human_init.left_light = ok
|| human_init.right_light = ok
|________________________________________________________________________
Start first exploration
SA: human assessed washer <- full
first node = 0.0 Flag.E Type.I#1, (robot BEGIN []) -1> (robot BEGIN []) prev=None next=[]

<@> picked node = 0.0 Flag.E Type.I#1, (robot BEGIN []) -1> (robot BEGIN []) prev=None next=[]
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [3-HA-Handling_lights() - 4-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 3-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	3-HA-Handling_lights() => [5-HA-Replacing_rear_light() - 6-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [7-HA-Checking_front_lights(), 8-HA-Replacing_rear_light(), 4-HA-Closing_hood()]
	5-HA-Replacing_rear_light() => [9-HP-go_behind_car()-0.0 - 10-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	7-HA-Checking_front_lights() => [11-HP-go_front_car()-0.0 - 12-HP-check_left_light()-0.0 - 13-HP-check_right_light()-0.0] : dec_checking_front_ligths
	11-HP-go_front_car()-0.0 => [11-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[12-HP-check_left_light()-0.0, 13-HP-check_right_light()-0.0, 8-HA-Replacing_rear_light(), 4-HA-Closing_hood()]
	12-HP-check_left_light()-0.0 => [12-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[13-HP-check_right_light()-0.0, 8-HA-Replacing_rear_light(), 4-HA-Closing_hood()]
	13-HP-check_right_light()-0.0 => [13-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[8-HA-Replacing_rear_light(), 4-HA-Closing_hood()]
	8-HA-Replacing_rear_light() => [14-HP-go_behind_car()-0.0 - 15-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 1
human- Refine agenda with r_beliefs
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [16-HA-Handling_lights() - 17-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 16-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	16-HA-Handling_lights() => [18-HA-Replacing_rear_light() - 19-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [20-HA-Checking_front_lights(), 21-HA-Replacing_rear_light(), 17-HA-Closing_hood()]
	18-HA-Replacing_rear_light() => [] : dec_replacing_rear_light
[92m	refines into nothing[0m
	continue .. next_subtasks=[19-HA-Checking_front_lights(), 17-HA-Closing_hood()]
	19-HA-Checking_front_lights() => [22-HP-go_front_car()-0.0 - 23-HP-check_left_light()-0.0 - 24-HP-check_right_light()-0.0] : dec_checking_front_ligths
	22-HP-go_front_car()-0.0 => [22-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[23-HP-check_left_light()-0.0, 24-HP-check_right_light()-0.0, 17-HA-Closing_hood()]
	23-HP-check_left_light()-0.0 => [23-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[24-HP-check_right_light()-0.0, 17-HA-Closing_hood()]
	24-HP-check_right_light()-0.0 => [24-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[17-HA-Closing_hood()]
	17-HA-Closing_hood() => [25-HP-go_front_car()-0.0 - 26-HP-close_hood()-0.0] : dec_closing_hood
	25-HP-go_front_car()-0.0 => [25-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[26-HP-close_hood()-0.0]
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	20-HA-Checking_front_lights() => [27-HP-go_front_car()-0.0 - 28-HP-check_left_light()-0.0 - 29-HP-check_right_light()-0.0] : dec_checking_front_ligths
	27-HP-go_front_car()-0.0 => [27-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[28-HP-check_left_light()-0.0, 29-HP-check_right_light()-0.0, 21-HA-Replacing_rear_light(), 17-HA-Closing_hood()]
	28-HP-check_left_light()-0.0 => [28-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[29-HP-check_right_light()-0.0, 21-HA-Replacing_rear_light(), 17-HA-Closing_hood()]
	29-HP-check_right_light()-0.0 => [29-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[21-HA-Replacing_rear_light(), 17-HA-Closing_hood()]
	21-HA-Replacing_rear_light() => [] : dec_replacing_rear_light
[92m	refines into nothing[0m
	continue .. next_subtasks=[17-HA-Closing_hood()]
	17-HA-Closing_hood() => [30-HP-go_front_car()-0.0 - 31-HP-close_hood()-0.0] : dec_closing_hood
	30-HP-go_front_car()-0.0 => [30-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[31-HP-close_hood()-0.0]
	end 1
refinement:
[
	dec_handling_lights_start_replace: [9-HP-go_behind_car()-0.0 - 10-HP-replace_rear_light()-0.0 - 6-HA-Checking_front_lights() - 4-HA-Closing_hood()]
	dec_handling_lights_start_checking: [14-HP-go_behind_car()-0.0 - 15-HP-replace_rear_light()-0.0 - 4-HA-Closing_hood()]
]
refinement_r:
[
	dec_handling_lights_start_replace: [26-HP-close_hood()-0.0]
	dec_handling_lights_start_checking: [31-HP-close_hood()-0.0]
]
refinement_r_beliefs:
[
	dec_handling_lights_start_replace: [26-HP-close_hood()-0.0]
	dec_handling_lights_start_checking: [31-HP-close_hood()-0.0]
]
refinement_h_beliefs:
[
	dec_handling_lights_start_replace: [9-HP-go_behind_car()-0.0 - 10-HP-replace_rear_light()-0.0 - 6-HA-Checking_front_lights() - 4-HA-Closing_hood()]
	dec_handling_lights_start_checking: [14-HP-go_behind_car()-0.0 - 15-HP-replace_rear_light()-0.0 - 4-HA-Closing_hood()]
]
decomp  0
decomp_h.subtasks= [9-HP-go_behind_car()-0.0, 10-HP-replace_rear_light()-0.0, 6-HA-Checking_front_lights(), 4-HA-Closing_hood()]
decomp_r.subtasks= [26-HP-close_hood()-0.0]
Not same number of subtasks
NEED of belief alignment!

# UPDATE belief divergences
	oil:None: H=full R=low
	rear_light:None: H=old R=new

Testing with 1 relevant divergence
divergence tested = oil:None: H=full R=low
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : 
	1-HA-Car_maintenance() => [32-HA-Handling_lights() - 33-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 32-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	32-HA-Handling_lights() => [34-HA-Replacing_rear_light() - 35-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [36-HA-Checking_front_lights(), 37-HA-Replacing_rear_light(), 33-HA-Closing_hood()]
	34-HA-Replacing_rear_light() => [38-HP-go_behind_car()-0.0 - 39-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	36-HA-Checking_front_lights() => [40-HP-go_front_car()-0.0 - 41-HP-check_left_light()-0.0 - 42-HP-check_right_light()-0.0] : dec_checking_front_ligths
	40-HP-go_front_car()-0.0 => [40-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[41-HP-check_left_light()-0.0, 42-HP-check_right_light()-0.0, 37-HA-Replacing_rear_light(), 33-HA-Closing_hood()]
	41-HP-check_left_light()-0.0 => [41-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[42-HP-check_right_light()-0.0, 37-HA-Replacing_rear_light(), 33-HA-Closing_hood()]
	42-HP-check_right_light()-0.0 => [42-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[37-HA-Replacing_rear_light(), 33-HA-Closing_hood()]
	37-HA-Replacing_rear_light() => [43-HP-go_behind_car()-0.0 - 44-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 1
ref_aligned 1:
[
	dec_handling_lights_start_replace: [38-HP-go_behind_car()-0.0 - 39-HP-replace_rear_light()-0.0 - 35-HA-Checking_front_lights() - 33-HA-Closing_hood()]
	dec_handling_lights_start_checking: [43-HP-go_behind_car()-0.0 - 44-HP-replace_rear_light()-0.0 - 33-HA-Closing_hood()]
]
Check if ok
refinement_r_beliefs:
[
	dec_handling_lights_start_replace: [26-HP-close_hood()-0.0]
	dec_handling_lights_start_checking: [31-HP-close_hood()-0.0]
]
refinement_h_beliefs:
[
	dec_handling_lights_start_replace: [38-HP-go_behind_car()-0.0 - 39-HP-replace_rear_light()-0.0 - 35-HA-Checking_front_lights() - 33-HA-Closing_hood()]
	dec_handling_lights_start_checking: [43-HP-go_behind_car()-0.0 - 44-HP-replace_rear_light()-0.0 - 33-HA-Closing_hood()]
]
decomp  0
decomp_h.subtasks= [38-HP-go_behind_car()-0.0, 39-HP-replace_rear_light()-0.0, 35-HA-Checking_front_lights(), 33-HA-Closing_hood()]
decomp_r.subtasks= [26-HP-close_hood()-0.0]
Not same number of subtasks
	divergence isn't relevant
divergence tested = rear_light:None: H=old R=new
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : 
	1-HA-Car_maintenance() => [45-HA-Handling_lights() - 46-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 45-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	45-HA-Handling_lights() => [47-HA-Replacing_rear_light() - 48-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [49-HA-Checking_front_lights(), 50-HA-Replacing_rear_light(), 46-HA-Closing_hood()]
	47-HA-Replacing_rear_light() => [] : dec_replacing_rear_light
[92m	refines into nothing[0m
	continue .. next_subtasks=[48-HA-Checking_front_lights(), 46-HA-Closing_hood()]
	48-HA-Checking_front_lights() => [51-HP-go_front_car()-0.0 - 52-HP-check_left_light()-0.0 - 53-HP-check_right_light()-0.0] : dec_checking_front_ligths
	51-HP-go_front_car()-0.0 => [51-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[52-HP-check_left_light()-0.0, 53-HP-check_right_light()-0.0, 46-HA-Closing_hood()]
	52-HP-check_left_light()-0.0 => [52-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[53-HP-check_right_light()-0.0, 46-HA-Closing_hood()]
	53-HP-check_right_light()-0.0 => [53-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[46-HA-Closing_hood()]
	46-HA-Closing_hood() => [54-HP-go_front_car()-0.0 - 55-HP-close_hood()-0.0] : dec_closing_hood
	54-HP-go_front_car()-0.0 => [54-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[55-HP-close_hood()-0.0]
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	49-HA-Checking_front_lights() => [56-HP-go_front_car()-0.0 - 57-HP-check_left_light()-0.0 - 58-HP-check_right_light()-0.0] : dec_checking_front_ligths
	56-HP-go_front_car()-0.0 => [56-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[57-HP-check_left_light()-0.0, 58-HP-check_right_light()-0.0, 50-HA-Replacing_rear_light(), 46-HA-Closing_hood()]
	57-HP-check_left_light()-0.0 => [57-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[58-HP-check_right_light()-0.0, 50-HA-Replacing_rear_light(), 46-HA-Closing_hood()]
	58-HP-check_right_light()-0.0 => [58-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[50-HA-Replacing_rear_light(), 46-HA-Closing_hood()]
	50-HA-Replacing_rear_light() => [] : dec_replacing_rear_light
[92m	refines into nothing[0m
	continue .. next_subtasks=[46-HA-Closing_hood()]
	46-HA-Closing_hood() => [59-HP-go_front_car()-0.0 - 60-HP-close_hood()-0.0] : dec_closing_hood
	59-HP-go_front_car()-0.0 => [59-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[60-HP-close_hood()-0.0]
	end 1
ref_aligned 1:
[
	dec_handling_lights_start_replace: [55-HP-close_hood()-0.0]
	dec_handling_lights_start_checking: [60-HP-close_hood()-0.0]
]
Check if ok
refinement_r_beliefs:
[
	dec_handling_lights_start_replace: [26-HP-close_hood()-0.0]
	dec_handling_lights_start_checking: [31-HP-close_hood()-0.0]
]
refinement_h_beliefs:
[
	dec_handling_lights_start_replace: [55-HP-close_hood()-0.0]
	dec_handling_lights_start_checking: [60-HP-close_hood()-0.0]
]
decomp  0
decomp_h.subtasks= [55-HP-close_hood()-0.0]
decomp_r.subtasks= [26-HP-close_hood()-0.0]
len(decomp_h.subtasks)= 1
len(decomp_r.subtasks)= 1
i= 0
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
[93m55-HP-close_hood()-0.0 not applicable[0m
Operator isn't applicable with only one of the beliefs
	divergence isn't relevant
Testing with 2 relevant divergences
divs tested :
oil:None: H=full R=low
rear_light:None: H=old R=new
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : 
	1-HA-Car_maintenance() => [61-HA-Handling_lights() - 62-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 61-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	61-HA-Handling_lights() => [63-HA-Replacing_rear_light() - 64-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [65-HA-Checking_front_lights(), 66-HA-Replacing_rear_light(), 62-HA-Closing_hood()]
	63-HA-Replacing_rear_light() => [] : dec_replacing_rear_light
[92m	refines into nothing[0m
	continue .. next_subtasks=[64-HA-Checking_front_lights(), 62-HA-Closing_hood()]
	64-HA-Checking_front_lights() => [67-HP-go_front_car()-0.0 - 68-HP-check_left_light()-0.0 - 69-HP-check_right_light()-0.0] : dec_checking_front_ligths
	67-HP-go_front_car()-0.0 => [67-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[68-HP-check_left_light()-0.0, 69-HP-check_right_light()-0.0, 62-HA-Closing_hood()]
	68-HP-check_left_light()-0.0 => [68-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[69-HP-check_right_light()-0.0, 62-HA-Closing_hood()]
	69-HP-check_right_light()-0.0 => [69-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[62-HA-Closing_hood()]
	62-HA-Closing_hood() => [70-HP-go_front_car()-0.0 - 71-HP-close_hood()-0.0] : dec_closing_hood
	70-HP-go_front_car()-0.0 => [70-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[71-HP-close_hood()-0.0]
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	65-HA-Checking_front_lights() => [72-HP-go_front_car()-0.0 - 73-HP-check_left_light()-0.0 - 74-HP-check_right_light()-0.0] : dec_checking_front_ligths
	72-HP-go_front_car()-0.0 => [72-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[73-HP-check_left_light()-0.0, 74-HP-check_right_light()-0.0, 66-HA-Replacing_rear_light(), 62-HA-Closing_hood()]
	73-HP-check_left_light()-0.0 => [73-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[74-HP-check_right_light()-0.0, 66-HA-Replacing_rear_light(), 62-HA-Closing_hood()]
	74-HP-check_right_light()-0.0 => [74-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[66-HA-Replacing_rear_light(), 62-HA-Closing_hood()]
	66-HA-Replacing_rear_light() => [] : dec_replacing_rear_light
[92m	refines into nothing[0m
	continue .. next_subtasks=[62-HA-Closing_hood()]
	62-HA-Closing_hood() => [75-HP-go_front_car()-0.0 - 76-HP-close_hood()-0.0] : dec_closing_hood
	75-HP-go_front_car()-0.0 => [75-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[76-HP-close_hood()-0.0]
	end 1
refinement_r_beliefs:
[
	dec_handling_lights_start_replace: [26-HP-close_hood()-0.0]
	dec_handling_lights_start_checking: [31-HP-close_hood()-0.0]
]
refinement_h_beliefs:
[
	dec_handling_lights_start_replace: [71-HP-close_hood()-0.0]
	dec_handling_lights_start_checking: [76-HP-close_hood()-0.0]
]
decomp  0
decomp_h.subtasks= [71-HP-close_hood()-0.0]
decomp_r.subtasks= [26-HP-close_hood()-0.0]
len(decomp_h.subtasks)= 1
len(decomp_r.subtasks)= 1
i= 0
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
[93m71-HP-close_hood()-0.0 not applicable[0m
[93m71-HP-close_hood()-0.0 not applicable[0m
same effects
decomp  1
decomp_h.subtasks= [76-HP-close_hood()-0.0]
decomp_r.subtasks= [31-HP-close_hood()-0.0]
len(decomp_h.subtasks)= 1
len(decomp_r.subtasks)= 1
i= 1
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
[93m76-HP-close_hood()-0.0 not applicable[0m
[93m76-HP-close_hood()-0.0 not applicable[0m
same effects
no alignment needed
	divergences are relevant!
Relevant divergences to correct : 	oil:None: H=full R=low
	rear_light:None: H=old R=new

COM: com action added = 77-RP-COM_ALIGN['oil-None-low', 'rear_light-None-new']-3.0
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [78-HA-Handling_lights() - 79-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 78-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	78-HA-Handling_lights() => [80-HA-Replacing_rear_light() - 81-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [82-HA-Checking_front_lights(), 83-HA-Replacing_rear_light(), 79-HA-Closing_hood()]
	80-HA-Replacing_rear_light() => [] : dec_replacing_rear_light
[92m	refines into nothing[0m
	continue .. next_subtasks=[81-HA-Checking_front_lights(), 79-HA-Closing_hood()]
	81-HA-Checking_front_lights() => [84-HP-go_front_car()-0.0 - 85-HP-check_left_light()-0.0 - 86-HP-check_right_light()-0.0] : dec_checking_front_ligths
	84-HP-go_front_car()-0.0 => [84-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[85-HP-check_left_light()-0.0, 86-HP-check_right_light()-0.0, 79-HA-Closing_hood()]
	85-HP-check_left_light()-0.0 => [85-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[86-HP-check_right_light()-0.0, 79-HA-Closing_hood()]
	86-HP-check_right_light()-0.0 => [86-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[79-HA-Closing_hood()]
	79-HA-Closing_hood() => [87-HP-go_front_car()-0.0 - 88-HP-close_hood()-0.0] : dec_closing_hood
	87-HP-go_front_car()-0.0 => [87-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[88-HP-close_hood()-0.0]
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	82-HA-Checking_front_lights() => [89-HP-go_front_car()-0.0 - 90-HP-check_left_light()-0.0 - 91-HP-check_right_light()-0.0] : dec_checking_front_ligths
	89-HP-go_front_car()-0.0 => [89-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[90-HP-check_left_light()-0.0, 91-HP-check_right_light()-0.0, 83-HA-Replacing_rear_light(), 79-HA-Closing_hood()]
	90-HP-check_left_light()-0.0 => [90-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[91-HP-check_right_light()-0.0, 83-HA-Replacing_rear_light(), 79-HA-Closing_hood()]
	91-HP-check_right_light()-0.0 => [91-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[83-HA-Replacing_rear_light(), 79-HA-Closing_hood()]
	83-HA-Replacing_rear_light() => [] : dec_replacing_rear_light
[92m	refines into nothing[0m
	continue .. next_subtasks=[79-HA-Closing_hood()]
	79-HA-Closing_hood() => [92-HP-go_front_car()-0.0 - 93-HP-close_hood()-0.0] : dec_closing_hood
	92-HP-go_front_car()-0.0 => [92-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[93-HP-close_hood()-0.0]
	end 1
refinement = 
[
	dec_handling_lights_start_replace: [88-HP-close_hood()-0.0]
	dec_handling_lights_start_checking: [93-HP-close_hood()-0.0]
]
Decomp OK
apply acting agent
[93m88-HP-close_hood()-0.0 not applicable[0m
close_hood not feasible...
Decomp OK
apply acting agent
[93m93-HP-close_hood()-0.0 not applicable[0m
close_hood not feasible...
applied refinement = 
next actions:
	- 94-HP-WAIT[]-2.0
	- 95-HP-WAIT[]-2.0

=> end explo
node explored = 3.0 Flag.F Type.H#1, (robot BEGIN []) -1> (robot BEGIN []) prev=None next=[#2 #3]
new_e_flagged_nodes : 
	5.0 Flag.E Type.I#2, (human WAIT []) -1> (human WAIT []) prev=#1 next=[]
	5.0 Flag.E Type.I#3, (human WAIT []) -1> (human WAIT []) prev=#1 next=[]
e_flagged_nodes :
	5.0 Flag.E Type.I#2, (human WAIT []) -1> (human WAIT []) prev=#1 next=[]
	5.0 Flag.E Type.I#3, (human WAIT []) -1> (human WAIT []) prev=#1 next=[]
Ns before check = None
Nf = None
Ns after check = None
e_flagged_nodes after check solution:
	5.0 Flag.E Type.I#2, (human WAIT []) -1> (human WAIT []) prev=#1 next=[]
	5.0 Flag.E Type.I#3, (human WAIT []) -1> (human WAIT []) prev=#1 next=[]

<@> picked node = 5.0 Flag.E Type.I#2, (human WAIT []) -1> (human WAIT []) prev=#1 next=[]
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-88-HP-close_hood()-0.0
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 0-RA-Car_maintenance()
decomp i= 0 : origin
	0-RA-Car_maintenance() => [96-RP-go_front_car()-0.0 - 97-RP-refill_washer()-0.0 - 98-RP-refill_oil()-0.0 - 99-RP-store_oil()-0.0] : dec_car_maintenance_R
	96-RP-go_front_car()-0.0 => [96-RP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[97-RP-refill_washer()-0.0, 98-RP-refill_oil()-0.0, 99-RP-store_oil()-0.0]
	97-RP-refill_washer()-0.0 => [97-RP-refill_washer()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[98-RP-refill_oil()-0.0, 99-RP-store_oil()-0.0]
	end 0
refinement = 
[
	origin: [98-RP-refill_oil()-0.0 - 99-RP-store_oil()-0.0]
]
Decomp OK
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-88-HP-close_hood()-0.0
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
same effects
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 100-RP-refill_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-99-RP-store_oil()-0.0
| AGENDA human =
||	-88-HP-close_hood()-0.0
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 88-HP-close_hood()-0.0
decomp i= 0 : origin
	end 0
human- Refine agenda with r_beliefs
Task to refine: 88-HP-close_hood()-0.0
decomp i= 0 : origin
	end 0
refinement:
[
	origin: [88-HP-close_hood()-0.0]
]
refinement_r:
[
	origin: [88-HP-close_hood()-0.0]
]
refinement_r_beliefs:
[
	origin: [88-HP-close_hood()-0.0]
]
refinement_h_beliefs:
[
	origin: [88-HP-close_hood()-0.0]
]
decomp  0
decomp_h.subtasks= [88-HP-close_hood()-0.0]
decomp_r.subtasks= [88-HP-close_hood()-0.0]
len(decomp_h.subtasks)= 1
len(decomp_r.subtasks)= 1
i= 0
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
||	-99-RP-store_oil()-0.0
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
same effects
no alignment needed
No relevant belief divergence for refinement
refinement = 
[
	origin: [88-HP-close_hood()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 101-HP-close_hood()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-99-RP-store_oil()-0.0
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 99-RP-store_oil()-0.0
decomp i= 0 : origin
	end 0
refinement = 
[
	origin: [99-RP-store_oil()-0.0]
]
Decomp OK
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
same effects
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 102-RP-store_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
human- Refine agenda with r_beliefs
refinement:
[
	origin: [DecompType.BOTH_AGENDAS_EMPTY]
]
refinement_r:
[
	origin: [DecompType.BOTH_AGENDAS_EMPTY]
]
refinement_r_beliefs:
[
	origin: [DecompType.BOTH_AGENDAS_EMPTY]
]
refinement_h_beliefs:
[
	origin: [DecompType.BOTH_AGENDAS_EMPTY]
]
decomp  0
decomp_h.subtasks= []
decomp_r.subtasks= []
len(decomp_h.subtasks)= 0
len(decomp_r.subtasks)= 0
no alignment needed
No relevant belief divergence for refinement
refinement = 
[
	origin: [DecompType.BOTH_AGENDAS_EMPTY]
]
BOTH_AGENDAS_EMPTY
applied refinement = 
next actions:

=> end explo
node explored = 8.0 Flag.E Type.F#2, (human WAIT []) -4> (robot store_oil ()) prev=#1 next=[]
new_e_flagged_nodes : 
	8.0 Flag.E Type.F#2, (human WAIT []) -4> (robot store_oil ()) prev=#1 next=[]
e_flagged_nodes :
	5.0 Flag.E Type.I#3, (human WAIT []) -1> (human WAIT []) prev=#1 next=[]
	8.0 Flag.E Type.F#2, (human WAIT []) -4> (robot store_oil ()) prev=#1 next=[]
Ns before check = None
Nf = 8.0 Flag.E Type.F#2, (human WAIT []) -4> (robot store_oil ()) prev=#1 next=[]
new Ns!
Ns after check = 8.0 Flag.S Type.F#2, (human WAIT []) -4> (robot store_oil ()) prev=#1 next=[]
e_flagged_nodes after check solution:
	5.0 Flag.E Type.I#3, (human WAIT []) -1> (human WAIT []) prev=#1 next=[]

<@> picked node = 5.0 Flag.E Type.I#3, (human WAIT []) -1> (human WAIT []) prev=#1 next=[]
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-93-HP-close_hood()-0.0
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 0-RA-Car_maintenance()
decomp i= 0 : origin
	0-RA-Car_maintenance() => [103-RP-go_front_car()-0.0 - 104-RP-refill_washer()-0.0 - 105-RP-refill_oil()-0.0 - 106-RP-store_oil()-0.0] : dec_car_maintenance_R
	103-RP-go_front_car()-0.0 => [103-RP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[104-RP-refill_washer()-0.0, 105-RP-refill_oil()-0.0, 106-RP-store_oil()-0.0]
	104-RP-refill_washer()-0.0 => [104-RP-refill_washer()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[105-RP-refill_oil()-0.0, 106-RP-store_oil()-0.0]
	end 0
refinement = 
[
	origin: [105-RP-refill_oil()-0.0 - 106-RP-store_oil()-0.0]
]
Decomp OK
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-93-HP-close_hood()-0.0
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
same effects
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 107-RP-refill_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-106-RP-store_oil()-0.0
| AGENDA human =
||	-93-HP-close_hood()-0.0
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 93-HP-close_hood()-0.0
decomp i= 0 : origin
	end 0
human- Refine agenda with r_beliefs
Task to refine: 93-HP-close_hood()-0.0
decomp i= 0 : origin
	end 0
refinement:
[
	origin: [93-HP-close_hood()-0.0]
]
refinement_r:
[
	origin: [93-HP-close_hood()-0.0]
]
refinement_r_beliefs:
[
	origin: [93-HP-close_hood()-0.0]
]
refinement_h_beliefs:
[
	origin: [93-HP-close_hood()-0.0]
]
decomp  0
decomp_h.subtasks= [93-HP-close_hood()-0.0]
decomp_r.subtasks= [93-HP-close_hood()-0.0]
len(decomp_h.subtasks)= 1
len(decomp_r.subtasks)= 1
i= 0
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
||	-106-RP-store_oil()-0.0
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
same effects
no alignment needed
No relevant belief divergence for refinement
refinement = 
[
	origin: [93-HP-close_hood()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 108-HP-close_hood()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-106-RP-store_oil()-0.0
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 106-RP-store_oil()-0.0
decomp i= 0 : origin
	end 0
refinement = 
[
	origin: [106-RP-store_oil()-0.0]
]
Decomp OK
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
same effects
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 109-RP-store_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
human- Refine agenda with r_beliefs
refinement:
[
	origin: [DecompType.BOTH_AGENDAS_EMPTY]
]
refinement_r:
[
	origin: [DecompType.BOTH_AGENDAS_EMPTY]
]
refinement_r_beliefs:
[
	origin: [DecompType.BOTH_AGENDAS_EMPTY]
]
refinement_h_beliefs:
[
	origin: [DecompType.BOTH_AGENDAS_EMPTY]
]
decomp  0
decomp_h.subtasks= []
decomp_r.subtasks= []
len(decomp_h.subtasks)= 0
len(decomp_r.subtasks)= 0
no alignment needed
No relevant belief divergence for refinement
refinement = 
[
	origin: [DecompType.BOTH_AGENDAS_EMPTY]
]
BOTH_AGENDAS_EMPTY
applied refinement = 
next actions:

=> end explo
node explored = 8.0 Flag.E Type.F#3, (human WAIT []) -4> (robot store_oil ()) prev=#1 next=[]
new_e_flagged_nodes : 
	8.0 Flag.E Type.F#3, (human WAIT []) -4> (robot store_oil ()) prev=#1 next=[]
e_flagged_nodes :
	8.0 Flag.E Type.F#3, (human WAIT []) -4> (robot store_oil ()) prev=#1 next=[]
Ns before check = 8.0 Flag.S Type.F#2, (human WAIT []) -4> (robot store_oil ()) prev=#1 next=[]
Nf = 8.0 Flag.E Type.F#3, (human WAIT []) -4> (robot store_oil ()) prev=#1 next=[]
Ns after check = 8.0 Flag.S Type.F#2, (human WAIT []) -4> (robot store_oil ()) prev=#1 next=[]
e_flagged_nodes after check solution:
	=> time spent first exploration = 73ms
Start refining u nodes
	=> time spent refining = 0ms
Total duration = 73ms
Non relevant div:
False
Plans:
77-RP-COM_ALIGN['oil-None-low', 'rear_light-None-new']-3.0 94-HP-WAIT[]-2.0 100-RP-refill_oil()-1.0 101-HP-close_hood()-1.0 102-RP-store_oil()-1.0/77-RP-COM_ALIGN['oil-None-low', 'rear_light-None-new']-3.0 95-HP-WAIT[]-2.0 107-RP-refill_oil()-1.0 108-HP-close_hood()-1.0 109-RP-store_oil()-1.0
