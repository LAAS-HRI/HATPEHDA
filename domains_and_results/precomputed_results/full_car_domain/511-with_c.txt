RUN N=511 With=True
INITIAL STATES
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
|| robot_init.at_robot = front 	ObsType.OBS 	loc=front
|| robot_init.at_human = front 	ObsType.OBS 	loc=front
|| robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
|| robot_init.washer = full 	ObsType.OBS 	loc=front
|| robot_init.oil = full 	ObsType.INF 	loc=front
|| robot_init.hood = open 	ObsType.OBS 	loc=front
|| robot_init.rear_light = new 	ObsType.INF 	loc=rear
|| robot_init.left_light = ok 	ObsType.INF 	loc=front
|| robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
|| human_init.at_robot = front
|| human_init.at_human = front
|| human_init.at_oil_bottle = front
|| human_init.washer = full
|| human_init.oil = full
|| human_init.hood = open
|| human_init.rear_light = new
|| human_init.left_light = ok
|| human_init.right_light = ok
|________________________________________________________________________
Start first exploration
first node = 0.0 Flag.E Type.I#1, (robot BEGIN []) -1> (robot BEGIN []) prev=None next=[]

<@> picked node = 0.0 Flag.E Type.I#1, (robot BEGIN []) -1> (robot BEGIN []) prev=None next=[]
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [3-HA-Handling_lights() - 4-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 3-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	3-HA-Handling_lights() => [5-HA-Replacing_rear_light() - 6-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [7-HA-Checking_front_lights(), 8-HA-Replacing_rear_light(), 4-HA-Closing_hood()]
	5-HA-Replacing_rear_light() => [] : dec_replacing_rear_light
[92m	refines into nothing[0m
	continue .. next_subtasks=[6-HA-Checking_front_lights(), 4-HA-Closing_hood()]
	6-HA-Checking_front_lights() => [9-HP-go_front_car()-0.0 - 10-HP-check_left_light()-0.0 - 11-HP-check_right_light()-0.0] : dec_checking_front_ligths
	9-HP-go_front_car()-0.0 => [9-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[10-HP-check_left_light()-0.0, 11-HP-check_right_light()-0.0, 4-HA-Closing_hood()]
	10-HP-check_left_light()-0.0 => [10-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[11-HP-check_right_light()-0.0, 4-HA-Closing_hood()]
	11-HP-check_right_light()-0.0 => [11-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[4-HA-Closing_hood()]
	4-HA-Closing_hood() => [12-HP-go_front_car()-0.0 - 13-HP-close_hood()-0.0] : dec_closing_hood
	12-HP-go_front_car()-0.0 => [12-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[13-HP-close_hood()-0.0]
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	7-HA-Checking_front_lights() => [14-HP-go_front_car()-0.0 - 15-HP-check_left_light()-0.0 - 16-HP-check_right_light()-0.0] : dec_checking_front_ligths
	14-HP-go_front_car()-0.0 => [14-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[15-HP-check_left_light()-0.0, 16-HP-check_right_light()-0.0, 8-HA-Replacing_rear_light(), 4-HA-Closing_hood()]
	15-HP-check_left_light()-0.0 => [15-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[16-HP-check_right_light()-0.0, 8-HA-Replacing_rear_light(), 4-HA-Closing_hood()]
	16-HP-check_right_light()-0.0 => [16-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[8-HA-Replacing_rear_light(), 4-HA-Closing_hood()]
	8-HA-Replacing_rear_light() => [] : dec_replacing_rear_light
[92m	refines into nothing[0m
	continue .. next_subtasks=[4-HA-Closing_hood()]
	4-HA-Closing_hood() => [17-HP-go_front_car()-0.0 - 18-HP-close_hood()-0.0] : dec_closing_hood
	17-HP-go_front_car()-0.0 => [17-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[18-HP-close_hood()-0.0]
	end 1
human- Refine agenda with r_beliefs
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [19-HA-Handling_lights() - 20-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 19-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	19-HA-Handling_lights() => [21-HA-Replacing_rear_light() - 22-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [23-HA-Checking_front_lights(), 24-HA-Replacing_rear_light(), 20-HA-Closing_hood()]
	21-HA-Replacing_rear_light() => [] : dec_replacing_rear_light
[92m	refines into nothing[0m
	continue .. next_subtasks=[22-HA-Checking_front_lights(), 20-HA-Closing_hood()]
	22-HA-Checking_front_lights() => [25-HP-go_front_car()-0.0 - 26-HP-check_left_light()-0.0 - 27-HP-check_right_light()-0.0] : dec_checking_front_ligths
	25-HP-go_front_car()-0.0 => [25-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[26-HP-check_left_light()-0.0, 27-HP-check_right_light()-0.0, 20-HA-Closing_hood()]
	26-HP-check_left_light()-0.0 => [26-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[27-HP-check_right_light()-0.0, 20-HA-Closing_hood()]
	27-HP-check_right_light()-0.0 => [27-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[20-HA-Closing_hood()]
	20-HA-Closing_hood() => [28-HP-go_front_car()-0.0 - 29-HP-close_hood()-0.0] : dec_closing_hood
	28-HP-go_front_car()-0.0 => [28-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[29-HP-close_hood()-0.0]
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	23-HA-Checking_front_lights() => [30-HP-go_front_car()-0.0 - 31-HP-check_left_light()-0.0 - 32-HP-check_right_light()-0.0] : dec_checking_front_ligths
	30-HP-go_front_car()-0.0 => [30-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[31-HP-check_left_light()-0.0, 32-HP-check_right_light()-0.0, 24-HA-Replacing_rear_light(), 20-HA-Closing_hood()]
	31-HP-check_left_light()-0.0 => [31-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[32-HP-check_right_light()-0.0, 24-HA-Replacing_rear_light(), 20-HA-Closing_hood()]
	32-HP-check_right_light()-0.0 => [32-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[24-HA-Replacing_rear_light(), 20-HA-Closing_hood()]
	24-HA-Replacing_rear_light() => [] : dec_replacing_rear_light
[92m	refines into nothing[0m
	continue .. next_subtasks=[20-HA-Closing_hood()]
	20-HA-Closing_hood() => [33-HP-go_front_car()-0.0 - 34-HP-close_hood()-0.0] : dec_closing_hood
	33-HP-go_front_car()-0.0 => [33-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[34-HP-close_hood()-0.0]
	end 1
refinement:
[
	dec_handling_lights_start_replace: [13-HP-close_hood()-0.0]
	dec_handling_lights_start_checking: [18-HP-close_hood()-0.0]
]
refinement_r:
[
	dec_handling_lights_start_replace: [29-HP-close_hood()-0.0]
	dec_handling_lights_start_checking: [34-HP-close_hood()-0.0]
]
refinement_r_beliefs:
[
	dec_handling_lights_start_replace: [29-HP-close_hood()-0.0]
	dec_handling_lights_start_checking: [34-HP-close_hood()-0.0]
]
refinement_h_beliefs:
[
	dec_handling_lights_start_replace: [13-HP-close_hood()-0.0]
	dec_handling_lights_start_checking: [18-HP-close_hood()-0.0]
]
decomp  0
decomp_h.subtasks= [13-HP-close_hood()-0.0]
decomp_r.subtasks= [29-HP-close_hood()-0.0]
len(decomp_h.subtasks)= 1
len(decomp_r.subtasks)= 1
i= 0
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
same effects
decomp  1
decomp_h.subtasks= [18-HP-close_hood()-0.0]
decomp_r.subtasks= [34-HP-close_hood()-0.0]
len(decomp_h.subtasks)= 1
len(decomp_r.subtasks)= 1
i= 1
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
same effects
no alignment needed
No relevant belief divergence for refinement
refinement = 
[
	dec_handling_lights_start_replace: [13-HP-close_hood()-0.0]
	dec_handling_lights_start_checking: [18-HP-close_hood()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 35-HP-close_hood()-1.0
	- 36-HP-close_hood()-1.0

=> end explo
node explored = 0.0 Flag.F Type.H#1, (robot BEGIN []) -1> (robot BEGIN []) prev=None next=[#2 #3]
new_e_flagged_nodes : 
	1.0 Flag.E Type.I#2, (human close_hood ()) -1> (human close_hood ()) prev=#1 next=[]
	1.0 Flag.E Type.I#3, (human close_hood ()) -1> (human close_hood ()) prev=#1 next=[]
e_flagged_nodes :
	1.0 Flag.E Type.I#2, (human close_hood ()) -1> (human close_hood ()) prev=#1 next=[]
	1.0 Flag.E Type.I#3, (human close_hood ()) -1> (human close_hood ()) prev=#1 next=[]
Ns before check = None
Nf = None
Ns after check = None
e_flagged_nodes after check solution:
	1.0 Flag.E Type.I#2, (human close_hood ()) -1> (human close_hood ()) prev=#1 next=[]
	1.0 Flag.E Type.I#3, (human close_hood ()) -1> (human close_hood ()) prev=#1 next=[]

<@> picked node = 1.0 Flag.E Type.I#2, (human close_hood ()) -1> (human close_hood ()) prev=#1 next=[]
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 0-RA-Car_maintenance()
decomp i= 0 : dec_handling_lights_start_replace
	0-RA-Car_maintenance() => [37-RP-go_front_car()-0.0 - 38-RP-refill_washer()-0.0 - 39-RP-refill_oil()-0.0 - 40-RP-store_oil()-0.0] : dec_car_maintenance_R
	37-RP-go_front_car()-0.0 => [37-RP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[38-RP-refill_washer()-0.0, 39-RP-refill_oil()-0.0, 40-RP-store_oil()-0.0]
	38-RP-refill_washer()-0.0 => [38-RP-refill_washer()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[39-RP-refill_oil()-0.0, 40-RP-store_oil()-0.0]
	39-RP-refill_oil()-0.0 => [39-RP-refill_oil()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[40-RP-store_oil()-0.0]
	end 0
refinement = 
[
	dec_handling_lights_start_replace: [40-RP-store_oil()-0.0]
]
Decomp OK
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
same effects
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 41-RP-store_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
human- Refine agenda with r_beliefs
refinement:
[
	dec_handling_lights_start_replace: [DecompType.BOTH_AGENDAS_EMPTY]
]
refinement_r:
[
	dec_handling_lights_start_replace: [DecompType.BOTH_AGENDAS_EMPTY]
]
refinement_r_beliefs:
[
	dec_handling_lights_start_replace: [DecompType.BOTH_AGENDAS_EMPTY]
]
refinement_h_beliefs:
[
	dec_handling_lights_start_replace: [DecompType.BOTH_AGENDAS_EMPTY]
]
decomp  0
decomp_h.subtasks= []
decomp_r.subtasks= []
len(decomp_h.subtasks)= 0
len(decomp_r.subtasks)= 0
no alignment needed
No relevant belief divergence for refinement
refinement = 
[
	dec_handling_lights_start_replace: [DecompType.BOTH_AGENDAS_EMPTY]
]
BOTH_AGENDAS_EMPTY
applied refinement = 
next actions:

=> end explo
node explored = 2.0 Flag.E Type.F#2, (human close_hood ()) -2> (robot store_oil ()) prev=#1 next=[]
new_e_flagged_nodes : 
	2.0 Flag.E Type.F#2, (human close_hood ()) -2> (robot store_oil ()) prev=#1 next=[]
e_flagged_nodes :
	1.0 Flag.E Type.I#3, (human close_hood ()) -1> (human close_hood ()) prev=#1 next=[]
	2.0 Flag.E Type.F#2, (human close_hood ()) -2> (robot store_oil ()) prev=#1 next=[]
Ns before check = None
Nf = 2.0 Flag.E Type.F#2, (human close_hood ()) -2> (robot store_oil ()) prev=#1 next=[]
new Ns!
Ns after check = 2.0 Flag.S Type.F#2, (human close_hood ()) -2> (robot store_oil ()) prev=#1 next=[]
e_flagged_nodes after check solution:
	1.0 Flag.E Type.I#3, (human close_hood ()) -1> (human close_hood ()) prev=#1 next=[]

<@> picked node = 1.0 Flag.E Type.I#3, (human close_hood ()) -1> (human close_hood ()) prev=#1 next=[]
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 0-RA-Car_maintenance()
decomp i= 0 : dec_handling_lights_start_checking
	0-RA-Car_maintenance() => [42-RP-go_front_car()-0.0 - 43-RP-refill_washer()-0.0 - 44-RP-refill_oil()-0.0 - 45-RP-store_oil()-0.0] : dec_car_maintenance_R
	42-RP-go_front_car()-0.0 => [42-RP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[43-RP-refill_washer()-0.0, 44-RP-refill_oil()-0.0, 45-RP-store_oil()-0.0]
	43-RP-refill_washer()-0.0 => [43-RP-refill_washer()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[44-RP-refill_oil()-0.0, 45-RP-store_oil()-0.0]
	44-RP-refill_oil()-0.0 => [44-RP-refill_oil()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[45-RP-store_oil()-0.0]
	end 0
refinement = 
[
	dec_handling_lights_start_checking: [45-RP-store_oil()-0.0]
]
Decomp OK
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
same effects
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 46-RP-store_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
human- Refine agenda with r_beliefs
refinement:
[
	dec_handling_lights_start_checking: [DecompType.BOTH_AGENDAS_EMPTY]
]
refinement_r:
[
	dec_handling_lights_start_checking: [DecompType.BOTH_AGENDAS_EMPTY]
]
refinement_r_beliefs:
[
	dec_handling_lights_start_checking: [DecompType.BOTH_AGENDAS_EMPTY]
]
refinement_h_beliefs:
[
	dec_handling_lights_start_checking: [DecompType.BOTH_AGENDAS_EMPTY]
]
decomp  0
decomp_h.subtasks= []
decomp_r.subtasks= []
len(decomp_h.subtasks)= 0
len(decomp_r.subtasks)= 0
no alignment needed
No relevant belief divergence for refinement
refinement = 
[
	dec_handling_lights_start_checking: [DecompType.BOTH_AGENDAS_EMPTY]
]
BOTH_AGENDAS_EMPTY
applied refinement = 
next actions:

=> end explo
node explored = 2.0 Flag.E Type.F#3, (human close_hood ()) -2> (robot store_oil ()) prev=#1 next=[]
new_e_flagged_nodes : 
	2.0 Flag.E Type.F#3, (human close_hood ()) -2> (robot store_oil ()) prev=#1 next=[]
e_flagged_nodes :
	2.0 Flag.E Type.F#3, (human close_hood ()) -2> (robot store_oil ()) prev=#1 next=[]
Ns before check = 2.0 Flag.S Type.F#2, (human close_hood ()) -2> (robot store_oil ()) prev=#1 next=[]
Nf = 2.0 Flag.E Type.F#3, (human close_hood ()) -2> (robot store_oil ()) prev=#1 next=[]
Ns after check = 2.0 Flag.S Type.F#2, (human close_hood ()) -2> (robot store_oil ()) prev=#1 next=[]
e_flagged_nodes after check solution:
	=> time spent first exploration = 29ms
Start refining u nodes
	=> time spent refining = 0ms
Total duration = 29ms
Non relevant div:
False
Plans:
35-HP-close_hood()-1.0 41-RP-store_oil()-1.0/36-HP-close_hood()-1.0 46-RP-store_oil()-1.0
