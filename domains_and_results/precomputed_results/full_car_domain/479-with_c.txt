RUN N=479 With=True
INITIAL STATES
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
|| robot_init.at_robot = front 	ObsType.OBS 	loc=front
|| robot_init.at_human = front 	ObsType.OBS 	loc=front
|| robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
|| robot_init.washer = full 	ObsType.OBS 	loc=front
|| robot_init.oil = full 	ObsType.INF 	loc=front
|| robot_init.hood = open 	ObsType.OBS 	loc=front
|| robot_init.rear_light = new 	ObsType.INF 	loc=rear
|| robot_init.left_light = todo 	ObsType.INF 	loc=front
|| robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
|| human_init.at_robot = front
|| human_init.at_human = front
|| human_init.at_oil_bottle = front
|| human_init.washer = full
|| human_init.oil = full
|| human_init.hood = open
|| human_init.rear_light = new
|| human_init.left_light = todo
|| human_init.right_light = ok
|________________________________________________________________________
Start first exploration
first node = 0.0 Flag.E Type.I#1, (robot BEGIN []) -1> (robot BEGIN []) prev=None next=[]

<@> picked node = 0.0 Flag.E Type.I#1, (robot BEGIN []) -1> (robot BEGIN []) prev=None next=[]
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = todo 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = todo
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [3-HA-Handling_lights() - 4-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 3-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	3-HA-Handling_lights() => [5-HA-Replacing_rear_light() - 6-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [7-HA-Checking_front_lights(), 8-HA-Replacing_rear_light(), 4-HA-Closing_hood()]
	5-HA-Replacing_rear_light() => [] : dec_replacing_rear_light
[92m	refines into nothing[0m
	continue .. next_subtasks=[6-HA-Checking_front_lights(), 4-HA-Closing_hood()]
	6-HA-Checking_front_lights() => [9-HP-go_front_car()-0.0 - 10-HP-check_left_light()-0.0 - 11-HP-check_right_light()-0.0] : dec_checking_front_ligths
	9-HP-go_front_car()-0.0 => [9-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[10-HP-check_left_light()-0.0, 11-HP-check_right_light()-0.0, 4-HA-Closing_hood()]
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	7-HA-Checking_front_lights() => [12-HP-go_front_car()-0.0 - 13-HP-check_left_light()-0.0 - 14-HP-check_right_light()-0.0] : dec_checking_front_ligths
	12-HP-go_front_car()-0.0 => [12-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[13-HP-check_left_light()-0.0, 14-HP-check_right_light()-0.0, 8-HA-Replacing_rear_light(), 4-HA-Closing_hood()]
	end 1
human- Refine agenda with r_beliefs
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [15-HA-Handling_lights() - 16-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 15-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	15-HA-Handling_lights() => [17-HA-Replacing_rear_light() - 18-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [19-HA-Checking_front_lights(), 20-HA-Replacing_rear_light(), 16-HA-Closing_hood()]
	17-HA-Replacing_rear_light() => [] : dec_replacing_rear_light
[92m	refines into nothing[0m
	continue .. next_subtasks=[18-HA-Checking_front_lights(), 16-HA-Closing_hood()]
	18-HA-Checking_front_lights() => [21-HP-go_front_car()-0.0 - 22-HP-check_left_light()-0.0 - 23-HP-check_right_light()-0.0] : dec_checking_front_ligths
	21-HP-go_front_car()-0.0 => [21-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[22-HP-check_left_light()-0.0, 23-HP-check_right_light()-0.0, 16-HA-Closing_hood()]
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	19-HA-Checking_front_lights() => [24-HP-go_front_car()-0.0 - 25-HP-check_left_light()-0.0 - 26-HP-check_right_light()-0.0] : dec_checking_front_ligths
	24-HP-go_front_car()-0.0 => [24-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[25-HP-check_left_light()-0.0, 26-HP-check_right_light()-0.0, 20-HA-Replacing_rear_light(), 16-HA-Closing_hood()]
	end 1
refinement:
[
	dec_handling_lights_start_replace: [10-HP-check_left_light()-0.0 - 11-HP-check_right_light()-0.0 - 4-HA-Closing_hood()]
	dec_handling_lights_start_checking: [13-HP-check_left_light()-0.0 - 14-HP-check_right_light()-0.0 - 8-HA-Replacing_rear_light() - 4-HA-Closing_hood()]
]
refinement_r:
[
	dec_handling_lights_start_replace: [22-HP-check_left_light()-0.0 - 23-HP-check_right_light()-0.0 - 16-HA-Closing_hood()]
	dec_handling_lights_start_checking: [25-HP-check_left_light()-0.0 - 26-HP-check_right_light()-0.0 - 20-HA-Replacing_rear_light() - 16-HA-Closing_hood()]
]
refinement_r_beliefs:
[
	dec_handling_lights_start_replace: [22-HP-check_left_light()-0.0 - 23-HP-check_right_light()-0.0 - 16-HA-Closing_hood()]
	dec_handling_lights_start_checking: [25-HP-check_left_light()-0.0 - 26-HP-check_right_light()-0.0 - 20-HA-Replacing_rear_light() - 16-HA-Closing_hood()]
]
refinement_h_beliefs:
[
	dec_handling_lights_start_replace: [10-HP-check_left_light()-0.0 - 11-HP-check_right_light()-0.0 - 4-HA-Closing_hood()]
	dec_handling_lights_start_checking: [13-HP-check_left_light()-0.0 - 14-HP-check_right_light()-0.0 - 8-HA-Replacing_rear_light() - 4-HA-Closing_hood()]
]
decomp  0
decomp_h.subtasks= [10-HP-check_left_light()-0.0, 11-HP-check_right_light()-0.0, 4-HA-Closing_hood()]
decomp_r.subtasks= [22-HP-check_left_light()-0.0, 23-HP-check_right_light()-0.0, 16-HA-Closing_hood()]
len(decomp_h.subtasks)= 3
len(decomp_r.subtasks)= 3
i= 0
i= 0
i= 0
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = todo 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = todo
||human_init.right_light = ok
|________________________________________________________________________
same effects
decomp  1
decomp_h.subtasks= [13-HP-check_left_light()-0.0, 14-HP-check_right_light()-0.0, 8-HA-Replacing_rear_light(), 4-HA-Closing_hood()]
decomp_r.subtasks= [25-HP-check_left_light()-0.0, 26-HP-check_right_light()-0.0, 20-HA-Replacing_rear_light(), 16-HA-Closing_hood()]
len(decomp_h.subtasks)= 4
len(decomp_r.subtasks)= 4
i= 1
i= 1
i= 1
i= 1
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = todo 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = todo
||human_init.right_light = ok
|________________________________________________________________________
same effects
no alignment needed
No relevant belief divergence for refinement
refinement = 
[
	dec_handling_lights_start_replace: [10-HP-check_left_light()-0.0 - 11-HP-check_right_light()-0.0 - 4-HA-Closing_hood()]
	dec_handling_lights_start_checking: [13-HP-check_left_light()-0.0 - 14-HP-check_right_light()-0.0 - 8-HA-Replacing_rear_light() - 4-HA-Closing_hood()]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 27-HP-check_left_light()-1.0
	- 28-HP-check_left_light()-1.0

=> end explo
node explored = 0.0 Flag.F Type.H#1, (robot BEGIN []) -1> (robot BEGIN []) prev=None next=[#2 #3]
new_e_flagged_nodes : 
	1.0 Flag.E Type.I#2, (human check_left_light ()) -1> (human check_left_light ()) prev=#1 next=[]
	1.0 Flag.E Type.I#3, (human check_left_light ()) -1> (human check_left_light ()) prev=#1 next=[]
e_flagged_nodes :
	1.0 Flag.E Type.I#2, (human check_left_light ()) -1> (human check_left_light ()) prev=#1 next=[]
	1.0 Flag.E Type.I#3, (human check_left_light ()) -1> (human check_left_light ()) prev=#1 next=[]
Ns before check = None
Nf = None
Ns after check = None
e_flagged_nodes after check solution:
	1.0 Flag.E Type.I#2, (human check_left_light ()) -1> (human check_left_light ()) prev=#1 next=[]
	1.0 Flag.E Type.I#3, (human check_left_light ()) -1> (human check_left_light ()) prev=#1 next=[]

<@> picked node = 1.0 Flag.E Type.I#2, (human check_left_light ()) -1> (human check_left_light ()) prev=#1 next=[]
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-11-HP-check_right_light()-0.0
||	-4-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 0-RA-Car_maintenance()
decomp i= 0 : dec_handling_lights_start_replace
	0-RA-Car_maintenance() => [29-RP-go_front_car()-0.0 - 30-RP-refill_washer()-0.0 - 31-RP-refill_oil()-0.0 - 32-RP-store_oil()-0.0] : dec_car_maintenance_R
	29-RP-go_front_car()-0.0 => [29-RP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[30-RP-refill_washer()-0.0, 31-RP-refill_oil()-0.0, 32-RP-store_oil()-0.0]
	30-RP-refill_washer()-0.0 => [30-RP-refill_washer()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[31-RP-refill_oil()-0.0, 32-RP-store_oil()-0.0]
	31-RP-refill_oil()-0.0 => [31-RP-refill_oil()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[32-RP-store_oil()-0.0]
	end 0
refinement = 
[
	dec_handling_lights_start_replace: [32-RP-store_oil()-0.0]
]
Decomp OK
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-11-HP-check_right_light()-0.0
||	-4-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
same effects
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 33-RP-store_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-11-HP-check_right_light()-0.0
||	-4-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 11-HP-check_right_light()-0.0
decomp i= 0 : dec_handling_lights_start_replace
	11-HP-check_right_light()-0.0 => [11-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 4-HA-Closing_hood()
	4-HA-Closing_hood() => [34-HP-go_front_car()-0.0 - 35-HP-close_hood()-0.0] : dec_closing_hood
	34-HP-go_front_car()-0.0 => [34-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[35-HP-close_hood()-0.0]
	end 0
human- Refine agenda with r_beliefs
Task to refine: 11-HP-check_right_light()-0.0
decomp i= 0 : dec_handling_lights_start_replace
	11-HP-check_right_light()-0.0 => [11-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 4-HA-Closing_hood()
	4-HA-Closing_hood() => [36-HP-go_front_car()-0.0 - 37-HP-close_hood()-0.0] : dec_closing_hood
	36-HP-go_front_car()-0.0 => [36-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[37-HP-close_hood()-0.0]
	end 0
refinement:
[
	dec_handling_lights_start_replace: [35-HP-close_hood()-0.0]
]
refinement_r:
[
	dec_handling_lights_start_replace: [37-HP-close_hood()-0.0]
]
refinement_r_beliefs:
[
	dec_handling_lights_start_replace: [37-HP-close_hood()-0.0]
]
refinement_h_beliefs:
[
	dec_handling_lights_start_replace: [35-HP-close_hood()-0.0]
]
decomp  0
decomp_h.subtasks= [35-HP-close_hood()-0.0]
decomp_r.subtasks= [37-HP-close_hood()-0.0]
len(decomp_h.subtasks)= 1
len(decomp_r.subtasks)= 1
i= 0
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
same effects
no alignment needed
No relevant belief divergence for refinement
refinement = 
[
	dec_handling_lights_start_replace: [35-HP-close_hood()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 38-HP-close_hood()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
refinement = 
[
	dec_handling_lights_start_replace: [DecompType.BOTH_AGENDAS_EMPTY]
]
BOTH_AGENDAS_EMPTY
applied refinement = 
next actions:

=> end explo
node explored = 3.0 Flag.E Type.F#2, (human check_left_light ()) -3> (human close_hood ()) prev=#1 next=[]
new_e_flagged_nodes : 
	3.0 Flag.E Type.F#2, (human check_left_light ()) -3> (human close_hood ()) prev=#1 next=[]
e_flagged_nodes :
	1.0 Flag.E Type.I#3, (human check_left_light ()) -1> (human check_left_light ()) prev=#1 next=[]
	3.0 Flag.E Type.F#2, (human check_left_light ()) -3> (human close_hood ()) prev=#1 next=[]
Ns before check = None
Nf = 3.0 Flag.E Type.F#2, (human check_left_light ()) -3> (human close_hood ()) prev=#1 next=[]
new Ns!
Ns after check = 3.0 Flag.S Type.F#2, (human check_left_light ()) -3> (human close_hood ()) prev=#1 next=[]
e_flagged_nodes after check solution:
	1.0 Flag.E Type.I#3, (human check_left_light ()) -1> (human check_left_light ()) prev=#1 next=[]

<@> picked node = 1.0 Flag.E Type.I#3, (human check_left_light ()) -1> (human check_left_light ()) prev=#1 next=[]
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-14-HP-check_right_light()-0.0
||	-8-HA-Replacing_rear_light()
||	-4-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 0-RA-Car_maintenance()
decomp i= 0 : dec_handling_lights_start_checking
	0-RA-Car_maintenance() => [39-RP-go_front_car()-0.0 - 40-RP-refill_washer()-0.0 - 41-RP-refill_oil()-0.0 - 42-RP-store_oil()-0.0] : dec_car_maintenance_R
	39-RP-go_front_car()-0.0 => [39-RP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[40-RP-refill_washer()-0.0, 41-RP-refill_oil()-0.0, 42-RP-store_oil()-0.0]
	40-RP-refill_washer()-0.0 => [40-RP-refill_washer()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[41-RP-refill_oil()-0.0, 42-RP-store_oil()-0.0]
	41-RP-refill_oil()-0.0 => [41-RP-refill_oil()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[42-RP-store_oil()-0.0]
	end 0
refinement = 
[
	dec_handling_lights_start_checking: [42-RP-store_oil()-0.0]
]
Decomp OK
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-14-HP-check_right_light()-0.0
||	-8-HA-Replacing_rear_light()
||	-4-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
same effects
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 43-RP-store_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-14-HP-check_right_light()-0.0
||	-8-HA-Replacing_rear_light()
||	-4-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 14-HP-check_right_light()-0.0
decomp i= 0 : dec_handling_lights_start_checking
	14-HP-check_right_light()-0.0 => [14-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 8-HA-Replacing_rear_light()
	8-HA-Replacing_rear_light() => [] : dec_replacing_rear_light
[92m	refines into nothing[0m
	continue with next_task popped from agenda 4-HA-Closing_hood()
	4-HA-Closing_hood() => [44-HP-go_front_car()-0.0 - 45-HP-close_hood()-0.0] : dec_closing_hood
	44-HP-go_front_car()-0.0 => [44-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[45-HP-close_hood()-0.0]
	end 0
human- Refine agenda with r_beliefs
Task to refine: 14-HP-check_right_light()-0.0
decomp i= 0 : dec_handling_lights_start_checking
	14-HP-check_right_light()-0.0 => [14-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 8-HA-Replacing_rear_light()
	8-HA-Replacing_rear_light() => [] : dec_replacing_rear_light
[92m	refines into nothing[0m
	continue with next_task popped from agenda 4-HA-Closing_hood()
	4-HA-Closing_hood() => [46-HP-go_front_car()-0.0 - 47-HP-close_hood()-0.0] : dec_closing_hood
	46-HP-go_front_car()-0.0 => [46-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[47-HP-close_hood()-0.0]
	end 0
refinement:
[
	dec_handling_lights_start_checking: [45-HP-close_hood()-0.0]
]
refinement_r:
[
	dec_handling_lights_start_checking: [47-HP-close_hood()-0.0]
]
refinement_r_beliefs:
[
	dec_handling_lights_start_checking: [47-HP-close_hood()-0.0]
]
refinement_h_beliefs:
[
	dec_handling_lights_start_checking: [45-HP-close_hood()-0.0]
]
decomp  0
decomp_h.subtasks= [45-HP-close_hood()-0.0]
decomp_r.subtasks= [47-HP-close_hood()-0.0]
len(decomp_h.subtasks)= 1
len(decomp_r.subtasks)= 1
i= 0
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
same effects
no alignment needed
No relevant belief divergence for refinement
refinement = 
[
	dec_handling_lights_start_checking: [45-HP-close_hood()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 48-HP-close_hood()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
refinement = 
[
	dec_handling_lights_start_checking: [DecompType.BOTH_AGENDAS_EMPTY]
]
BOTH_AGENDAS_EMPTY
applied refinement = 
next actions:

=> end explo
node explored = 3.0 Flag.E Type.F#3, (human check_left_light ()) -3> (human close_hood ()) prev=#1 next=[]
new_e_flagged_nodes : 
	3.0 Flag.E Type.F#3, (human check_left_light ()) -3> (human close_hood ()) prev=#1 next=[]
e_flagged_nodes :
	3.0 Flag.E Type.F#3, (human check_left_light ()) -3> (human close_hood ()) prev=#1 next=[]
Ns before check = 3.0 Flag.S Type.F#2, (human check_left_light ()) -3> (human close_hood ()) prev=#1 next=[]
Nf = 3.0 Flag.E Type.F#3, (human check_left_light ()) -3> (human close_hood ()) prev=#1 next=[]
Ns after check = 3.0 Flag.S Type.F#2, (human check_left_light ()) -3> (human close_hood ()) prev=#1 next=[]
e_flagged_nodes after check solution:
	=> time spent first exploration = 35ms
Start refining u nodes
	=> time spent refining = 0ms
Total duration = 35ms
Non relevant div:
False
Plans:
27-HP-check_left_light()-1.0 33-RP-store_oil()-1.0 38-HP-close_hood()-1.0/28-HP-check_left_light()-1.0 43-RP-store_oil()-1.0 48-HP-close_hood()-1.0
