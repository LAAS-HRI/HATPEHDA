RUN N=480 With=True
INITIAL STATES
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
|| robot_init.at_robot = front 	ObsType.OBS 	loc=front
|| robot_init.at_human = front 	ObsType.OBS 	loc=front
|| robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
|| robot_init.washer = full 	ObsType.OBS 	loc=front
|| robot_init.oil = full 	ObsType.INF 	loc=front
|| robot_init.hood = open 	ObsType.OBS 	loc=front
|| robot_init.rear_light = new 	ObsType.INF 	loc=rear
|| robot_init.left_light = ok 	ObsType.INF 	loc=front
|| robot_init.right_light = todo 	ObsType.INF 	loc=front
| STATE human =
|| human_init.at_robot = front
|| human_init.at_human = front
|| human_init.at_oil_bottle = front
|| human_init.washer = low
|| human_init.oil = low
|| human_init.hood = open
|| human_init.rear_light = old
|| human_init.left_light = ok
|| human_init.right_light = todo
|________________________________________________________________________
Start first exploration
SA: human assessed washer <- full
first node = 0.0 Flag.E Type.I#1, (human BEGIN []) -1> (human BEGIN []) prev=None next=[]

<@> picked node = 0.0 Flag.E Type.I#1, (human BEGIN []) -1> (human BEGIN []) prev=None next=[]
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = todo 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = todo
|________________________________________________________________________
robot- Refine agenda
Task to refine: 0-RA-Car_maintenance()
decomp i= 0 : origin
	0-RA-Car_maintenance() => [3-RP-go_front_car()-0.0 - 4-RP-refill_washer()-0.0 - 5-RP-refill_oil()-0.0 - 6-RP-store_oil()-0.0] : dec_car_maintenance_R
	3-RP-go_front_car()-0.0 => [3-RP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[4-RP-refill_washer()-0.0, 5-RP-refill_oil()-0.0, 6-RP-store_oil()-0.0]
	4-RP-refill_washer()-0.0 => [4-RP-refill_washer()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[5-RP-refill_oil()-0.0, 6-RP-store_oil()-0.0]
	5-RP-refill_oil()-0.0 => [5-RP-refill_oil()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[6-RP-store_oil()-0.0]
	end 0
refinement = 
[
	origin: [6-RP-store_oil()-0.0]
]
Decomp OK
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = todo 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = todo
|________________________________________________________________________
same effects
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 7-RP-store_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = todo 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = todo
|________________________________________________________________________
human- Refine agenda
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [8-HA-Handling_lights() - 9-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 8-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	8-HA-Handling_lights() => [10-HA-Replacing_rear_light() - 11-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [12-HA-Checking_front_lights(), 13-HA-Replacing_rear_light(), 9-HA-Closing_hood()]
	10-HA-Replacing_rear_light() => [14-HP-go_behind_car()-0.0 - 15-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	12-HA-Checking_front_lights() => [16-HP-go_front_car()-0.0 - 17-HP-check_left_light()-0.0 - 18-HP-check_right_light()-0.0] : dec_checking_front_ligths
	16-HP-go_front_car()-0.0 => [16-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[17-HP-check_left_light()-0.0, 18-HP-check_right_light()-0.0, 13-HA-Replacing_rear_light(), 9-HA-Closing_hood()]
	17-HP-check_left_light()-0.0 => [17-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[18-HP-check_right_light()-0.0, 13-HA-Replacing_rear_light(), 9-HA-Closing_hood()]
	end 1
human- Refine agenda with r_beliefs
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [19-HA-Handling_lights() - 20-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 19-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	19-HA-Handling_lights() => [21-HA-Replacing_rear_light() - 22-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [23-HA-Checking_front_lights(), 24-HA-Replacing_rear_light(), 20-HA-Closing_hood()]
	21-HA-Replacing_rear_light() => [] : dec_replacing_rear_light
[92m	refines into nothing[0m
	continue .. next_subtasks=[22-HA-Checking_front_lights(), 20-HA-Closing_hood()]
	22-HA-Checking_front_lights() => [25-HP-go_front_car()-0.0 - 26-HP-check_left_light()-0.0 - 27-HP-check_right_light()-0.0] : dec_checking_front_ligths
	25-HP-go_front_car()-0.0 => [25-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[26-HP-check_left_light()-0.0, 27-HP-check_right_light()-0.0, 20-HA-Closing_hood()]
	26-HP-check_left_light()-0.0 => [26-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[27-HP-check_right_light()-0.0, 20-HA-Closing_hood()]
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	23-HA-Checking_front_lights() => [28-HP-go_front_car()-0.0 - 29-HP-check_left_light()-0.0 - 30-HP-check_right_light()-0.0] : dec_checking_front_ligths
	28-HP-go_front_car()-0.0 => [28-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[29-HP-check_left_light()-0.0, 30-HP-check_right_light()-0.0, 24-HA-Replacing_rear_light(), 20-HA-Closing_hood()]
	29-HP-check_left_light()-0.0 => [29-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[30-HP-check_right_light()-0.0, 24-HA-Replacing_rear_light(), 20-HA-Closing_hood()]
	end 1
refinement:
[
	dec_handling_lights_start_replace: [14-HP-go_behind_car()-0.0 - 15-HP-replace_rear_light()-0.0 - 11-HA-Checking_front_lights() - 9-HA-Closing_hood()]
	dec_handling_lights_start_checking: [18-HP-check_right_light()-0.0 - 13-HA-Replacing_rear_light() - 9-HA-Closing_hood()]
]
refinement_r:
[
	dec_handling_lights_start_replace: [27-HP-check_right_light()-0.0 - 20-HA-Closing_hood()]
	dec_handling_lights_start_checking: [30-HP-check_right_light()-0.0 - 24-HA-Replacing_rear_light() - 20-HA-Closing_hood()]
]
refinement_r_beliefs:
[
	dec_handling_lights_start_replace: [27-HP-check_right_light()-0.0 - 20-HA-Closing_hood()]
	dec_handling_lights_start_checking: [30-HP-check_right_light()-0.0 - 24-HA-Replacing_rear_light() - 20-HA-Closing_hood()]
]
refinement_h_beliefs:
[
	dec_handling_lights_start_replace: [14-HP-go_behind_car()-0.0 - 15-HP-replace_rear_light()-0.0 - 11-HA-Checking_front_lights() - 9-HA-Closing_hood()]
	dec_handling_lights_start_checking: [18-HP-check_right_light()-0.0 - 13-HA-Replacing_rear_light() - 9-HA-Closing_hood()]
]
decomp  0
decomp_h.subtasks= [14-HP-go_behind_car()-0.0, 15-HP-replace_rear_light()-0.0, 11-HA-Checking_front_lights(), 9-HA-Closing_hood()]
decomp_r.subtasks= [27-HP-check_right_light()-0.0, 20-HA-Closing_hood()]
Not same number of subtasks
NEED of belief alignment!

# UPDATE belief divergences
	oil:None: H=low R=full
	rear_light:None: H=old R=new

Testing with 1 relevant divergence
divergence tested = oil:None: H=low R=full
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : 
	1-HA-Car_maintenance() => [31-HA-Handling_lights() - 32-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 31-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	31-HA-Handling_lights() => [33-HA-Replacing_rear_light() - 34-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [35-HA-Checking_front_lights(), 36-HA-Replacing_rear_light(), 32-HA-Closing_hood()]
	33-HA-Replacing_rear_light() => [37-HP-go_behind_car()-0.0 - 38-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	35-HA-Checking_front_lights() => [39-HP-go_front_car()-0.0 - 40-HP-check_left_light()-0.0 - 41-HP-check_right_light()-0.0] : dec_checking_front_ligths
	39-HP-go_front_car()-0.0 => [39-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[40-HP-check_left_light()-0.0, 41-HP-check_right_light()-0.0, 36-HA-Replacing_rear_light(), 32-HA-Closing_hood()]
	40-HP-check_left_light()-0.0 => [40-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[41-HP-check_right_light()-0.0, 36-HA-Replacing_rear_light(), 32-HA-Closing_hood()]
	end 1
ref_aligned 1:
[
	dec_handling_lights_start_replace: [37-HP-go_behind_car()-0.0 - 38-HP-replace_rear_light()-0.0 - 34-HA-Checking_front_lights() - 32-HA-Closing_hood()]
	dec_handling_lights_start_checking: [41-HP-check_right_light()-0.0 - 36-HA-Replacing_rear_light() - 32-HA-Closing_hood()]
]
Check if ok
refinement_r_beliefs:
[
	dec_handling_lights_start_replace: [27-HP-check_right_light()-0.0 - 20-HA-Closing_hood()]
	dec_handling_lights_start_checking: [30-HP-check_right_light()-0.0 - 24-HA-Replacing_rear_light() - 20-HA-Closing_hood()]
]
refinement_h_beliefs:
[
	dec_handling_lights_start_replace: [37-HP-go_behind_car()-0.0 - 38-HP-replace_rear_light()-0.0 - 34-HA-Checking_front_lights() - 32-HA-Closing_hood()]
	dec_handling_lights_start_checking: [41-HP-check_right_light()-0.0 - 36-HA-Replacing_rear_light() - 32-HA-Closing_hood()]
]
decomp  0
decomp_h.subtasks= [37-HP-go_behind_car()-0.0, 38-HP-replace_rear_light()-0.0, 34-HA-Checking_front_lights(), 32-HA-Closing_hood()]
decomp_r.subtasks= [27-HP-check_right_light()-0.0, 20-HA-Closing_hood()]
Not same number of subtasks
	divergence isn't relevant
divergence tested = rear_light:None: H=old R=new
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : 
	1-HA-Car_maintenance() => [42-HA-Handling_lights() - 43-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 42-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	42-HA-Handling_lights() => [44-HA-Replacing_rear_light() - 45-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [46-HA-Checking_front_lights(), 47-HA-Replacing_rear_light(), 43-HA-Closing_hood()]
	44-HA-Replacing_rear_light() => [] : dec_replacing_rear_light
[92m	refines into nothing[0m
	continue .. next_subtasks=[45-HA-Checking_front_lights(), 43-HA-Closing_hood()]
	45-HA-Checking_front_lights() => [48-HP-go_front_car()-0.0 - 49-HP-check_left_light()-0.0 - 50-HP-check_right_light()-0.0] : dec_checking_front_ligths
	48-HP-go_front_car()-0.0 => [48-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[49-HP-check_left_light()-0.0, 50-HP-check_right_light()-0.0, 43-HA-Closing_hood()]
	49-HP-check_left_light()-0.0 => [49-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[50-HP-check_right_light()-0.0, 43-HA-Closing_hood()]
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	46-HA-Checking_front_lights() => [51-HP-go_front_car()-0.0 - 52-HP-check_left_light()-0.0 - 53-HP-check_right_light()-0.0] : dec_checking_front_ligths
	51-HP-go_front_car()-0.0 => [51-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[52-HP-check_left_light()-0.0, 53-HP-check_right_light()-0.0, 47-HA-Replacing_rear_light(), 43-HA-Closing_hood()]
	52-HP-check_left_light()-0.0 => [52-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[53-HP-check_right_light()-0.0, 47-HA-Replacing_rear_light(), 43-HA-Closing_hood()]
	end 1
ref_aligned 1:
[
	dec_handling_lights_start_replace: [50-HP-check_right_light()-0.0 - 43-HA-Closing_hood()]
	dec_handling_lights_start_checking: [53-HP-check_right_light()-0.0 - 47-HA-Replacing_rear_light() - 43-HA-Closing_hood()]
]
Check if ok
refinement_r_beliefs:
[
	dec_handling_lights_start_replace: [27-HP-check_right_light()-0.0 - 20-HA-Closing_hood()]
	dec_handling_lights_start_checking: [30-HP-check_right_light()-0.0 - 24-HA-Replacing_rear_light() - 20-HA-Closing_hood()]
]
refinement_h_beliefs:
[
	dec_handling_lights_start_replace: [50-HP-check_right_light()-0.0 - 43-HA-Closing_hood()]
	dec_handling_lights_start_checking: [53-HP-check_right_light()-0.0 - 47-HA-Replacing_rear_light() - 43-HA-Closing_hood()]
]
decomp  0
decomp_h.subtasks= [50-HP-check_right_light()-0.0, 43-HA-Closing_hood()]
decomp_r.subtasks= [27-HP-check_right_light()-0.0, 20-HA-Closing_hood()]
len(decomp_h.subtasks)= 2
len(decomp_r.subtasks)= 2
i= 0
i= 0
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = todo 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = todo
|________________________________________________________________________
same effects
decomp  1
decomp_h.subtasks= [53-HP-check_right_light()-0.0, 47-HA-Replacing_rear_light(), 43-HA-Closing_hood()]
decomp_r.subtasks= [30-HP-check_right_light()-0.0, 24-HA-Replacing_rear_light(), 20-HA-Closing_hood()]
len(decomp_h.subtasks)= 3
len(decomp_r.subtasks)= 3
i= 1
i= 1
i= 1
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = todo 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = todo
|________________________________________________________________________
same effects
no alignment needed
	divergence is relevant!
Relevant divergences to correct : 	rear_light:None: H=old R=new

COM: com action added = 54-RP-COM_ALIGN['rear_light-None-new']-3.0
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [55-HA-Handling_lights() - 56-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 55-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	55-HA-Handling_lights() => [57-HA-Replacing_rear_light() - 58-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [59-HA-Checking_front_lights(), 60-HA-Replacing_rear_light(), 56-HA-Closing_hood()]
	57-HA-Replacing_rear_light() => [] : dec_replacing_rear_light
[92m	refines into nothing[0m
	continue .. next_subtasks=[58-HA-Checking_front_lights(), 56-HA-Closing_hood()]
	58-HA-Checking_front_lights() => [61-HP-go_front_car()-0.0 - 62-HP-check_left_light()-0.0 - 63-HP-check_right_light()-0.0] : dec_checking_front_ligths
	61-HP-go_front_car()-0.0 => [61-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[62-HP-check_left_light()-0.0, 63-HP-check_right_light()-0.0, 56-HA-Closing_hood()]
	62-HP-check_left_light()-0.0 => [62-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[63-HP-check_right_light()-0.0, 56-HA-Closing_hood()]
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	59-HA-Checking_front_lights() => [64-HP-go_front_car()-0.0 - 65-HP-check_left_light()-0.0 - 66-HP-check_right_light()-0.0] : dec_checking_front_ligths
	64-HP-go_front_car()-0.0 => [64-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[65-HP-check_left_light()-0.0, 66-HP-check_right_light()-0.0, 60-HA-Replacing_rear_light(), 56-HA-Closing_hood()]
	65-HP-check_left_light()-0.0 => [65-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[66-HP-check_right_light()-0.0, 60-HA-Replacing_rear_light(), 56-HA-Closing_hood()]
	end 1
refinement = 
[
	dec_handling_lights_start_replace: [63-HP-check_right_light()-0.0 - 56-HA-Closing_hood()]
	dec_handling_lights_start_checking: [66-HP-check_right_light()-0.0 - 60-HA-Replacing_rear_light() - 56-HA-Closing_hood()]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 67-HP-check_right_light()-1.0
	- 68-HP-check_right_light()-1.0

=> end explo
node explored = 4.0 Flag.F Type.H#1, (human BEGIN []) -2> (robot store_oil ()) prev=None next=[#2 #3]
new_e_flagged_nodes : 
	5.0 Flag.E Type.I#2, (human check_right_light ()) -1> (human check_right_light ()) prev=#1 next=[]
	5.0 Flag.E Type.I#3, (human check_right_light ()) -1> (human check_right_light ()) prev=#1 next=[]
e_flagged_nodes :
	5.0 Flag.E Type.I#2, (human check_right_light ()) -1> (human check_right_light ()) prev=#1 next=[]
	5.0 Flag.E Type.I#3, (human check_right_light ()) -1> (human check_right_light ()) prev=#1 next=[]
Ns before check = None
Nf = None
Ns after check = None
e_flagged_nodes after check solution:
	5.0 Flag.E Type.I#2, (human check_right_light ()) -1> (human check_right_light ()) prev=#1 next=[]
	5.0 Flag.E Type.I#3, (human check_right_light ()) -1> (human check_right_light ()) prev=#1 next=[]

<@> picked node = 5.0 Flag.E Type.I#2, (human check_right_light ()) -1> (human check_right_light ()) prev=#1 next=[]
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-56-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
refinement = 
[
	dec_handling_lights_start_replace: [DecompType.AGENDA_EMPTY]
]
AGENDA_EMPTY => IDLE added
applied refinement = 
next actions:
	- 69-RP-IDLE[]-0.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-56-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 56-HA-Closing_hood()
decomp i= 0 : dec_handling_lights_start_replace
	56-HA-Closing_hood() => [70-HP-go_front_car()-0.0 - 71-HP-close_hood()-0.0] : dec_closing_hood
	70-HP-go_front_car()-0.0 => [70-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[71-HP-close_hood()-0.0]
	end 0
human- Refine agenda with r_beliefs
Task to refine: 56-HA-Closing_hood()
decomp i= 0 : dec_handling_lights_start_replace
	56-HA-Closing_hood() => [72-HP-go_front_car()-0.0 - 73-HP-close_hood()-0.0] : dec_closing_hood
	72-HP-go_front_car()-0.0 => [72-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[73-HP-close_hood()-0.0]
	end 0
refinement:
[
	dec_handling_lights_start_replace: [71-HP-close_hood()-0.0]
]
refinement_r:
[
	dec_handling_lights_start_replace: [73-HP-close_hood()-0.0]
]
refinement_r_beliefs:
[
	dec_handling_lights_start_replace: [73-HP-close_hood()-0.0]
]
refinement_h_beliefs:
[
	dec_handling_lights_start_replace: [71-HP-close_hood()-0.0]
]
decomp  0
decomp_h.subtasks= [71-HP-close_hood()-0.0]
decomp_r.subtasks= [73-HP-close_hood()-0.0]
len(decomp_h.subtasks)= 1
len(decomp_r.subtasks)= 1
i= 0
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
[93m71-HP-close_hood()-0.0 not applicable[0m
Operator isn't applicable with only one of the beliefs
NEED of belief alignment!

# UPDATE belief divergences
	oil:None: H=low R=full

Testing with 1 relevant divergence
divergence tested = oil:None: H=low R=full
Task to refine: 56-HA-Closing_hood()
decomp i= 0 : 
	56-HA-Closing_hood() => [74-HP-go_front_car()-0.0 - 75-HP-close_hood()-0.0] : dec_closing_hood
	74-HP-go_front_car()-0.0 => [74-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[75-HP-close_hood()-0.0]
	end 0
ref_aligned 1:
[
	: [75-HP-close_hood()-0.0]
]
Check if ok
refinement_r_beliefs:
[
	dec_handling_lights_start_replace: [73-HP-close_hood()-0.0]
]
refinement_h_beliefs:
[
	: [75-HP-close_hood()-0.0]
]
decomp  0
decomp_h.subtasks= [75-HP-close_hood()-0.0]
decomp_r.subtasks= [73-HP-close_hood()-0.0]
len(decomp_h.subtasks)= 1
len(decomp_r.subtasks)= 1
i= 0
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
same effects
no alignment needed
	divergence is relevant!
Relevant divergences to correct : 	oil:None: H=low R=full

COM: com action added = 76-RP-COM_ALIGN['oil-None-full']-3.0
Task to refine: 56-HA-Closing_hood()
decomp i= 0 : dec_handling_lights_start_replace
	56-HA-Closing_hood() => [77-HP-go_front_car()-0.0 - 78-HP-close_hood()-0.0] : dec_closing_hood
	77-HP-go_front_car()-0.0 => [77-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[78-HP-close_hood()-0.0]
	end 0
refinement = 
[
	dec_handling_lights_start_replace: [78-HP-close_hood()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 79-HP-close_hood()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
refinement = 
[
	dec_handling_lights_start_replace: [DecompType.BOTH_AGENDAS_EMPTY]
]
BOTH_AGENDAS_EMPTY
applied refinement = 
next actions:

=> end explo
node explored = 9.0 Flag.E Type.F#2, (human check_right_light ()) -3> (human close_hood ()) prev=#1 next=[]
new_e_flagged_nodes : 
	9.0 Flag.E Type.F#2, (human check_right_light ()) -3> (human close_hood ()) prev=#1 next=[]
e_flagged_nodes :
	5.0 Flag.E Type.I#3, (human check_right_light ()) -1> (human check_right_light ()) prev=#1 next=[]
	9.0 Flag.E Type.F#2, (human check_right_light ()) -3> (human close_hood ()) prev=#1 next=[]
Ns before check = None
Nf = 9.0 Flag.E Type.F#2, (human check_right_light ()) -3> (human close_hood ()) prev=#1 next=[]
new Ns!
Ns after check = 9.0 Flag.S Type.F#2, (human check_right_light ()) -3> (human close_hood ()) prev=#1 next=[]
e_flagged_nodes after check solution:
	5.0 Flag.E Type.I#3, (human check_right_light ()) -1> (human check_right_light ()) prev=#1 next=[]

<@> picked node = 5.0 Flag.E Type.I#3, (human check_right_light ()) -1> (human check_right_light ()) prev=#1 next=[]
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-60-HA-Replacing_rear_light()
||	-56-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
refinement = 
[
	dec_handling_lights_start_checking: [DecompType.AGENDA_EMPTY]
]
AGENDA_EMPTY => IDLE added
applied refinement = 
next actions:
	- 80-RP-IDLE[]-0.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-60-HA-Replacing_rear_light()
||	-56-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 60-HA-Replacing_rear_light()
decomp i= 0 : dec_handling_lights_start_checking
	60-HA-Replacing_rear_light() => [] : dec_replacing_rear_light
[92m	refines into nothing[0m
	continue with next_task popped from agenda 56-HA-Closing_hood()
	56-HA-Closing_hood() => [81-HP-go_front_car()-0.0 - 82-HP-close_hood()-0.0] : dec_closing_hood
	81-HP-go_front_car()-0.0 => [81-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[82-HP-close_hood()-0.0]
	end 0
human- Refine agenda with r_beliefs
Task to refine: 60-HA-Replacing_rear_light()
decomp i= 0 : dec_handling_lights_start_checking
	60-HA-Replacing_rear_light() => [] : dec_replacing_rear_light
[92m	refines into nothing[0m
	continue with next_task popped from agenda 56-HA-Closing_hood()
	56-HA-Closing_hood() => [83-HP-go_front_car()-0.0 - 84-HP-close_hood()-0.0] : dec_closing_hood
	83-HP-go_front_car()-0.0 => [83-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[84-HP-close_hood()-0.0]
	end 0
refinement:
[
	dec_handling_lights_start_checking: [82-HP-close_hood()-0.0]
]
refinement_r:
[
	dec_handling_lights_start_checking: [84-HP-close_hood()-0.0]
]
refinement_r_beliefs:
[
	dec_handling_lights_start_checking: [84-HP-close_hood()-0.0]
]
refinement_h_beliefs:
[
	dec_handling_lights_start_checking: [82-HP-close_hood()-0.0]
]
decomp  0
decomp_h.subtasks= [82-HP-close_hood()-0.0]
decomp_r.subtasks= [84-HP-close_hood()-0.0]
len(decomp_h.subtasks)= 1
len(decomp_r.subtasks)= 1
i= 0
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
[93m82-HP-close_hood()-0.0 not applicable[0m
Operator isn't applicable with only one of the beliefs
NEED of belief alignment!

# UPDATE belief divergences
	oil:None: H=low R=full

Testing with 1 relevant divergence
divergence tested = oil:None: H=low R=full
Task to refine: 60-HA-Replacing_rear_light()
decomp i= 0 : 
	60-HA-Replacing_rear_light() => [] : dec_replacing_rear_light
[92m	refines into nothing[0m
	continue with next_task popped from agenda 56-HA-Closing_hood()
	56-HA-Closing_hood() => [85-HP-go_front_car()-0.0 - 86-HP-close_hood()-0.0] : dec_closing_hood
	85-HP-go_front_car()-0.0 => [85-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[86-HP-close_hood()-0.0]
	end 0
ref_aligned 1:
[
	: [86-HP-close_hood()-0.0]
]
Check if ok
refinement_r_beliefs:
[
	dec_handling_lights_start_checking: [84-HP-close_hood()-0.0]
]
refinement_h_beliefs:
[
	: [86-HP-close_hood()-0.0]
]
decomp  0
decomp_h.subtasks= [86-HP-close_hood()-0.0]
decomp_r.subtasks= [84-HP-close_hood()-0.0]
len(decomp_h.subtasks)= 1
len(decomp_r.subtasks)= 1
i= 0
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
same effects
no alignment needed
	divergence is relevant!
Relevant divergences to correct : 	oil:None: H=low R=full

COM: com action added = 87-RP-COM_ALIGN['oil-None-full']-3.0
Task to refine: 60-HA-Replacing_rear_light()
decomp i= 0 : dec_handling_lights_start_checking
	60-HA-Replacing_rear_light() => [] : dec_replacing_rear_light
[92m	refines into nothing[0m
	continue with next_task popped from agenda 56-HA-Closing_hood()
	56-HA-Closing_hood() => [88-HP-go_front_car()-0.0 - 89-HP-close_hood()-0.0] : dec_closing_hood
	88-HP-go_front_car()-0.0 => [88-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[89-HP-close_hood()-0.0]
	end 0
refinement = 
[
	dec_handling_lights_start_checking: [89-HP-close_hood()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 90-HP-close_hood()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
refinement = 
[
	dec_handling_lights_start_checking: [DecompType.BOTH_AGENDAS_EMPTY]
]
BOTH_AGENDAS_EMPTY
applied refinement = 
next actions:

=> end explo
node explored = 9.0 Flag.E Type.F#3, (human check_right_light ()) -3> (human close_hood ()) prev=#1 next=[]
new_e_flagged_nodes : 
	9.0 Flag.E Type.F#3, (human check_right_light ()) -3> (human close_hood ()) prev=#1 next=[]
e_flagged_nodes :
	9.0 Flag.E Type.F#3, (human check_right_light ()) -3> (human close_hood ()) prev=#1 next=[]
Ns before check = 9.0 Flag.S Type.F#2, (human check_right_light ()) -3> (human close_hood ()) prev=#1 next=[]
Nf = 9.0 Flag.E Type.F#3, (human check_right_light ()) -3> (human close_hood ()) prev=#1 next=[]
Ns after check = 9.0 Flag.S Type.F#2, (human check_right_light ()) -3> (human close_hood ()) prev=#1 next=[]
e_flagged_nodes after check solution:
	=> time spent first exploration = 60ms
Start refining u nodes
	=> time spent refining = 0ms
Total duration = 60ms
Non relevant div:
False
Plans:
7-RP-store_oil()-1.0 54-RP-COM_ALIGN['rear_light-None-new']-3.0 67-HP-check_right_light()-1.0 69-RP-IDLE[]-0.0 76-RP-COM_ALIGN['oil-None-full']-3.0 79-HP-close_hood()-1.0/7-RP-store_oil()-1.0 54-RP-COM_ALIGN['rear_light-None-new']-3.0 68-HP-check_right_light()-1.0 80-RP-IDLE[]-0.0 87-RP-COM_ALIGN['oil-None-full']-3.0 90-HP-close_hood()-1.0
