RUN N=55 With=True
INITIAL STATES
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
|| robot_init.at_robot = front 	ObsType.OBS 	loc=front
|| robot_init.at_human = front 	ObsType.OBS 	loc=front
|| robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
|| robot_init.washer = low 	ObsType.OBS 	loc=front
|| robot_init.oil = low 	ObsType.INF 	loc=front
|| robot_init.hood = open 	ObsType.OBS 	loc=front
|| robot_init.rear_light = old 	ObsType.INF 	loc=rear
|| robot_init.left_light = ok 	ObsType.INF 	loc=front
|| robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
|| human_init.at_robot = front
|| human_init.at_human = front
|| human_init.at_oil_bottle = front
|| human_init.washer = low
|| human_init.oil = full
|| human_init.hood = open
|| human_init.rear_light = new
|| human_init.left_light = ok
|| human_init.right_light = ok
|________________________________________________________________________
Start first exploration
first node = 0.0 Flag.E Type.I#1, (robot BEGIN []) -1> (robot BEGIN []) prev=None next=[]

<@> picked node = 0.0 Flag.E Type.I#1, (robot BEGIN []) -1> (robot BEGIN []) prev=None next=[]
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = low 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [3-HA-Handling_lights() - 4-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 3-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	3-HA-Handling_lights() => [5-HA-Replacing_rear_light() - 6-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [7-HA-Checking_front_lights(), 8-HA-Replacing_rear_light(), 4-HA-Closing_hood()]
	5-HA-Replacing_rear_light() => [] : dec_replacing_rear_light
[92m	refines into nothing[0m
	continue .. next_subtasks=[6-HA-Checking_front_lights(), 4-HA-Closing_hood()]
	6-HA-Checking_front_lights() => [9-HP-go_front_car()-0.0 - 10-HP-check_left_light()-0.0 - 11-HP-check_right_light()-0.0] : dec_checking_front_ligths
	9-HP-go_front_car()-0.0 => [9-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[10-HP-check_left_light()-0.0, 11-HP-check_right_light()-0.0, 4-HA-Closing_hood()]
	10-HP-check_left_light()-0.0 => [10-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[11-HP-check_right_light()-0.0, 4-HA-Closing_hood()]
	11-HP-check_right_light()-0.0 => [11-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[4-HA-Closing_hood()]
	4-HA-Closing_hood() => [12-HP-go_front_car()-0.0 - 13-HP-close_hood()-0.0] : dec_closing_hood
	12-HP-go_front_car()-0.0 => [12-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[13-HP-close_hood()-0.0]
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	7-HA-Checking_front_lights() => [14-HP-go_front_car()-0.0 - 15-HP-check_left_light()-0.0 - 16-HP-check_right_light()-0.0] : dec_checking_front_ligths
	14-HP-go_front_car()-0.0 => [14-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[15-HP-check_left_light()-0.0, 16-HP-check_right_light()-0.0, 8-HA-Replacing_rear_light(), 4-HA-Closing_hood()]
	15-HP-check_left_light()-0.0 => [15-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[16-HP-check_right_light()-0.0, 8-HA-Replacing_rear_light(), 4-HA-Closing_hood()]
	16-HP-check_right_light()-0.0 => [16-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[8-HA-Replacing_rear_light(), 4-HA-Closing_hood()]
	8-HA-Replacing_rear_light() => [] : dec_replacing_rear_light
[92m	refines into nothing[0m
	continue .. next_subtasks=[4-HA-Closing_hood()]
	4-HA-Closing_hood() => [17-HP-go_front_car()-0.0 - 18-HP-close_hood()-0.0] : dec_closing_hood
	17-HP-go_front_car()-0.0 => [17-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[18-HP-close_hood()-0.0]
	end 1
human- Refine agenda with r_beliefs
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [19-HA-Handling_lights() - 20-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 19-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	19-HA-Handling_lights() => [21-HA-Replacing_rear_light() - 22-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [23-HA-Checking_front_lights(), 24-HA-Replacing_rear_light(), 20-HA-Closing_hood()]
	21-HA-Replacing_rear_light() => [25-HP-go_behind_car()-0.0 - 26-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	23-HA-Checking_front_lights() => [27-HP-go_front_car()-0.0 - 28-HP-check_left_light()-0.0 - 29-HP-check_right_light()-0.0] : dec_checking_front_ligths
	27-HP-go_front_car()-0.0 => [27-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[28-HP-check_left_light()-0.0, 29-HP-check_right_light()-0.0, 24-HA-Replacing_rear_light(), 20-HA-Closing_hood()]
	28-HP-check_left_light()-0.0 => [28-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[29-HP-check_right_light()-0.0, 24-HA-Replacing_rear_light(), 20-HA-Closing_hood()]
	29-HP-check_right_light()-0.0 => [29-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[24-HA-Replacing_rear_light(), 20-HA-Closing_hood()]
	24-HA-Replacing_rear_light() => [30-HP-go_behind_car()-0.0 - 31-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 1
refinement:
[
	dec_handling_lights_start_replace: [13-HP-close_hood()-0.0]
	dec_handling_lights_start_checking: [18-HP-close_hood()-0.0]
]
refinement_r:
[
	dec_handling_lights_start_replace: [25-HP-go_behind_car()-0.0 - 26-HP-replace_rear_light()-0.0 - 22-HA-Checking_front_lights() - 20-HA-Closing_hood()]
	dec_handling_lights_start_checking: [30-HP-go_behind_car()-0.0 - 31-HP-replace_rear_light()-0.0 - 20-HA-Closing_hood()]
]
refinement_r_beliefs:
[
	dec_handling_lights_start_replace: [25-HP-go_behind_car()-0.0 - 26-HP-replace_rear_light()-0.0 - 22-HA-Checking_front_lights() - 20-HA-Closing_hood()]
	dec_handling_lights_start_checking: [30-HP-go_behind_car()-0.0 - 31-HP-replace_rear_light()-0.0 - 20-HA-Closing_hood()]
]
refinement_h_beliefs:
[
	dec_handling_lights_start_replace: [13-HP-close_hood()-0.0]
	dec_handling_lights_start_checking: [18-HP-close_hood()-0.0]
]
decomp  0
decomp_h.subtasks= [13-HP-close_hood()-0.0]
decomp_r.subtasks= [25-HP-go_behind_car()-0.0, 26-HP-replace_rear_light()-0.0, 22-HA-Checking_front_lights(), 20-HA-Closing_hood()]
Not same number of subtasks
NEED of belief alignment!

# UPDATE belief divergences
	oil:None: H=full R=low
	rear_light:None: H=new R=old

Testing with 1 relevant divergence
divergence tested = oil:None: H=full R=low
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : 
	1-HA-Car_maintenance() => [32-HA-Handling_lights() - 33-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 32-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	32-HA-Handling_lights() => [34-HA-Replacing_rear_light() - 35-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [36-HA-Checking_front_lights(), 37-HA-Replacing_rear_light(), 33-HA-Closing_hood()]
	34-HA-Replacing_rear_light() => [] : dec_replacing_rear_light
[92m	refines into nothing[0m
	continue .. next_subtasks=[35-HA-Checking_front_lights(), 33-HA-Closing_hood()]
	35-HA-Checking_front_lights() => [38-HP-go_front_car()-0.0 - 39-HP-check_left_light()-0.0 - 40-HP-check_right_light()-0.0] : dec_checking_front_ligths
	38-HP-go_front_car()-0.0 => [38-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[39-HP-check_left_light()-0.0, 40-HP-check_right_light()-0.0, 33-HA-Closing_hood()]
	39-HP-check_left_light()-0.0 => [39-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[40-HP-check_right_light()-0.0, 33-HA-Closing_hood()]
	40-HP-check_right_light()-0.0 => [40-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[33-HA-Closing_hood()]
	33-HA-Closing_hood() => [41-HP-go_front_car()-0.0 - 42-HP-close_hood()-0.0] : dec_closing_hood
	41-HP-go_front_car()-0.0 => [41-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[42-HP-close_hood()-0.0]
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	36-HA-Checking_front_lights() => [43-HP-go_front_car()-0.0 - 44-HP-check_left_light()-0.0 - 45-HP-check_right_light()-0.0] : dec_checking_front_ligths
	43-HP-go_front_car()-0.0 => [43-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[44-HP-check_left_light()-0.0, 45-HP-check_right_light()-0.0, 37-HA-Replacing_rear_light(), 33-HA-Closing_hood()]
	44-HP-check_left_light()-0.0 => [44-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[45-HP-check_right_light()-0.0, 37-HA-Replacing_rear_light(), 33-HA-Closing_hood()]
	45-HP-check_right_light()-0.0 => [45-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[37-HA-Replacing_rear_light(), 33-HA-Closing_hood()]
	37-HA-Replacing_rear_light() => [] : dec_replacing_rear_light
[92m	refines into nothing[0m
	continue .. next_subtasks=[33-HA-Closing_hood()]
	33-HA-Closing_hood() => [46-HP-go_front_car()-0.0 - 47-HP-close_hood()-0.0] : dec_closing_hood
	46-HP-go_front_car()-0.0 => [46-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[47-HP-close_hood()-0.0]
	end 1
ref_aligned 1:
[
	dec_handling_lights_start_replace: [42-HP-close_hood()-0.0]
	dec_handling_lights_start_checking: [47-HP-close_hood()-0.0]
]
Check if ok
refinement_r_beliefs:
[
	dec_handling_lights_start_replace: [25-HP-go_behind_car()-0.0 - 26-HP-replace_rear_light()-0.0 - 22-HA-Checking_front_lights() - 20-HA-Closing_hood()]
	dec_handling_lights_start_checking: [30-HP-go_behind_car()-0.0 - 31-HP-replace_rear_light()-0.0 - 20-HA-Closing_hood()]
]
refinement_h_beliefs:
[
	dec_handling_lights_start_replace: [42-HP-close_hood()-0.0]
	dec_handling_lights_start_checking: [47-HP-close_hood()-0.0]
]
decomp  0
decomp_h.subtasks= [42-HP-close_hood()-0.0]
decomp_r.subtasks= [25-HP-go_behind_car()-0.0, 26-HP-replace_rear_light()-0.0, 22-HA-Checking_front_lights(), 20-HA-Closing_hood()]
Not same number of subtasks
	divergence isn't relevant
divergence tested = rear_light:None: H=new R=old
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : 
	1-HA-Car_maintenance() => [48-HA-Handling_lights() - 49-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 48-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	48-HA-Handling_lights() => [50-HA-Replacing_rear_light() - 51-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [52-HA-Checking_front_lights(), 53-HA-Replacing_rear_light(), 49-HA-Closing_hood()]
	50-HA-Replacing_rear_light() => [54-HP-go_behind_car()-0.0 - 55-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	52-HA-Checking_front_lights() => [56-HP-go_front_car()-0.0 - 57-HP-check_left_light()-0.0 - 58-HP-check_right_light()-0.0] : dec_checking_front_ligths
	56-HP-go_front_car()-0.0 => [56-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[57-HP-check_left_light()-0.0, 58-HP-check_right_light()-0.0, 53-HA-Replacing_rear_light(), 49-HA-Closing_hood()]
	57-HP-check_left_light()-0.0 => [57-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[58-HP-check_right_light()-0.0, 53-HA-Replacing_rear_light(), 49-HA-Closing_hood()]
	58-HP-check_right_light()-0.0 => [58-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[53-HA-Replacing_rear_light(), 49-HA-Closing_hood()]
	53-HA-Replacing_rear_light() => [59-HP-go_behind_car()-0.0 - 60-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 1
ref_aligned 1:
[
	dec_handling_lights_start_replace: [54-HP-go_behind_car()-0.0 - 55-HP-replace_rear_light()-0.0 - 51-HA-Checking_front_lights() - 49-HA-Closing_hood()]
	dec_handling_lights_start_checking: [59-HP-go_behind_car()-0.0 - 60-HP-replace_rear_light()-0.0 - 49-HA-Closing_hood()]
]
Check if ok
refinement_r_beliefs:
[
	dec_handling_lights_start_replace: [25-HP-go_behind_car()-0.0 - 26-HP-replace_rear_light()-0.0 - 22-HA-Checking_front_lights() - 20-HA-Closing_hood()]
	dec_handling_lights_start_checking: [30-HP-go_behind_car()-0.0 - 31-HP-replace_rear_light()-0.0 - 20-HA-Closing_hood()]
]
refinement_h_beliefs:
[
	dec_handling_lights_start_replace: [54-HP-go_behind_car()-0.0 - 55-HP-replace_rear_light()-0.0 - 51-HA-Checking_front_lights() - 49-HA-Closing_hood()]
	dec_handling_lights_start_checking: [59-HP-go_behind_car()-0.0 - 60-HP-replace_rear_light()-0.0 - 49-HA-Closing_hood()]
]
decomp  0
decomp_h.subtasks= [54-HP-go_behind_car()-0.0, 55-HP-replace_rear_light()-0.0, 51-HA-Checking_front_lights(), 49-HA-Closing_hood()]
decomp_r.subtasks= [25-HP-go_behind_car()-0.0, 26-HP-replace_rear_light()-0.0, 22-HA-Checking_front_lights(), 20-HA-Closing_hood()]
len(decomp_h.subtasks)= 4
len(decomp_r.subtasks)= 4
i= 0
i= 0
i= 0
i= 0
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = low 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
same effects
decomp  1
decomp_h.subtasks= [59-HP-go_behind_car()-0.0, 60-HP-replace_rear_light()-0.0, 49-HA-Closing_hood()]
decomp_r.subtasks= [30-HP-go_behind_car()-0.0, 31-HP-replace_rear_light()-0.0, 20-HA-Closing_hood()]
len(decomp_h.subtasks)= 3
len(decomp_r.subtasks)= 3
i= 1
i= 1
i= 1
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = low 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
same effects
no alignment needed
	divergence is relevant!
Relevant divergences to correct : 	rear_light:None: H=new R=old

COM: com action added = 61-RP-COM_ALIGN['rear_light-None-old']-3.0
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [62-HA-Handling_lights() - 63-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 62-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	62-HA-Handling_lights() => [64-HA-Replacing_rear_light() - 65-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [66-HA-Checking_front_lights(), 67-HA-Replacing_rear_light(), 63-HA-Closing_hood()]
	64-HA-Replacing_rear_light() => [68-HP-go_behind_car()-0.0 - 69-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	66-HA-Checking_front_lights() => [70-HP-go_front_car()-0.0 - 71-HP-check_left_light()-0.0 - 72-HP-check_right_light()-0.0] : dec_checking_front_ligths
	70-HP-go_front_car()-0.0 => [70-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[71-HP-check_left_light()-0.0, 72-HP-check_right_light()-0.0, 67-HA-Replacing_rear_light(), 63-HA-Closing_hood()]
	71-HP-check_left_light()-0.0 => [71-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[72-HP-check_right_light()-0.0, 67-HA-Replacing_rear_light(), 63-HA-Closing_hood()]
	72-HP-check_right_light()-0.0 => [72-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[67-HA-Replacing_rear_light(), 63-HA-Closing_hood()]
	67-HA-Replacing_rear_light() => [73-HP-go_behind_car()-0.0 - 74-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 1
refinement = 
[
	dec_handling_lights_start_replace: [68-HP-go_behind_car()-0.0 - 69-HP-replace_rear_light()-0.0 - 65-HA-Checking_front_lights() - 63-HA-Closing_hood()]
	dec_handling_lights_start_checking: [73-HP-go_behind_car()-0.0 - 74-HP-replace_rear_light()-0.0 - 63-HA-Closing_hood()]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 75-HP-go_behind_car()-1.0
	- 76-HP-go_behind_car()-1.0

=> end explo
node explored = 3.0 Flag.F Type.H#1, (robot BEGIN []) -1> (robot BEGIN []) prev=None next=[#2 #3]
new_e_flagged_nodes : 
	4.0 Flag.E Type.I#2, (human go_behind_car ()) -1> (human go_behind_car ()) prev=#1 next=[]
	4.0 Flag.E Type.I#3, (human go_behind_car ()) -1> (human go_behind_car ()) prev=#1 next=[]
e_flagged_nodes :
	4.0 Flag.E Type.I#2, (human go_behind_car ()) -1> (human go_behind_car ()) prev=#1 next=[]
	4.0 Flag.E Type.I#3, (human go_behind_car ()) -1> (human go_behind_car ()) prev=#1 next=[]
Ns before check = None
Nf = None
Ns after check = None
e_flagged_nodes after check solution:
	4.0 Flag.E Type.I#2, (human go_behind_car ()) -1> (human go_behind_car ()) prev=#1 next=[]
	4.0 Flag.E Type.I#3, (human go_behind_car ()) -1> (human go_behind_car ()) prev=#1 next=[]

<@> picked node = 4.0 Flag.E Type.I#2, (human go_behind_car ()) -1> (human go_behind_car ()) prev=#1 next=[]
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-69-HP-replace_rear_light()-0.0
||	-65-HA-Checking_front_lights()
||	-63-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = low 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 0-RA-Car_maintenance()
decomp i= 0 : dec_handling_lights_start_replace
	0-RA-Car_maintenance() => [77-RP-go_front_car()-0.0 - 78-RP-refill_washer()-0.0 - 79-RP-refill_oil()-0.0 - 80-RP-store_oil()-0.0] : dec_car_maintenance_R
	77-RP-go_front_car()-0.0 => [77-RP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[78-RP-refill_washer()-0.0, 79-RP-refill_oil()-0.0, 80-RP-store_oil()-0.0]
	end 0
refinement = 
[
	dec_handling_lights_start_replace: [78-RP-refill_washer()-0.0 - 79-RP-refill_oil()-0.0 - 80-RP-store_oil()-0.0]
]
Decomp OK
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-69-HP-replace_rear_light()-0.0
||	-65-HA-Checking_front_lights()
||	-63-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = low 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
same effects
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 81-RP-refill_washer()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-79-RP-refill_oil()-0.0
||	-80-RP-store_oil()-0.0
| AGENDA human =
||	-69-HP-replace_rear_light()-0.0
||	-65-HA-Checking_front_lights()
||	-63-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 69-HP-replace_rear_light()-0.0
decomp i= 0 : dec_handling_lights_start_replace
	end 0
human- Refine agenda with r_beliefs
Task to refine: 69-HP-replace_rear_light()-0.0
decomp i= 0 : dec_handling_lights_start_replace
	end 0
refinement:
[
	dec_handling_lights_start_replace: [69-HP-replace_rear_light()-0.0]
]
refinement_r:
[
	dec_handling_lights_start_replace: [69-HP-replace_rear_light()-0.0]
]
refinement_r_beliefs:
[
	dec_handling_lights_start_replace: [69-HP-replace_rear_light()-0.0]
]
refinement_h_beliefs:
[
	dec_handling_lights_start_replace: [69-HP-replace_rear_light()-0.0]
]
decomp  0
decomp_h.subtasks= [69-HP-replace_rear_light()-0.0]
decomp_r.subtasks= [69-HP-replace_rear_light()-0.0]
len(decomp_h.subtasks)= 1
len(decomp_r.subtasks)= 1
i= 0
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
||	-79-RP-refill_oil()-0.0
||	-80-RP-store_oil()-0.0
| AGENDA human =
||	-65-HA-Checking_front_lights()
||	-63-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
same effects
no alignment needed
No relevant belief divergence for refinement
refinement = 
[
	dec_handling_lights_start_replace: [69-HP-replace_rear_light()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 82-HP-replace_rear_light()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-79-RP-refill_oil()-0.0
||	-80-RP-store_oil()-0.0
| AGENDA human =
||	-65-HA-Checking_front_lights()
||	-63-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 79-RP-refill_oil()-0.0
decomp i= 0 : dec_handling_lights_start_replace
	end 0
refinement = 
[
	dec_handling_lights_start_replace: [79-RP-refill_oil()-0.0]
]
Decomp OK
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
||	-80-RP-store_oil()-0.0
| AGENDA human =
||	-65-HA-Checking_front_lights()
||	-63-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
[93malready done[0m
[93m79-RP-refill_oil()-0.0 not applicable[0m
Operator isn't applicable with only one of the beliefs

# UPDATE belief divergences
	washer:None: H=low R=full
	oil:None: H=full R=low

Testing with 1 relevant divergence
divergence tested = washer:None: H=low R=full
Task to refine: 65-HA-Checking_front_lights()
decomp i= 0 : 
	65-HA-Checking_front_lights() => [83-HP-go_front_car()-0.0 - 84-HP-check_left_light()-0.0 - 85-HP-check_right_light()-0.0] : dec_checking_front_ligths
	end 0
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
||	-79-RP-refill_oil()-0.0
||	-80-RP-store_oil()-0.0
| AGENDA human =
||	-65-HA-Checking_front_lights()
||	-63-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
[93malready done[0m
[93m79-RP-refill_oil()-0.0 not applicable[0m
Operator isn't applicable with only one of the beliefs
	divergence isn't relevant
divergence tested = oil:None: H=full R=low
Task to refine: 65-HA-Checking_front_lights()
decomp i= 0 : 
	65-HA-Checking_front_lights() => [86-HP-go_front_car()-0.0 - 87-HP-check_left_light()-0.0 - 88-HP-check_right_light()-0.0] : dec_checking_front_ligths
	end 0
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
||	-79-RP-refill_oil()-0.0
||	-80-RP-store_oil()-0.0
| AGENDA human =
||	-65-HA-Checking_front_lights()
||	-63-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
same effects
	divergence is relevant!
Relevant divergences to correct : 	oil:None: H=full R=low

COM: com action added eff = 89-RP-COM_ALIGN['oil-None-low']-3.0
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 90-RP-refill_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-79-RP-refill_oil()-0.0
||	-80-RP-store_oil()-0.0
| AGENDA human =
||	-65-HA-Checking_front_lights()
||	-63-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 65-HA-Checking_front_lights()
decomp i= 0 : dec_handling_lights_start_replace
	65-HA-Checking_front_lights() => [91-HP-go_front_car()-0.0 - 92-HP-check_left_light()-0.0 - 93-HP-check_right_light()-0.0] : dec_checking_front_ligths
	end 0
human- Refine agenda with r_beliefs
Task to refine: 65-HA-Checking_front_lights()
decomp i= 0 : dec_handling_lights_start_replace
	65-HA-Checking_front_lights() => [94-HP-go_front_car()-0.0 - 95-HP-check_left_light()-0.0 - 96-HP-check_right_light()-0.0] : dec_checking_front_ligths
	end 0
refinement:
[
	dec_handling_lights_start_replace: [91-HP-go_front_car()-0.0 - 92-HP-check_left_light()-0.0 - 93-HP-check_right_light()-0.0]
]
refinement_r:
[
	dec_handling_lights_start_replace: [94-HP-go_front_car()-0.0 - 95-HP-check_left_light()-0.0 - 96-HP-check_right_light()-0.0]
]
refinement_r_beliefs:
[
	dec_handling_lights_start_replace: [94-HP-go_front_car()-0.0 - 95-HP-check_left_light()-0.0 - 96-HP-check_right_light()-0.0]
]
refinement_h_beliefs:
[
	dec_handling_lights_start_replace: [91-HP-go_front_car()-0.0 - 92-HP-check_left_light()-0.0 - 93-HP-check_right_light()-0.0]
]
decomp  0
decomp_h.subtasks= [91-HP-go_front_car()-0.0, 92-HP-check_left_light()-0.0, 93-HP-check_right_light()-0.0]
decomp_r.subtasks= [94-HP-go_front_car()-0.0, 95-HP-check_left_light()-0.0, 96-HP-check_right_light()-0.0]
len(decomp_h.subtasks)= 3
len(decomp_r.subtasks)= 3
i= 0
i= 0
i= 0
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
||	-79-RP-refill_oil()-0.0
||	-80-RP-store_oil()-0.0
| AGENDA human =
||	-63-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
same effects
no alignment needed
No relevant belief divergence for refinement
refinement = 
[
	dec_handling_lights_start_replace: [91-HP-go_front_car()-0.0 - 92-HP-check_left_light()-0.0 - 93-HP-check_right_light()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
SA: human assessed washer <- full
applied refinement = 
next actions:
	- 97-HP-go_front_car()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-79-RP-refill_oil()-0.0
||	-80-RP-store_oil()-0.0
| AGENDA human =
||	-92-HP-check_left_light()-0.0
||	-93-HP-check_right_light()-0.0
||	-63-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 79-RP-refill_oil()-0.0
decomp i= 0 : dec_handling_lights_start_replace
	79-RP-refill_oil()-0.0 => [79-RP-refill_oil()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 80-RP-store_oil()-0.0
	end 0
refinement = 
[
	dec_handling_lights_start_replace: [80-RP-store_oil()-0.0]
]
Decomp OK
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-92-HP-check_left_light()-0.0
||	-93-HP-check_right_light()-0.0
||	-63-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
same effects
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 98-RP-store_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-92-HP-check_left_light()-0.0
||	-93-HP-check_right_light()-0.0
||	-63-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 92-HP-check_left_light()-0.0
decomp i= 0 : dec_handling_lights_start_replace
	92-HP-check_left_light()-0.0 => [92-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 93-HP-check_right_light()-0.0
	93-HP-check_right_light()-0.0 => [93-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 63-HA-Closing_hood()
	63-HA-Closing_hood() => [99-HP-go_front_car()-0.0 - 100-HP-close_hood()-0.0] : dec_closing_hood
	99-HP-go_front_car()-0.0 => [99-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[100-HP-close_hood()-0.0]
	end 0
human- Refine agenda with r_beliefs
Task to refine: 92-HP-check_left_light()-0.0
decomp i= 0 : dec_handling_lights_start_replace
	92-HP-check_left_light()-0.0 => [92-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 93-HP-check_right_light()-0.0
	93-HP-check_right_light()-0.0 => [93-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 63-HA-Closing_hood()
	63-HA-Closing_hood() => [101-HP-go_front_car()-0.0 - 102-HP-close_hood()-0.0] : dec_closing_hood
	101-HP-go_front_car()-0.0 => [101-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[102-HP-close_hood()-0.0]
	end 0
refinement:
[
	dec_handling_lights_start_replace: [100-HP-close_hood()-0.0]
]
refinement_r:
[
	dec_handling_lights_start_replace: [102-HP-close_hood()-0.0]
]
refinement_r_beliefs:
[
	dec_handling_lights_start_replace: [102-HP-close_hood()-0.0]
]
refinement_h_beliefs:
[
	dec_handling_lights_start_replace: [100-HP-close_hood()-0.0]
]
decomp  0
decomp_h.subtasks= [100-HP-close_hood()-0.0]
decomp_r.subtasks= [102-HP-close_hood()-0.0]
len(decomp_h.subtasks)= 1
len(decomp_r.subtasks)= 1
i= 0
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
[93m100-HP-close_hood()-0.0 not applicable[0m
Operator isn't applicable with only one of the beliefs
NEED of belief alignment!

# UPDATE belief divergences
	oil:None: H=low R=full

Testing with 1 relevant divergence
divergence tested = oil:None: H=low R=full
Task to refine: 92-HP-check_left_light()-0.0
decomp i= 0 : 
	92-HP-check_left_light()-0.0 => [92-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 93-HP-check_right_light()-0.0
	93-HP-check_right_light()-0.0 => [93-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 63-HA-Closing_hood()
	63-HA-Closing_hood() => [103-HP-go_front_car()-0.0 - 104-HP-close_hood()-0.0] : dec_closing_hood
	103-HP-go_front_car()-0.0 => [103-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[104-HP-close_hood()-0.0]
	end 0
ref_aligned 1:
[
	: [104-HP-close_hood()-0.0]
]
Check if ok
refinement_r_beliefs:
[
	dec_handling_lights_start_replace: [102-HP-close_hood()-0.0]
]
refinement_h_beliefs:
[
	: [104-HP-close_hood()-0.0]
]
decomp  0
decomp_h.subtasks= [104-HP-close_hood()-0.0]
decomp_r.subtasks= [102-HP-close_hood()-0.0]
len(decomp_h.subtasks)= 1
len(decomp_r.subtasks)= 1
i= 0
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
same effects
no alignment needed
	divergence is relevant!
Relevant divergences to correct : 	oil:None: H=low R=full

COM: com action added = 105-RP-COM_ALIGN['oil-None-full']-3.0
Task to refine: 92-HP-check_left_light()-0.0
decomp i= 0 : dec_handling_lights_start_replace
	92-HP-check_left_light()-0.0 => [92-HP-check_left_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 93-HP-check_right_light()-0.0
	93-HP-check_right_light()-0.0 => [93-HP-check_right_light()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 63-HA-Closing_hood()
	63-HA-Closing_hood() => [106-HP-go_front_car()-0.0 - 107-HP-close_hood()-0.0] : dec_closing_hood
	106-HP-go_front_car()-0.0 => [106-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[107-HP-close_hood()-0.0]
	end 0
refinement = 
[
	dec_handling_lights_start_replace: [107-HP-close_hood()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 108-HP-close_hood()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
refinement = 
[
	dec_handling_lights_start_replace: [DecompType.BOTH_AGENDAS_EMPTY]
]
BOTH_AGENDAS_EMPTY
applied refinement = 
next actions:

=> end explo
node explored = 16.0 Flag.E Type.F#2, (human go_behind_car ()) -7> (human close_hood ()) prev=#1 next=[]
new_e_flagged_nodes : 
	16.0 Flag.E Type.F#2, (human go_behind_car ()) -7> (human close_hood ()) prev=#1 next=[]
e_flagged_nodes :
	4.0 Flag.E Type.I#3, (human go_behind_car ()) -1> (human go_behind_car ()) prev=#1 next=[]
	16.0 Flag.E Type.F#2, (human go_behind_car ()) -7> (human close_hood ()) prev=#1 next=[]
Ns before check = None
Nf = 16.0 Flag.E Type.F#2, (human go_behind_car ()) -7> (human close_hood ()) prev=#1 next=[]
new Ns!
Ns after check = 16.0 Flag.S Type.F#2, (human go_behind_car ()) -7> (human close_hood ()) prev=#1 next=[]
e_flagged_nodes after check solution:
	4.0 Flag.E Type.I#3, (human go_behind_car ()) -1> (human go_behind_car ()) prev=#1 next=[]

<@> picked node = 4.0 Flag.E Type.I#3, (human go_behind_car ()) -1> (human go_behind_car ()) prev=#1 next=[]
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-74-HP-replace_rear_light()-0.0
||	-63-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = low 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 0-RA-Car_maintenance()
decomp i= 0 : dec_handling_lights_start_checking
	0-RA-Car_maintenance() => [109-RP-go_front_car()-0.0 - 110-RP-refill_washer()-0.0 - 111-RP-refill_oil()-0.0 - 112-RP-store_oil()-0.0] : dec_car_maintenance_R
	109-RP-go_front_car()-0.0 => [109-RP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[110-RP-refill_washer()-0.0, 111-RP-refill_oil()-0.0, 112-RP-store_oil()-0.0]
	end 0
refinement = 
[
	dec_handling_lights_start_checking: [110-RP-refill_washer()-0.0 - 111-RP-refill_oil()-0.0 - 112-RP-store_oil()-0.0]
]
Decomp OK
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-74-HP-replace_rear_light()-0.0
||	-63-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = low 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
same effects
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 113-RP-refill_washer()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-111-RP-refill_oil()-0.0
||	-112-RP-store_oil()-0.0
| AGENDA human =
||	-74-HP-replace_rear_light()-0.0
||	-63-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 74-HP-replace_rear_light()-0.0
decomp i= 0 : dec_handling_lights_start_checking
	end 0
human- Refine agenda with r_beliefs
Task to refine: 74-HP-replace_rear_light()-0.0
decomp i= 0 : dec_handling_lights_start_checking
	end 0
refinement:
[
	dec_handling_lights_start_checking: [74-HP-replace_rear_light()-0.0]
]
refinement_r:
[
	dec_handling_lights_start_checking: [74-HP-replace_rear_light()-0.0]
]
refinement_r_beliefs:
[
	dec_handling_lights_start_checking: [74-HP-replace_rear_light()-0.0]
]
refinement_h_beliefs:
[
	dec_handling_lights_start_checking: [74-HP-replace_rear_light()-0.0]
]
decomp  0
decomp_h.subtasks= [74-HP-replace_rear_light()-0.0]
decomp_r.subtasks= [74-HP-replace_rear_light()-0.0]
len(decomp_h.subtasks)= 1
len(decomp_r.subtasks)= 1
i= 0
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
||	-111-RP-refill_oil()-0.0
||	-112-RP-store_oil()-0.0
| AGENDA human =
||	-63-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = old 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
same effects
no alignment needed
No relevant belief divergence for refinement
refinement = 
[
	dec_handling_lights_start_checking: [74-HP-replace_rear_light()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 114-HP-replace_rear_light()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-111-RP-refill_oil()-0.0
||	-112-RP-store_oil()-0.0
| AGENDA human =
||	-63-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 111-RP-refill_oil()-0.0
decomp i= 0 : dec_handling_lights_start_checking
	end 0
refinement = 
[
	dec_handling_lights_start_checking: [111-RP-refill_oil()-0.0]
]
Decomp OK
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
||	-112-RP-store_oil()-0.0
| AGENDA human =
||	-63-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
[93malready done[0m
[93m111-RP-refill_oil()-0.0 not applicable[0m
Operator isn't applicable with only one of the beliefs

# UPDATE belief divergences
	washer:None: H=low R=full
	oil:None: H=full R=low

Testing with 1 relevant divergence
divergence tested = washer:None: H=low R=full
Task to refine: 63-HA-Closing_hood()
decomp i= 0 : 
	63-HA-Closing_hood() => [115-HP-go_front_car()-0.0 - 116-HP-close_hood()-0.0] : dec_closing_hood
	end 0
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
||	-111-RP-refill_oil()-0.0
||	-112-RP-store_oil()-0.0
| AGENDA human =
||	-63-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
[93malready done[0m
[93m111-RP-refill_oil()-0.0 not applicable[0m
Operator isn't applicable with only one of the beliefs
	divergence isn't relevant
divergence tested = oil:None: H=full R=low
Task to refine: 63-HA-Closing_hood()
decomp i= 0 : 
	63-HA-Closing_hood() => [117-HP-go_front_car()-0.0 - 118-HP-close_hood()-0.0] : dec_closing_hood
	end 0
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
||	-111-RP-refill_oil()-0.0
||	-112-RP-store_oil()-0.0
| AGENDA human =
||	-63-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
same effects
	divergence is relevant!
Relevant divergences to correct : 	oil:None: H=full R=low

COM: com action added eff = 119-RP-COM_ALIGN['oil-None-low']-3.0
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 120-RP-refill_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-111-RP-refill_oil()-0.0
||	-112-RP-store_oil()-0.0
| AGENDA human =
||	-63-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 63-HA-Closing_hood()
decomp i= 0 : dec_handling_lights_start_checking
	63-HA-Closing_hood() => [121-HP-go_front_car()-0.0 - 122-HP-close_hood()-0.0] : dec_closing_hood
	end 0
human- Refine agenda with r_beliefs
Task to refine: 63-HA-Closing_hood()
decomp i= 0 : dec_handling_lights_start_checking
	63-HA-Closing_hood() => [123-HP-go_front_car()-0.0 - 124-HP-close_hood()-0.0] : dec_closing_hood
	end 0
refinement:
[
	dec_handling_lights_start_checking: [121-HP-go_front_car()-0.0 - 122-HP-close_hood()-0.0]
]
refinement_r:
[
	dec_handling_lights_start_checking: [123-HP-go_front_car()-0.0 - 124-HP-close_hood()-0.0]
]
refinement_r_beliefs:
[
	dec_handling_lights_start_checking: [123-HP-go_front_car()-0.0 - 124-HP-close_hood()-0.0]
]
refinement_h_beliefs:
[
	dec_handling_lights_start_checking: [121-HP-go_front_car()-0.0 - 122-HP-close_hood()-0.0]
]
decomp  0
decomp_h.subtasks= [121-HP-go_front_car()-0.0, 122-HP-close_hood()-0.0]
decomp_r.subtasks= [123-HP-go_front_car()-0.0, 124-HP-close_hood()-0.0]
len(decomp_h.subtasks)= 2
len(decomp_r.subtasks)= 2
i= 0
i= 0
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
||	-111-RP-refill_oil()-0.0
||	-112-RP-store_oil()-0.0
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = rear 	ObsType.OBS 	loc=rear
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = rear
||human_init.at_oil_bottle = front
||human_init.washer = low
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
same effects
no alignment needed
No relevant belief divergence for refinement
refinement = 
[
	dec_handling_lights_start_checking: [121-HP-go_front_car()-0.0 - 122-HP-close_hood()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
SA: human assessed washer <- full
applied refinement = 
next actions:
	- 125-HP-go_front_car()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-111-RP-refill_oil()-0.0
||	-112-RP-store_oil()-0.0
| AGENDA human =
||	-122-HP-close_hood()-0.0
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 111-RP-refill_oil()-0.0
decomp i= 0 : dec_handling_lights_start_checking
	111-RP-refill_oil()-0.0 => [111-RP-refill_oil()-0.0] : 
[92m	already done[0m
	continue with next_task popped from agenda 112-RP-store_oil()-0.0
	end 0
refinement = 
[
	dec_handling_lights_start_checking: [112-RP-store_oil()-0.0]
]
Decomp OK
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-122-HP-close_hood()-0.0
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
same effects
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 126-RP-store_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-122-HP-close_hood()-0.0
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 122-HP-close_hood()-0.0
decomp i= 0 : dec_handling_lights_start_checking
	end 0
human- Refine agenda with r_beliefs
Task to refine: 122-HP-close_hood()-0.0
decomp i= 0 : dec_handling_lights_start_checking
	end 0
refinement:
[
	dec_handling_lights_start_checking: [122-HP-close_hood()-0.0]
]
refinement_r:
[
	dec_handling_lights_start_checking: [122-HP-close_hood()-0.0]
]
refinement_r_beliefs:
[
	dec_handling_lights_start_checking: [122-HP-close_hood()-0.0]
]
refinement_h_beliefs:
[
	dec_handling_lights_start_checking: [122-HP-close_hood()-0.0]
]
decomp  0
decomp_h.subtasks= [122-HP-close_hood()-0.0]
decomp_r.subtasks= [122-HP-close_hood()-0.0]
len(decomp_h.subtasks)= 1
len(decomp_r.subtasks)= 1
i= 0
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
[93m122-HP-close_hood()-0.0 not applicable[0m
Operator isn't applicable with only one of the beliefs
NEED of belief alignment!

# UPDATE belief divergences
	oil:None: H=low R=full

Testing with 1 relevant divergence
divergence tested = oil:None: H=low R=full
Task to refine: 122-HP-close_hood()-0.0
decomp i= 0 : 
	end 0
ref_aligned 1:
[
	: [122-HP-close_hood()-0.0]
]
Check if ok
refinement_r_beliefs:
[
	dec_handling_lights_start_checking: [122-HP-close_hood()-0.0]
]
refinement_h_beliefs:
[
	: [122-HP-close_hood()-0.0]
]
decomp  0
decomp_h.subtasks= [122-HP-close_hood()-0.0]
decomp_r.subtasks= [122-HP-close_hood()-0.0]
len(decomp_h.subtasks)= 1
len(decomp_r.subtasks)= 1
i= 0
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
same effects
no alignment needed
	divergence is relevant!
Relevant divergences to correct : 	oil:None: H=low R=full

COM: com action added = 127-RP-COM_ALIGN['oil-None-full']-3.0
Task to refine: 122-HP-close_hood()-0.0
decomp i= 0 : dec_handling_lights_start_checking
	end 0
refinement = 
[
	dec_handling_lights_start_checking: [122-HP-close_hood()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 128-HP-close_hood()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
refinement = 
[
	dec_handling_lights_start_checking: [DecompType.BOTH_AGENDAS_EMPTY]
]
BOTH_AGENDAS_EMPTY
applied refinement = 
next actions:

=> end explo
node explored = 16.0 Flag.E Type.F#3, (human go_behind_car ()) -7> (human close_hood ()) prev=#1 next=[]
new_e_flagged_nodes : 
	16.0 Flag.E Type.F#3, (human go_behind_car ()) -7> (human close_hood ()) prev=#1 next=[]
e_flagged_nodes :
	16.0 Flag.E Type.F#3, (human go_behind_car ()) -7> (human close_hood ()) prev=#1 next=[]
Ns before check = 16.0 Flag.S Type.F#2, (human go_behind_car ()) -7> (human close_hood ()) prev=#1 next=[]
Nf = 16.0 Flag.E Type.F#3, (human go_behind_car ()) -7> (human close_hood ()) prev=#1 next=[]
Ns after check = 16.0 Flag.S Type.F#2, (human go_behind_car ()) -7> (human close_hood ()) prev=#1 next=[]
e_flagged_nodes after check solution:
	=> time spent first exploration = 107ms
Start refining u nodes
	=> time spent refining = 0ms
Total duration = 107ms
Non relevant div:
False
Plans:
61-RP-COM_ALIGN['rear_light-None-old']-3.0 75-HP-go_behind_car()-1.0 81-RP-refill_washer()-1.0 82-HP-replace_rear_light()-1.0 89-RP-COM_ALIGN['oil-None-low']-3.0 90-RP-refill_oil()-1.0 97-HP-go_front_car()-1.0 98-RP-store_oil()-1.0 105-RP-COM_ALIGN['oil-None-full']-3.0 108-HP-close_hood()-1.0/61-RP-COM_ALIGN['rear_light-None-old']-3.0 76-HP-go_behind_car()-1.0 113-RP-refill_washer()-1.0 114-HP-replace_rear_light()-1.0 119-RP-COM_ALIGN['oil-None-low']-3.0 120-RP-refill_oil()-1.0 125-HP-go_front_car()-1.0 126-RP-store_oil()-1.0 127-RP-COM_ALIGN['oil-None-full']-3.0 128-HP-close_hood()-1.0
