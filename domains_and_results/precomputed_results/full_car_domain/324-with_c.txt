RUN N=324 With=True
INITIAL STATES
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
|| robot_init.at_robot = front 	ObsType.OBS 	loc=front
|| robot_init.at_human = front 	ObsType.OBS 	loc=front
|| robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
|| robot_init.washer = full 	ObsType.OBS 	loc=front
|| robot_init.oil = low 	ObsType.INF 	loc=front
|| robot_init.hood = open 	ObsType.OBS 	loc=front
|| robot_init.rear_light = new 	ObsType.INF 	loc=rear
|| robot_init.left_light = todo 	ObsType.INF 	loc=front
|| robot_init.right_light = todo 	ObsType.INF 	loc=front
| STATE human =
|| human_init.at_robot = front
|| human_init.at_human = front
|| human_init.at_oil_bottle = front
|| human_init.washer = low
|| human_init.oil = full
|| human_init.hood = open
|| human_init.rear_light = old
|| human_init.left_light = todo
|| human_init.right_light = todo
|________________________________________________________________________
Start first exploration
SA: human assessed washer <- full
first node = 0.0 Flag.E Type.I#1, (human BEGIN []) -1> (human BEGIN []) prev=None next=[]

<@> picked node = 0.0 Flag.E Type.I#1, (human BEGIN []) -1> (human BEGIN []) prev=None next=[]
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = todo 	ObsType.INF 	loc=front
||robot_init.right_light = todo 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = todo
||human_init.right_light = todo
|________________________________________________________________________
robot- Refine agenda
Task to refine: 0-RA-Car_maintenance()
decomp i= 0 : origin
	0-RA-Car_maintenance() => [3-RP-go_front_car()-0.0 - 4-RP-refill_washer()-0.0 - 5-RP-refill_oil()-0.0 - 6-RP-store_oil()-0.0] : dec_car_maintenance_R
	3-RP-go_front_car()-0.0 => [3-RP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[4-RP-refill_washer()-0.0, 5-RP-refill_oil()-0.0, 6-RP-store_oil()-0.0]
	4-RP-refill_washer()-0.0 => [4-RP-refill_washer()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[5-RP-refill_oil()-0.0, 6-RP-store_oil()-0.0]
	end 0
refinement = 
[
	origin: [5-RP-refill_oil()-0.0 - 6-RP-store_oil()-0.0]
]
Decomp OK
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = todo 	ObsType.INF 	loc=front
||robot_init.right_light = todo 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = todo
||human_init.right_light = todo
|________________________________________________________________________
[93malready done[0m
[93m5-RP-refill_oil()-0.0 not applicable[0m
Operator isn't applicable with only one of the beliefs

# UPDATE belief divergences
	oil:None: H=full R=low
	rear_light:None: H=old R=new

Testing with 1 relevant divergence
divergence tested = oil:None: H=full R=low
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : 
	1-HA-Car_maintenance() => [7-HA-Handling_lights() - 8-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 7-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	7-HA-Handling_lights() => [9-HA-Replacing_rear_light() - 10-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [11-HA-Checking_front_lights(), 12-HA-Replacing_rear_light(), 8-HA-Closing_hood()]
	9-HA-Replacing_rear_light() => [13-HP-go_behind_car()-0.0 - 14-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	11-HA-Checking_front_lights() => [15-HP-go_front_car()-0.0 - 16-HP-check_left_light()-0.0 - 17-HP-check_right_light()-0.0] : dec_checking_front_ligths
	15-HP-go_front_car()-0.0 => [15-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[16-HP-check_left_light()-0.0, 17-HP-check_right_light()-0.0, 12-HA-Replacing_rear_light(), 8-HA-Closing_hood()]
	end 1
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = low 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = todo 	ObsType.INF 	loc=front
||robot_init.right_light = todo 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = low
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = todo
||human_init.right_light = todo
|________________________________________________________________________
same effects
	divergence is relevant!
Relevant divergences to correct : 	oil:None: H=full R=low

COM: com action added eff = 18-RP-COM_ALIGN['oil-None-low']-3.0
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 19-RP-refill_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-6-RP-store_oil()-0.0
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-1-HA-Car_maintenance()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = todo 	ObsType.INF 	loc=front
||robot_init.right_light = todo 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = old
||human_init.left_light = todo
||human_init.right_light = todo
|________________________________________________________________________
human- Refine agenda
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [20-HA-Handling_lights() - 21-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 20-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	20-HA-Handling_lights() => [22-HA-Replacing_rear_light() - 23-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [24-HA-Checking_front_lights(), 25-HA-Replacing_rear_light(), 21-HA-Closing_hood()]
	22-HA-Replacing_rear_light() => [26-HP-go_behind_car()-0.0 - 27-HP-replace_rear_light()-0.0] : dec_replacing_rear_light
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	24-HA-Checking_front_lights() => [28-HP-go_front_car()-0.0 - 29-HP-check_left_light()-0.0 - 30-HP-check_right_light()-0.0] : dec_checking_front_ligths
	28-HP-go_front_car()-0.0 => [28-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[29-HP-check_left_light()-0.0, 30-HP-check_right_light()-0.0, 25-HA-Replacing_rear_light(), 21-HA-Closing_hood()]
	end 1
human- Refine agenda with r_beliefs
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [31-HA-Handling_lights() - 32-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 31-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	31-HA-Handling_lights() => [33-HA-Replacing_rear_light() - 34-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [35-HA-Checking_front_lights(), 36-HA-Replacing_rear_light(), 32-HA-Closing_hood()]
	33-HA-Replacing_rear_light() => [] : dec_replacing_rear_light
[92m	refines into nothing[0m
	continue .. next_subtasks=[34-HA-Checking_front_lights(), 32-HA-Closing_hood()]
	34-HA-Checking_front_lights() => [37-HP-go_front_car()-0.0 - 38-HP-check_left_light()-0.0 - 39-HP-check_right_light()-0.0] : dec_checking_front_ligths
	37-HP-go_front_car()-0.0 => [37-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[38-HP-check_left_light()-0.0, 39-HP-check_right_light()-0.0, 32-HA-Closing_hood()]
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	35-HA-Checking_front_lights() => [40-HP-go_front_car()-0.0 - 41-HP-check_left_light()-0.0 - 42-HP-check_right_light()-0.0] : dec_checking_front_ligths
	40-HP-go_front_car()-0.0 => [40-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[41-HP-check_left_light()-0.0, 42-HP-check_right_light()-0.0, 36-HA-Replacing_rear_light(), 32-HA-Closing_hood()]
	end 1
refinement:
[
	dec_handling_lights_start_replace: [26-HP-go_behind_car()-0.0 - 27-HP-replace_rear_light()-0.0 - 23-HA-Checking_front_lights() - 21-HA-Closing_hood()]
	dec_handling_lights_start_checking: [29-HP-check_left_light()-0.0 - 30-HP-check_right_light()-0.0 - 25-HA-Replacing_rear_light() - 21-HA-Closing_hood()]
]
refinement_r:
[
	dec_handling_lights_start_replace: [38-HP-check_left_light()-0.0 - 39-HP-check_right_light()-0.0 - 32-HA-Closing_hood()]
	dec_handling_lights_start_checking: [41-HP-check_left_light()-0.0 - 42-HP-check_right_light()-0.0 - 36-HA-Replacing_rear_light() - 32-HA-Closing_hood()]
]
refinement_r_beliefs:
[
	dec_handling_lights_start_replace: [38-HP-check_left_light()-0.0 - 39-HP-check_right_light()-0.0 - 32-HA-Closing_hood()]
	dec_handling_lights_start_checking: [41-HP-check_left_light()-0.0 - 42-HP-check_right_light()-0.0 - 36-HA-Replacing_rear_light() - 32-HA-Closing_hood()]
]
refinement_h_beliefs:
[
	dec_handling_lights_start_replace: [26-HP-go_behind_car()-0.0 - 27-HP-replace_rear_light()-0.0 - 23-HA-Checking_front_lights() - 21-HA-Closing_hood()]
	dec_handling_lights_start_checking: [29-HP-check_left_light()-0.0 - 30-HP-check_right_light()-0.0 - 25-HA-Replacing_rear_light() - 21-HA-Closing_hood()]
]
decomp  0
decomp_h.subtasks= [26-HP-go_behind_car()-0.0, 27-HP-replace_rear_light()-0.0, 23-HA-Checking_front_lights(), 21-HA-Closing_hood()]
decomp_r.subtasks= [38-HP-check_left_light()-0.0, 39-HP-check_right_light()-0.0, 32-HA-Closing_hood()]
Not same number of subtasks
NEED of belief alignment!

# UPDATE belief divergences
	rear_light:None: H=old R=new

Testing with 1 relevant divergence
divergence tested = rear_light:None: H=old R=new
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : 
	1-HA-Car_maintenance() => [43-HA-Handling_lights() - 44-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 43-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	43-HA-Handling_lights() => [45-HA-Replacing_rear_light() - 46-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [47-HA-Checking_front_lights(), 48-HA-Replacing_rear_light(), 44-HA-Closing_hood()]
	45-HA-Replacing_rear_light() => [] : dec_replacing_rear_light
[92m	refines into nothing[0m
	continue .. next_subtasks=[46-HA-Checking_front_lights(), 44-HA-Closing_hood()]
	46-HA-Checking_front_lights() => [49-HP-go_front_car()-0.0 - 50-HP-check_left_light()-0.0 - 51-HP-check_right_light()-0.0] : dec_checking_front_ligths
	49-HP-go_front_car()-0.0 => [49-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[50-HP-check_left_light()-0.0, 51-HP-check_right_light()-0.0, 44-HA-Closing_hood()]
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	47-HA-Checking_front_lights() => [52-HP-go_front_car()-0.0 - 53-HP-check_left_light()-0.0 - 54-HP-check_right_light()-0.0] : dec_checking_front_ligths
	52-HP-go_front_car()-0.0 => [52-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[53-HP-check_left_light()-0.0, 54-HP-check_right_light()-0.0, 48-HA-Replacing_rear_light(), 44-HA-Closing_hood()]
	end 1
ref_aligned 1:
[
	dec_handling_lights_start_replace: [50-HP-check_left_light()-0.0 - 51-HP-check_right_light()-0.0 - 44-HA-Closing_hood()]
	dec_handling_lights_start_checking: [53-HP-check_left_light()-0.0 - 54-HP-check_right_light()-0.0 - 48-HA-Replacing_rear_light() - 44-HA-Closing_hood()]
]
Check if ok
refinement_r_beliefs:
[
	dec_handling_lights_start_replace: [38-HP-check_left_light()-0.0 - 39-HP-check_right_light()-0.0 - 32-HA-Closing_hood()]
	dec_handling_lights_start_checking: [41-HP-check_left_light()-0.0 - 42-HP-check_right_light()-0.0 - 36-HA-Replacing_rear_light() - 32-HA-Closing_hood()]
]
refinement_h_beliefs:
[
	dec_handling_lights_start_replace: [50-HP-check_left_light()-0.0 - 51-HP-check_right_light()-0.0 - 44-HA-Closing_hood()]
	dec_handling_lights_start_checking: [53-HP-check_left_light()-0.0 - 54-HP-check_right_light()-0.0 - 48-HA-Replacing_rear_light() - 44-HA-Closing_hood()]
]
decomp  0
decomp_h.subtasks= [50-HP-check_left_light()-0.0, 51-HP-check_right_light()-0.0, 44-HA-Closing_hood()]
decomp_r.subtasks= [38-HP-check_left_light()-0.0, 39-HP-check_right_light()-0.0, 32-HA-Closing_hood()]
len(decomp_h.subtasks)= 3
len(decomp_r.subtasks)= 3
i= 0
i= 0
i= 0
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
||	-6-RP-store_oil()-0.0
||	-0-RA-Car_maintenance()
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = todo 	ObsType.INF 	loc=front
||robot_init.right_light = todo 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = todo
||human_init.right_light = todo
|________________________________________________________________________
same effects
decomp  1
decomp_h.subtasks= [53-HP-check_left_light()-0.0, 54-HP-check_right_light()-0.0, 48-HA-Replacing_rear_light(), 44-HA-Closing_hood()]
decomp_r.subtasks= [41-HP-check_left_light()-0.0, 42-HP-check_right_light()-0.0, 36-HA-Replacing_rear_light(), 32-HA-Closing_hood()]
len(decomp_h.subtasks)= 4
len(decomp_r.subtasks)= 4
i= 1
i= 1
i= 1
i= 1
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
||	-6-RP-store_oil()-0.0
||	-0-RA-Car_maintenance()
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = todo 	ObsType.INF 	loc=front
||robot_init.right_light = todo 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = todo
||human_init.right_light = todo
|________________________________________________________________________
same effects
no alignment needed
	divergence is relevant!
Relevant divergences to correct : 	rear_light:None: H=old R=new

COM: com action added = 55-RP-COM_ALIGN['rear_light-None-new']-3.0
Task to refine: 1-HA-Car_maintenance()
decomp i= 0 : origin
	1-HA-Car_maintenance() => [56-HA-Handling_lights() - 57-HA-Closing_hood()] : dec_car_maintenance_H
	multiple decs for 56-HA-Handling_lights():  dec_handling_lights_start_replace  dec_handling_lights_start_checking 
	56-HA-Handling_lights() => [58-HA-Replacing_rear_light() - 59-HA-Checking_front_lights()] : dec_handling_lights_start_replace
		decomposition 1 : dec_handling_lights_start_checking created : [60-HA-Checking_front_lights(), 61-HA-Replacing_rear_light(), 57-HA-Closing_hood()]
	58-HA-Replacing_rear_light() => [] : dec_replacing_rear_light
[92m	refines into nothing[0m
	continue .. next_subtasks=[59-HA-Checking_front_lights(), 57-HA-Closing_hood()]
	59-HA-Checking_front_lights() => [62-HP-go_front_car()-0.0 - 63-HP-check_left_light()-0.0 - 64-HP-check_right_light()-0.0] : dec_checking_front_ligths
	62-HP-go_front_car()-0.0 => [62-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[63-HP-check_left_light()-0.0, 64-HP-check_right_light()-0.0, 57-HA-Closing_hood()]
	end 0
decomp i= 1 : dec_handling_lights_start_checking
	60-HA-Checking_front_lights() => [65-HP-go_front_car()-0.0 - 66-HP-check_left_light()-0.0 - 67-HP-check_right_light()-0.0] : dec_checking_front_ligths
	65-HP-go_front_car()-0.0 => [65-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[66-HP-check_left_light()-0.0, 67-HP-check_right_light()-0.0, 61-HA-Replacing_rear_light(), 57-HA-Closing_hood()]
	end 1
refinement = 
[
	dec_handling_lights_start_replace: [63-HP-check_left_light()-0.0 - 64-HP-check_right_light()-0.0 - 57-HA-Closing_hood()]
	dec_handling_lights_start_checking: [66-HP-check_left_light()-0.0 - 67-HP-check_right_light()-0.0 - 61-HA-Replacing_rear_light() - 57-HA-Closing_hood()]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 68-HP-check_left_light()-1.0
	- 69-HP-check_left_light()-1.0

=> end explo
node explored = 7.0 Flag.F Type.H#1, (human BEGIN []) -2> (robot refill_oil ()) prev=None next=[#2 #3]
new_e_flagged_nodes : 
	8.0 Flag.E Type.I#2, (human check_left_light ()) -1> (human check_left_light ()) prev=#1 next=[]
	8.0 Flag.E Type.I#3, (human check_left_light ()) -1> (human check_left_light ()) prev=#1 next=[]
e_flagged_nodes :
	8.0 Flag.E Type.I#2, (human check_left_light ()) -1> (human check_left_light ()) prev=#1 next=[]
	8.0 Flag.E Type.I#3, (human check_left_light ()) -1> (human check_left_light ()) prev=#1 next=[]
Ns before check = None
Nf = None
Ns after check = None
e_flagged_nodes after check solution:
	8.0 Flag.E Type.I#2, (human check_left_light ()) -1> (human check_left_light ()) prev=#1 next=[]
	8.0 Flag.E Type.I#3, (human check_left_light ()) -1> (human check_left_light ()) prev=#1 next=[]

<@> picked node = 8.0 Flag.E Type.I#2, (human check_left_light ()) -1> (human check_left_light ()) prev=#1 next=[]
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-6-RP-store_oil()-0.0
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-64-HP-check_right_light()-0.0
||	-57-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = todo 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = todo
|________________________________________________________________________
robot- Refine agenda
Task to refine: 6-RP-store_oil()-0.0
decomp i= 0 : dec_handling_lights_start_replace
	end 0
refinement = 
[
	dec_handling_lights_start_replace: [6-RP-store_oil()-0.0]
]
Decomp OK
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-64-HP-check_right_light()-0.0
||	-57-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = todo 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = todo
|________________________________________________________________________
same effects
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 70-RP-store_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-64-HP-check_right_light()-0.0
||	-57-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = todo 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = todo
|________________________________________________________________________
human- Refine agenda
Task to refine: 64-HP-check_right_light()-0.0
decomp i= 0 : dec_handling_lights_start_replace
	end 0
human- Refine agenda with r_beliefs
Task to refine: 64-HP-check_right_light()-0.0
decomp i= 0 : dec_handling_lights_start_replace
	end 0
refinement:
[
	dec_handling_lights_start_replace: [64-HP-check_right_light()-0.0]
]
refinement_r:
[
	dec_handling_lights_start_replace: [64-HP-check_right_light()-0.0]
]
refinement_r_beliefs:
[
	dec_handling_lights_start_replace: [64-HP-check_right_light()-0.0]
]
refinement_h_beliefs:
[
	dec_handling_lights_start_replace: [64-HP-check_right_light()-0.0]
]
decomp  0
decomp_h.subtasks= [64-HP-check_right_light()-0.0]
decomp_r.subtasks= [64-HP-check_right_light()-0.0]
len(decomp_h.subtasks)= 1
len(decomp_r.subtasks)= 1
i= 0
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-57-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = todo 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = todo
|________________________________________________________________________
same effects
no alignment needed
No relevant belief divergence for refinement
refinement = 
[
	dec_handling_lights_start_replace: [64-HP-check_right_light()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 71-HP-check_right_light()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-57-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 0-RA-Car_maintenance()
decomp i= 0 : dec_handling_lights_start_replace
	0-RA-Car_maintenance() => [72-RP-go_front_car()-0.0 - 73-RP-refill_washer()-0.0 - 74-RP-refill_oil()-0.0 - 75-RP-store_oil()-0.0] : dec_car_maintenance_R
	72-RP-go_front_car()-0.0 => [72-RP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[73-RP-refill_washer()-0.0, 74-RP-refill_oil()-0.0, 75-RP-store_oil()-0.0]
	73-RP-refill_washer()-0.0 => [73-RP-refill_washer()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[74-RP-refill_oil()-0.0, 75-RP-store_oil()-0.0]
	74-RP-refill_oil()-0.0 => [74-RP-refill_oil()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[75-RP-store_oil()-0.0]
	75-RP-store_oil()-0.0 => [75-RP-store_oil()-0.0] : 
[92m	already done[0m
	75-RP-store_oil()-0.0 => DecompType.AGENDA_EMPTY
	end 0
refinement = 
[
	dec_handling_lights_start_replace: [DecompType.AGENDA_EMPTY]
]
AGENDA_EMPTY => IDLE added
applied refinement = 
next actions:
	- 76-RP-IDLE[]-0.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-57-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 57-HA-Closing_hood()
decomp i= 0 : dec_handling_lights_start_replace
	57-HA-Closing_hood() => [77-HP-go_front_car()-0.0 - 78-HP-close_hood()-0.0] : dec_closing_hood
	77-HP-go_front_car()-0.0 => [77-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[78-HP-close_hood()-0.0]
	end 0
human- Refine agenda with r_beliefs
Task to refine: 57-HA-Closing_hood()
decomp i= 0 : dec_handling_lights_start_replace
	57-HA-Closing_hood() => [79-HP-go_front_car()-0.0 - 80-HP-close_hood()-0.0] : dec_closing_hood
	79-HP-go_front_car()-0.0 => [79-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[80-HP-close_hood()-0.0]
	end 0
refinement:
[
	dec_handling_lights_start_replace: [78-HP-close_hood()-0.0]
]
refinement_r:
[
	dec_handling_lights_start_replace: [80-HP-close_hood()-0.0]
]
refinement_r_beliefs:
[
	dec_handling_lights_start_replace: [80-HP-close_hood()-0.0]
]
refinement_h_beliefs:
[
	dec_handling_lights_start_replace: [78-HP-close_hood()-0.0]
]
decomp  0
decomp_h.subtasks= [78-HP-close_hood()-0.0]
decomp_r.subtasks= [80-HP-close_hood()-0.0]
len(decomp_h.subtasks)= 1
len(decomp_r.subtasks)= 1
i= 0
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
same effects
no alignment needed
No relevant belief divergence for refinement
refinement = 
[
	dec_handling_lights_start_replace: [78-HP-close_hood()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 81-HP-close_hood()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
refinement = 
[
	dec_handling_lights_start_replace: [DecompType.BOTH_AGENDAS_EMPTY]
]
BOTH_AGENDAS_EMPTY
applied refinement = 
next actions:

=> end explo
node explored = 11.0 Flag.E Type.F#2, (human check_left_light ()) -5> (human close_hood ()) prev=#1 next=[]
new_e_flagged_nodes : 
	11.0 Flag.E Type.F#2, (human check_left_light ()) -5> (human close_hood ()) prev=#1 next=[]
e_flagged_nodes :
	8.0 Flag.E Type.I#3, (human check_left_light ()) -1> (human check_left_light ()) prev=#1 next=[]
	11.0 Flag.E Type.F#2, (human check_left_light ()) -5> (human close_hood ()) prev=#1 next=[]
Ns before check = None
Nf = 11.0 Flag.E Type.F#2, (human check_left_light ()) -5> (human close_hood ()) prev=#1 next=[]
new Ns!
Ns after check = 11.0 Flag.S Type.F#2, (human check_left_light ()) -5> (human close_hood ()) prev=#1 next=[]
e_flagged_nodes after check solution:
	8.0 Flag.E Type.I#3, (human check_left_light ()) -1> (human check_left_light ()) prev=#1 next=[]

<@> picked node = 8.0 Flag.E Type.I#3, (human check_left_light ()) -1> (human check_left_light ()) prev=#1 next=[]
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-6-RP-store_oil()-0.0
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-67-HP-check_right_light()-0.0
||	-61-HA-Replacing_rear_light()
||	-57-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = todo 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = todo
|________________________________________________________________________
robot- Refine agenda
Task to refine: 6-RP-store_oil()-0.0
decomp i= 0 : dec_handling_lights_start_checking
	end 0
refinement = 
[
	dec_handling_lights_start_checking: [6-RP-store_oil()-0.0]
]
Decomp OK
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-67-HP-check_right_light()-0.0
||	-61-HA-Replacing_rear_light()
||	-57-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = front 	ObsType.INF 	loc=front
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = todo 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = front
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = todo
|________________________________________________________________________
same effects
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 82-RP-store_oil()-1.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-67-HP-check_right_light()-0.0
||	-61-HA-Replacing_rear_light()
||	-57-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = todo 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = todo
|________________________________________________________________________
human- Refine agenda
Task to refine: 67-HP-check_right_light()-0.0
decomp i= 0 : dec_handling_lights_start_checking
	end 0
human- Refine agenda with r_beliefs
Task to refine: 67-HP-check_right_light()-0.0
decomp i= 0 : dec_handling_lights_start_checking
	end 0
refinement:
[
	dec_handling_lights_start_checking: [67-HP-check_right_light()-0.0]
]
refinement_r:
[
	dec_handling_lights_start_checking: [67-HP-check_right_light()-0.0]
]
refinement_r_beliefs:
[
	dec_handling_lights_start_checking: [67-HP-check_right_light()-0.0]
]
refinement_h_beliefs:
[
	dec_handling_lights_start_checking: [67-HP-check_right_light()-0.0]
]
decomp  0
decomp_h.subtasks= [67-HP-check_right_light()-0.0]
decomp_r.subtasks= [67-HP-check_right_light()-0.0]
len(decomp_h.subtasks)= 1
len(decomp_r.subtasks)= 1
i= 0
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-61-HA-Replacing_rear_light()
||	-57-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = todo 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = todo
|________________________________________________________________________
same effects
no alignment needed
No relevant belief divergence for refinement
refinement = 
[
	dec_handling_lights_start_checking: [67-HP-check_right_light()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 83-HP-check_right_light()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
||	-0-RA-Car_maintenance()
| AGENDA human =
||	-61-HA-Replacing_rear_light()
||	-57-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
Task to refine: 0-RA-Car_maintenance()
decomp i= 0 : dec_handling_lights_start_checking
	0-RA-Car_maintenance() => [84-RP-go_front_car()-0.0 - 85-RP-refill_washer()-0.0 - 86-RP-refill_oil()-0.0 - 87-RP-store_oil()-0.0] : dec_car_maintenance_R
	84-RP-go_front_car()-0.0 => [84-RP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[85-RP-refill_washer()-0.0, 86-RP-refill_oil()-0.0, 87-RP-store_oil()-0.0]
	85-RP-refill_washer()-0.0 => [85-RP-refill_washer()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[86-RP-refill_oil()-0.0, 87-RP-store_oil()-0.0]
	86-RP-refill_oil()-0.0 => [86-RP-refill_oil()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[87-RP-store_oil()-0.0]
	87-RP-store_oil()-0.0 => [87-RP-store_oil()-0.0] : 
[92m	already done[0m
	87-RP-store_oil()-0.0 => DecompType.AGENDA_EMPTY
	end 0
refinement = 
[
	dec_handling_lights_start_checking: [DecompType.AGENDA_EMPTY]
]
AGENDA_EMPTY => IDLE added
applied refinement = 
next actions:
	- 88-RP-IDLE[]-0.0

continue ..
=> H step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
||	-61-HA-Replacing_rear_light()
||	-57-HA-Closing_hood()
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
human- Refine agenda
Task to refine: 61-HA-Replacing_rear_light()
decomp i= 0 : dec_handling_lights_start_checking
	61-HA-Replacing_rear_light() => [] : dec_replacing_rear_light
[92m	refines into nothing[0m
	continue with next_task popped from agenda 57-HA-Closing_hood()
	57-HA-Closing_hood() => [89-HP-go_front_car()-0.0 - 90-HP-close_hood()-0.0] : dec_closing_hood
	89-HP-go_front_car()-0.0 => [89-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[90-HP-close_hood()-0.0]
	end 0
human- Refine agenda with r_beliefs
Task to refine: 61-HA-Replacing_rear_light()
decomp i= 0 : dec_handling_lights_start_checking
	61-HA-Replacing_rear_light() => [] : dec_replacing_rear_light
[92m	refines into nothing[0m
	continue with next_task popped from agenda 57-HA-Closing_hood()
	57-HA-Closing_hood() => [91-HP-go_front_car()-0.0 - 92-HP-close_hood()-0.0] : dec_closing_hood
	91-HP-go_front_car()-0.0 => [91-HP-go_front_car()-0.0] : 
[92m	already done[0m
	continue .. next_subtasks=[92-HP-close_hood()-0.0]
	end 0
refinement:
[
	dec_handling_lights_start_checking: [90-HP-close_hood()-0.0]
]
refinement_r:
[
	dec_handling_lights_start_checking: [92-HP-close_hood()-0.0]
]
refinement_r_beliefs:
[
	dec_handling_lights_start_checking: [92-HP-close_hood()-0.0]
]
refinement_h_beliefs:
[
	dec_handling_lights_start_checking: [90-HP-close_hood()-0.0]
]
decomp  0
decomp_h.subtasks= [90-HP-close_hood()-0.0]
decomp_r.subtasks= [92-HP-close_hood()-0.0]
len(decomp_h.subtasks)= 1
len(decomp_r.subtasks)= 1
i= 0
checking if diff effects
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = open 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = open
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
same effects
no alignment needed
No relevant belief divergence for refinement
refinement = 
[
	dec_handling_lights_start_checking: [90-HP-close_hood()-0.0]
]
Decomp OK
apply acting agent
applicable with other's beliefs
Update other's beliefs
applied refinement = 
next actions:
	- 93-HP-close_hood()-1.0

continue ..
=> R step explo ==================================================================================
__________________________________________________________________________
| AGENDA robot =
| AGENDA human =
|------------------------------------------------------------------------
| STATE robot =
||robot_init.at_robot = front 	ObsType.OBS 	loc=front
||robot_init.at_human = front 	ObsType.OBS 	loc=front
||robot_init.at_oil_bottle = cabinet 	ObsType.INF 	loc=cabinet
||robot_init.washer = full 	ObsType.OBS 	loc=front
||robot_init.oil = full 	ObsType.INF 	loc=front
||robot_init.hood = closed 	ObsType.OBS 	loc=front
||robot_init.rear_light = new 	ObsType.INF 	loc=rear
||robot_init.left_light = ok 	ObsType.INF 	loc=front
||robot_init.right_light = ok 	ObsType.INF 	loc=front
| STATE human =
||human_init.at_robot = front
||human_init.at_human = front
||human_init.at_oil_bottle = cabinet
||human_init.washer = full
||human_init.oil = full
||human_init.hood = closed
||human_init.rear_light = new
||human_init.left_light = ok
||human_init.right_light = ok
|________________________________________________________________________
robot- Refine agenda
refinement = 
[
	dec_handling_lights_start_checking: [DecompType.BOTH_AGENDAS_EMPTY]
]
BOTH_AGENDAS_EMPTY
applied refinement = 
next actions:

=> end explo
node explored = 11.0 Flag.E Type.F#3, (human check_left_light ()) -5> (human close_hood ()) prev=#1 next=[]
new_e_flagged_nodes : 
	11.0 Flag.E Type.F#3, (human check_left_light ()) -5> (human close_hood ()) prev=#1 next=[]
e_flagged_nodes :
	11.0 Flag.E Type.F#3, (human check_left_light ()) -5> (human close_hood ()) prev=#1 next=[]
Ns before check = 11.0 Flag.S Type.F#2, (human check_left_light ()) -5> (human close_hood ()) prev=#1 next=[]
Nf = 11.0 Flag.E Type.F#3, (human check_left_light ()) -5> (human close_hood ()) prev=#1 next=[]
Ns after check = 11.0 Flag.S Type.F#2, (human check_left_light ()) -5> (human close_hood ()) prev=#1 next=[]
e_flagged_nodes after check solution:
	=> time spent first exploration = 69ms
Start refining u nodes
	=> time spent refining = 0ms
Total duration = 69ms
Non relevant div:
False
Plans:
18-RP-COM_ALIGN['oil-None-low']-3.0 19-RP-refill_oil()-1.0 55-RP-COM_ALIGN['rear_light-None-new']-3.0 68-HP-check_left_light()-1.0 70-RP-store_oil()-1.0 71-HP-check_right_light()-1.0 76-RP-IDLE[]-0.0 81-HP-close_hood()-1.0/18-RP-COM_ALIGN['oil-None-low']-3.0 19-RP-refill_oil()-1.0 55-RP-COM_ALIGN['rear_light-None-new']-3.0 69-HP-check_left_light()-1.0 82-RP-store_oil()-1.0 83-HP-check_right_light()-1.0 88-RP-IDLE[]-0.0 93-HP-close_hood()-1.0
